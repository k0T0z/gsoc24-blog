<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/" rel="alternate" type="text/html" /><updated>2024-10-07T19:15:12+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/feed.xml</id><title type="html">k0T0z</title><subtitle>Just a place for me to dump my thoughts</subtitle><entry><title type="html">Google Summer of Code 2024 Week 18 and 19: Wrapping Up and Final Evaluation</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-and-19-wrapping-up-and-final-evaluation.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 18 and 19: Wrapping Up and Final Evaluation" /><published>2024-09-22T21:00:00+00:00</published><updated>2024-09-22T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-and-19-wrapping-up-and-final-evaluation</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-and-19-wrapping-up-and-final-evaluation.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>My final evaluation report: <a href="https://docs.google.com/document/d/1ahKWo3m9fgqAfR9a3cqaIA08Sns05O68nhalpMNjDd8/edit?usp=sharing">Procedural Fragment Shader Generation Using Classic Machine Learning Google Summer Of Code 2024 Final Report</a>.</p>

<p>What an incredible journey this project has been! While I wish I had more time to devote to it, I’m immensely proud of what I’ve accomplished and the knowledge I’ve gained. The challenges I encountered have only fueled my determination to continue developing this project beyond the Google Summer of Code program. Let me share some of the significant hurdles I overcame and what I learned from them.</p>

<h2 id="major-challenges">Major Challenges</h2>

<h3 id="1-test-runner-compatibility-issues">1. Test Runner Compatibility Issues</h3>

<p>One of the first obstacles I faced was that the <code class="language-plaintext highlighter-rouge">test-runner</code> wouldn’t function on my Arch Linux machine, though it worked fine in an Ubuntu VM. Rather than simply working around this by using the VM, I decided to tackle the issue head-on. This problem had actually first surfaced before my acceptance into the program when attempting to build RGM on Ubuntu.</p>

<p>The issue manifested as a linking error involving Abseil, Protobuf, and gRPC packages. My initial approach was to:</p>
<ol>
  <li>Create a solution called <a href="https://github.com/k0T0z/absl-proto-grpc-ci">absl-proto-grpc-ci</a> to identify compatible versions of all three packages</li>
  <li>Manually clone, build, and install these versions locally to <code class="language-plaintext highlighter-rouge">/usr/local/</code></li>
</ol>

<p>Despite these efforts, the problem persisted until I discovered the root cause: missing library references. The solution was to add <code class="language-plaintext highlighter-rouge">-lgpr</code> and <code class="language-plaintext highlighter-rouge">-labseil_dll</code>/<code class="language-plaintext highlighter-rouge">-labsl_log_internal_message -labsl_log_internal_check_op</code> to the <code class="language-plaintext highlighter-rouge">LD</code> variable.</p>

<h3 id="2-rgm-runtime-error-resolution">2. RGM Runtime Error Resolution</h3>

<p>Addressing the RGM runtime error led to a complete refactoring of RGM’s CMake build system. This process resulted in numerous improvements to the overall build architecture. For detailed information about this issue, I’ve documented it thoroughly in my blog post: <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-12-and-13-rgm.html#runtime-nightmare">Google Summer of Code 2024 Week 11, 12, and 13: RGM: Runtime Nightmare</a>.</p>

<h2 id="implementation-highlights">Implementation Highlights</h2>

<h3 id="the-renderer">The Renderer</h3>

<p>As the project wrapped up, I implemented a simplified renderer solution. While ideally, we would have used ENIGMA’s Graphics System, time constraints led to a different approach. The current implementation uses Qt and includes:</p>
<ul>
  <li>A standalone class for shader preview</li>
  <li>Modifications to the <code class="language-plaintext highlighter-rouge">VisualShader</code> class to generate appropriate header code</li>
</ul>

<p>In my proposal, I mentioned that the Renderer will be done after the generator is done. The thing is I need a context to render the shader on, this could be <a href="https://www.glfw.org/">GLFW</a> or Qt. I decided it will be Qt so moved finishing the Renderer AFTER the <code class="language-plaintext highlighter-rouge">Visual Shader Editor</code> is done.</p>

<p>Robert talked to me about that in <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</a> by the way.</p>

<blockquote>
  <p>R0bert — 25/08/2024 18:48</p>
</blockquote>

<blockquote>
  <p>are you saying you want to have  a “Preview” window on your shader editor?
that might be more difficult then if you want to do a live preview of that but we can talk about it</p>
</blockquote>

<p>Here’s a glimpse of how the shader code is set:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">shader_program</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="nf">QOpenGLShaderProgram</span><span class="p">());</span>

<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">vertex_shader_source</span> <span class="o">=</span> <span class="s">R"(
    #version 330 core
    layout(location = 0) in vec2 aPos;
    layout(location = 1) in vec2 aTexCoord;

    out vec2 TexCoord;

    void main() {
    gl_Position = vec4(aPos, 0.0, 1.0);
    TexCoord = aTexCoord;
    }
)"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fragment_shader_source</span> <span class="p">{</span><span class="n">code</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="s">R"(
    #version 330 core
    out vec4 FragColor;
    in vec2 TexCoord;

    uniform float uTime;

    void main() {
    FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
)"</span> <span class="o">:</span> <span class="s">"#version 330 core</span><span class="se">\n\n</span><span class="s">"</span> <span class="o">+</span> <span class="n">code</span><span class="p">};</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">addShaderFromSourceCode</span><span class="p">(</span><span class="n">QOpenGLShader</span><span class="o">::</span><span class="n">Vertex</span><span class="p">,</span> <span class="n">vertex_shader_source</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Vertex shader compilation failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">addShaderFromSourceCode</span><span class="p">(</span><span class="n">QOpenGLShader</span><span class="o">::</span><span class="n">Fragment</span><span class="p">,</span> <span class="n">fragment_shader_source</span><span class="p">.</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Fragment shader compilation failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Shader program linking failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">shader_needs_update</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span></code></pre></figure>

<p>See the <code class="language-plaintext highlighter-rouge">#version 330 core</code> line in the header, this line is not required by ENIGMA’s Graphics System. This means when it comes to integrate the Renderer with ENIGMA’s Graphics System, some modifications will be made for sure.</p>

<p>if you wanna try the Renderer, you can download this Qt project: <a href="/gsoc24-blog/assets/testshaderrenderer.zip">testshaderrenderer.zip</a>.</p>

<h2 id="protobuf-work">Protobuf Work</h2>

<p>Josh told me to start with this task a while ago <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html#enigma-and-google-protobuf">Google Summer of Code 2024 Week 6: The Rush Summer: ENIGMA and Google Protobuf</a> and I decided to move on and make that change when the editor is done. Now, actually I don’t know how much time it will take to finish this task 🙂. That introduces a very important lesson: DO NOT IGNORE ANY THING THAT JOSH SAYS haha 🤣.</p>

<p>Anyway, I remember talking with Josh and Robert about this task and to handle it.</p>

<blockquote>
  <p>Josh — 31/08/2024 08:10</p>
</blockquote>

<blockquote>
  <p>I think the trouble we’re running into here is that we lack a clear separation of concerns—for a (somewhat outdated) example, model-view-controller
these classes I’m seeing are great for adapting myriad node types to a common UI; as an example, he seems to implement stuff like get_caption so that each node type can just tell the UI what to render for the node
that’s fine; what we want to do is take the stuff inside of those configurable objects and extract those to protos
so we need logic to take a node message and generate the correct node subclass; that’s easy to come up with once the storage format on disk for that info is chosen
basically, all the variables that each box needs to configure with input boxes and sliders and whatever need to be fields in a message; that FloatOpGraphNode message looks more or less fine, modulo some missing tag numbers and optionals</p>
</blockquote>

<blockquote>
  <p>from there, I would store the appropriate message in each GraphNode; personally, I’d probably use a template to accomplish this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Proto</span><span class="p">&gt;</span> <span class="k">class</span> <span class="nc">GraphNode</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">get_caption</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
    <span class="c1">// use Qt translation routines to get the human-readable caption for our message type.</span>
    <span class="c1">// A map would be fine for this, too. Or a custom attribute declared in the proto source.</span>
    <span class="k">return</span> <span class="n">_T</span><span class="p">(</span><span class="n">Proto</span><span class="o">::</span><span class="n">descriptor</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">+</span> <span class="s">"-caption"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<blockquote>
  <p>a custom attribute would look like this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">package</span> <span class="n">whatever_proto_package</span><span class="p">;</span>
<span class="n">extend</span> <span class="n">google</span><span class="p">.</span><span class="n">protobuf</span><span class="p">.</span><span class="n">MessageOptions</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">editor_caption</span> <span class="o">=</span> <span class="mi">50001</span><span class="p">;</span>  <span class="c1">// Define a custom option with a unique field number</span>
<span class="p">}</span>
<span class="n">message</span> <span class="n">FloatOpGraphNode</span> <span class="p">{</span>
  <span class="n">option</span> <span class="p">(</span><span class="n">editor_caption</span><span class="p">)</span> <span class="o">=</span> <span class="s">"Floating Point Operation"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>then the C++ would do this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">get_caption</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
  <span class="c1">// Still translate it because we translate all Qt user strings</span>
  <span class="k">return</span> <span class="n">_T</span><span class="p">(</span><span class="n">Proto</span><span class="o">::</span><span class="n">descriptor</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">().</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">whatever_proto_package</span><span class="o">::</span><span class="n">editor_caption</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>I omitted a lot of checking for, e.g, the descriptor being null or the option missing or whatever
I’d also advise putting our message extensions in a single proto source for the entire project
like, anywhere we’re already extending MessageOptions, we should define any editor_caption field there
if we’re already doing that, I apologize for the confusion 
and so we’re clear, use whatever of that is helpful to you; I don’t care how you pull that off, protobuf is meant to be a tool to make your life easier
it can just be serialized and written directly to disk or read directly from disk, so I’d expect your UI code to read the entire graph from one binproto/textproto dump, then generate the UI graph nodes from message pointers as we do with our other Qt models
those Qt models are probably a good reference if they don’t confuse you to tears
if they do, ask me</p>
</blockquote>

<blockquote>
  <p>yeah, and storing that data is where the template comes in, though honestly, you can avoid the entirely using proto reflection if you prefer</p>
</blockquote>

<blockquote>
  <p>R0bert — 31/08/2024 19:34</p>
</blockquote>

<blockquote>
  <p>Josh explained, “separate your concerns”, have a GraphNode message that’s templated to take the rest of the parameters for the node
the only reason the source you linked has 50 classes is because its make a type for each one instead of separating the node from the ui</p>
</blockquote>

<p>Yeah, so now this is the biggest problem in my project now. The thing is that ENIGMA is mainly depends on Protobuf for serialization, deserialization, and many other purposes.</p>

<h3 id="noise-kernels">Noise Kernels</h3>

<p>I successfully implemented two additional noise kernels:</p>
<ul>
  <li>Perlin Noise</li>
  <li>Worley Noise</li>
</ul>

<h2 id="project-structure">Project Structure</h2>

<p>The final implementation is integrated into two main repositories:</p>

<ol>
  <li><a href="https://github.com/enigma-dev/enigma-dev">enigma-dev</a>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> enigma-dev
 ├── ...
 ├── CommandLine
 │   ├── ...
 │   └── testing
 │       ├── ...
 │       └── Tests
 │           ├── ...
 │           ├── visual_shader_tests.cpp
 │           ├── visual_shader_nodes_tests.cpp
 │           └── vs_noise_nodes_tests.cpp  
 |
 └── shared
     ├── ...
     └── ResourceTransformations
         └── VisualShader
             ├── README.md
             ├── visual_shader.h
             ├── visual_shader.cpp
             ├── visual_shader_nodes.h
             ├── visual_shader_nodes.cpp
             ├── vs_noise_nodes.h
             └── vs_noise_nodes.cpp
</code></pre></div>    </div>
  </li>
  <li><a href="https://github.com/enigma-dev/RadialGM">RadialGM</a>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> RadialGM
 ├── ...
 ├── Editors
 │   ├── ...
 │   ├── VisualShaderEditor.h
 │   └── VisualShaderEditor.cpp
 |
 └── Tests
     ├── CMakeLists.txt
     ├── tests_main.cpp
     ├── MainWindowTests.h
     ├── MainWindowTests.cpp
     └── Editors
         ├── VisualShaderEditorTests.h
         └── VisualShaderEditorTests.cpp
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="outputs-with-graphs">Outputs With Graphs</h2>

<p>I’ve recreated several textures from <a href="https://thebookofshaders.com/">The Book of Shaders</a>, including:</p>

<p>A simple Wood texture from The Book Of Shaders:</p>

<p><img src="/gsoc24-blog/assets/wood-texture.png" alt="Wood Texture" /></p>

<p>My project’s output:</p>

<p><img src="/gsoc24-blog/assets/ENIGMA-visual-shader-wood-texture.png" alt="ENIGMA Visual Shader Wood Texture" />
<img src="/gsoc24-blog/assets/ENIGMA-visual-shader-wood-texture2.png" alt="ENIGMA Visual Shader Wood Texture" /></p>

<p>Check out the texture demo at <a href="https://youtu.be/9F7YYRG7MkM?si=mdgc4BBncT7IXNKa">https://youtu.be/9F7YYRG7MkM?si=mdgc4BBncT7IXNKa</a>.</p>

<hr />

<p>A simple Splatter texture from The Book Of Shaders:</p>

<p><img src="/gsoc24-blog/assets/splatter-texture.png" alt="Splatter Texture" /></p>

<p>My project’s output:</p>

<p><img src="/gsoc24-blog/assets/ENIGMA-visual-shader-splatter-texture.png" alt="ENIGMA Visual Shader Splatter Texture" />
<img src="/gsoc24-blog/assets/ENIGMA-visual-shader-splatter-texture2.png" alt="ENIGMA Visual Shader Splatter Texture" /></p>

<p>Check out the texture demo at <a href="https://youtu.be/AgsveEXKu8Y?si=G_VDLM0u-G-0w-wJ">https://youtu.be/AgsveEXKu8Y?si=G_VDLM0u-G-0w-wJ</a>.</p>

<p>The Splatter texture implementation led to several important fixes in the noise kernels, documented in these commits:</p>
<ul>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/4c716895d46130ec2cf7bbd8fd95806124563977">4c716895d46130ec2cf7bbd8fd95806124563977</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/55a050609592a0b2b1cfac8a526c84c133ed6c7d">55a050609592a0b2b1cfac8a526c84c133ed6c7d</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/7a8aa69d1445c6f77895b2f6d2784104c717fbc1">7a8aa69d1445c6f77895b2f6d2784104c717fbc1</a></li>
</ul>

<hr />]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 14, 15, 16, and 17: I Hate Frontend</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 14, 15, 16, and 17: I Hate Frontend" /><published>2024-08-25T21:00:00+00:00</published><updated>2024-08-25T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>After encountering numerous challenges with the <a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> package, I made the strategic decision to develop a custom implementation. This decision was driven by the need for precision and maintainability, especially considering that this project’s ultimate goal extends beyond a Visual Shader Editor to a machine learning approach for shader generation.</p>

<h2 id="analysis-of-third-party-solution">Analysis of Third-Party Solution</h2>

<h3 id="limitations-of-nodeeditor-package">Limitations of nodeeditor Package</h3>
<ol>
  <li><strong>Scope Mismatch</strong>: The library encompasses backend functionality that I had already implemented prior to the midterm evaluation. It exceeds the requirements of a GUI library, introducing unnecessary complexity.</li>
  <li><strong>Bug Density</strong>: The package contains numerous bugs that would require significant time investment to resolve.</li>
  <li><strong>Integration Challenges</strong>: Attempts to integrate the library with my midterm evaluation code proved problematic, potentially rendering integration unfeasible.</li>
  <li><strong>Architectural Constraints</strong>: As documented in <a href="https://github.com/paceholder/nodeeditor/issues/149">Issue #149</a>, the global theming system prevents the creation of multiple editor instances. While a fix exists in <a href="https://github.com/paceholder/nodeeditor/pull/172">PR #172</a>, it remains unmerged.</li>
</ol>

<h2 id="custom-implementation-benefits">Custom Implementation Benefits</h2>

<h3 id="simplified-port-management">Simplified Port Management</h3>
<p>The nodeeditor library appears to use a complex algorithm for port detection and event handling. My approach simplifies this by treating ports as discrete objects:</p>

<ol>
  <li><strong>Port Objects as Children</strong>: By making ports children of nodes, we achieve clearer object hierarchy and simpler event propagation.</li>
  <li>
    <p><strong>Event Handler Reduction</strong>: This approach requires only three key functions:</p>

    <h4 id="on_port_pressed"><code class="language-plaintext highlighter-rouge">on_port_pressed</code></h4>
    <p>Initializes or resets the “temporary” connection object. A temporary connection exists in a dragging state, remaining uncommitted until finalized.</p>

    <h4 id="on_port_dragged"><code class="language-plaintext highlighter-rouge">on_port_dragged</code></h4>
    <p>Manages the continuous update of temporary connections during mouse movement. The implementation is straightforward, focusing solely on creation and updating of the temporary connection object.</p>

    <h4 id="on_port_dropped"><code class="language-plaintext highlighter-rouge">on_port_dropped</code></h4>
    <p>Handles the connection finalization when the mouse is released. Port detection is simplified as each port is a discrete object.</p>
  </li>
</ol>

<p>While implementing this custom solution was time-intensive and occasionally daunting due to its scope, the resulting system is more maintainable and aligned with our specific needs.</p>

<h3 id="event-system-architecture">Event System Architecture</h3>
<p>The implementation uses a simple but effective upward event propagation model:</p>
<ul>
  <li>Events emit from widgets and traverse up the widget tree until reaching the target</li>
  <li>This ensures encapsulation, as children cannot directly access parents</li>
  <li>Event handling occurs at the appropriate level in the widget hierarchy</li>
</ul>

<h2 id="testing-framework-development">Testing Framework Development</h2>

<h3 id="visual-shader-editor-testing-infrastructure">Visual Shader Editor Testing Infrastructure</h3>
<p>I’ve established a new <code class="language-plaintext highlighter-rouge">Tests</code> subdirectory within RGM, focusing on:</p>
<ul>
  <li>Foundation for testing <code class="language-plaintext highlighter-rouge">MainWindow</code> and <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> classes</li>
  <li>Exploration of various testing methodologies, guided by resources like <a href="http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html">Difference between Mocks, Fakes, Stubs and Dummies</a></li>
</ul>

<h3 id="testing-challenges-and-solutions">Testing Challenges and Solutions</h3>
<ol>
  <li><strong>Protobuf and Model Mocking</strong>: Initial attempts to mock <code class="language-plaintext highlighter-rouge">MessageModel</code> and <code class="language-plaintext highlighter-rouge">ProtoModel</code> classes proved problematic</li>
  <li><strong>Isolation vs. Integration</strong>: Balancing the need to test the <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> in isolation while also testing system integration</li>
  <li><strong>Workaround Implementation</strong>: Created a parameter-less constructor for <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> to facilitate testing</li>
</ol>

<h3 id="current-testing-status">Current Testing Status</h3>
<p>While UI testing presents significant challenges, we’ve established a solid foundation:</p>
<ul>
  <li>Created the <code class="language-plaintext highlighter-rouge">Tests</code> directory structure</li>
  <li>Implemented tests for the <code class="language-plaintext highlighter-rouge">VisualShader</code> class</li>
  <li>Acknowledged the complexity of comprehensive UI testing and prioritized accordingly</li>
</ul>

<h2 id="project-extension-considerations">Project Extension Considerations</h2>
<p>Despite aspirations to extend the project to include machine learning components, time constraints have necessitated focusing on core functionality. The integration complexity between Qt5, Protobuf, gRPC, <code class="language-plaintext highlighter-rouge">VisualShader</code>, <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code>, JDI, and ENIGMA’s Graphics System requires careful consideration and extensive testing.</p>

<h2 id="notes">Notes</h2>
<p>As confirmed by Robert on August 30, 2024:</p>

<blockquote>
  <p>R0bert — 30/08/2024 17:58</p>
</blockquote>

<blockquote>
  <p>be careful im not sure if we can extend yours again this year, so dont count on it
i saw mentor thread talking about that</p>
</blockquote>

<p>This reinforces our focus on delivering a robust core implementation rather than expanding scope.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 13: RGM, Season 2</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 13: RGM, Season 2" /><published>2024-08-18T21:00:00+00:00</published><updated>2024-08-18T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<h2 id="local-not-needed">Local Not Needed</h2>

<p>That error is because of grpc not loading correctly. Anyway, I thought at first that this is due to the manually built packages so let’s clean them up and use <code class="language-plaintext highlighter-rouge">pacman</code>. I already know what to do.</p>

<p>Back to the absl link error, just like linking <code class="language-plaintext highlighter-rouge">-labseil_dll</code> worked, after using trail and error, I found that linking <code class="language-plaintext highlighter-rouge">-labsl_log_internal_message -labsl_log_internal_check_op</code> fixed the issue. Anyway, I can now run RGM with the pacman installed packages, however, the same error is still there.</p>

<h2 id="back-to-the-runtime-issue">Back To The Runtime Issue</h2>

<p>When I face a problem, I can’t get it out of my brain. Although, Robert told me to continue my work and not worry about it now, I kept trying on it. On 17th August 2024, I managed to fix the runtime issue by luck (الحمدلله). Now let me explain and wrap up this whole thing.</p>

<p>In CMake, we have two ways for finding a package or in other words, two files to use for finding a package. The first one is <code class="language-plaintext highlighter-rouge">Find&lt;package&gt;.cmake</code> and the second one is <code class="language-plaintext highlighter-rouge">&lt;package&gt;Config.cmake</code>. What I know about these files at this point is that the second one is the modern way to find a package, however, as ENIGMA is 16 years old, it finds packages using the first way.</p>

<p>I worked on RGM and fixed some issues inside its CMake files and one of them is the way for finding gRPC and protobuf. The thing is that I didn’t check other CMakes. More specifically, I didn’t check <code class="language-plaintext highlighter-rouge">enigma-dev/shared/CMakeLists.txt</code>, <code class="language-plaintext highlighter-rouge">enigma-dev/shared/protos/CMakeLists.txt</code>, <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/CMakeLists.txt</code>, and <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/libEGM/CMakeLists.txt</code>. All these files were using the following way to find gRPC and protobuf:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">include</span><span class="p">(</span>FindProtobuf<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_EGM</span><span class="si">}</span> PRIVATE <span class="si">${</span><span class="nv">Protobuf_LIBRARY</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div>

<p>or</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">Protobuf_INCLUDE_DIRS</span><span class="si">}</span><span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_PROTO</span><span class="si">}</span> PRIVATE <span class="si">${</span><span class="nv">Protobuf_LIBRARIES</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div>

<p>I replaced these lines with the following:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">find_package</span><span class="p">(</span>Protobuf CONFIG REQUIRED<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_PROTO</span><span class="si">}</span> PRIVATE protobuf::libprotobuf<span class="p">)</span>
</code></pre></div></div>

<p>The new lines are working fine if you used the system packages or the local ones.</p>

<p>Now, how is this related to this runtime issue? The thing is that I don’t know what are the differences between these two files however, I do know that mixing them up will cause this runtime issue. This is not a predictable issue because everything was fine, linking completed successfully, nothing wrong and if you take a look at the error above, I bet that you will be able to find the issue. Even by debugging the code, take a look at the stack trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[k0t0z@archlinux build]$ gdb ./RadialGM

(gdb) run
Starting program: /home/k0t0z/Desktop/gsoc24/RadialGM/build/RadialGM 
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR                                                                                                                       
E0000 00:00:1723739441.404244    1995 metrics.cc:49] Metric name grpc.lb.pick_first.disconnections has already been registered.

Program received signal SIGABRT, Aborted.
0x00007ffff3ea8e44 in ?? () from /usr/lib/libc.so.6
(gdb) bt
#0  0x00007ffff3ea8e44 in ?? () from /usr/lib/libc.so.6
#1  0x00007ffff3e50a30 in raise () from /usr/lib/libc.so.6
#2  0x00007ffff3e384c3 in abort () from /usr/lib/libc.so.6
#3  0x00007ffff7d123ed in grpc_core::Crash(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, grpc_core::SourceLocation) () from /usr/local/lib/libgpr.so.42
#4  0x00007ffff6931c1a in grpc_core::GlobalInstrumentsRegistry::RegisterInstrument(grpc_core::GlobalInstrumentsRegistry::ValueType, grpc_core::GlobalInstrumentsRegistry::InstrumentType, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, bool, absl::lts_20240722::Span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&gt;, absl::lts_20240722::Span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&gt;) () from /usr/local/lib/libgrpc.so.42
#5  0x00007ffff6830452 in grpc_core::GlobalInstrumentsRegistry::RegistrationBuilder&lt;(grpc_core::GlobalInstrumentsRegistry::ValueType)2, (grpc_core::GlobalInstrumentsRegistry::InstrumentType)1, 1ul, 0ul&gt;::Build() () from /usr/local/lib/libgrpc.so.42
#6  0x00007ffff64c25ef in _GLOBAL__sub_I_pick_first.cc () from /usr/local/lib/libgrpc.so.42
#7  0x00007ffff7fce2e7 in ?? () from /lib64/ld-linux-x86-64.so.2
#8  0x00007ffff7fce3dd in ?? () from /lib64/ld-linux-x86-64.so.2
#9  0x00007ffff7fe57a0 in ?? () from /lib64/ld-linux-x86-64.so.2
#10 0x0000000000000001 in ?? ()
#11 0x00007fffffffe85b in ?? ()
#12 0x0000000000000000 in ?? ()
</code></pre></div></div>

<p>Found the issue? I bet you won’t and I fixed this issue by luck. Robert, Kartik, and I tried many many solutions and options but nothing worked until I fixed it on 17th August 2024. Robert gave a thumbs up to every message I posted this day. It was challenging but fun.</p>

<blockquote>
  <p>kartik — 17/08/2024 20:23</p>
</blockquote>

<blockquote>
  <p>nope never seen this before, but glad that you’re able to build the rgm</p>
</blockquote>

<blockquote>
  <p>R0bert — 17/08/2024 20:26</p>
</blockquote>

<blockquote>
  <p>this is beautiful and im not surprised at all
based on the debugging from yesterday i was suspecting something was going wrong with linking
i suspect the old way was linking twice as you said and the static initialization was called twice
so this is great, this is excellent
im giving every comment here a thumbs up because that is some good stuff!
now onward and upward with the project</p>
</blockquote>

<p>Anyway, building RGM is done now and I am ready to work on the UI part.</p>

<p>By the way, I want to note that, these changes won’t work on Ubuntu as Ubuntu is 1000 versions behind Arch Linux. This means you will have to build absl, protobuf, and gRPC manually if you are using Ubuntu.</p>

<p>Inside here, I have decided also to refactor the whole CMake build system. All the changes now can be found inside these two PRs:</p>

<ul>
  <li><a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399">#2399</a></li>
</ul>

<p>Now you know why I called it <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</a>. This is because I spent nearly 1.5 months on this issue.</p>

<h2 id="weird-stuff">Weird stuff</h2>

<p>Even though we fixed emake, if we used vscode tasks to build emake, I got this error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/grpc_cpp_plugin: error while loading shared libraries: libgrpc_plugin_support.so.1.65: cannot open shared object file: No such file or directory
--grpc_out: protoc-gen-grpc: Plugin failed with status code 127.
</code></pre></div></div>

<p>So weird issue because if I ran the same command from terminal, it runs without problems. I can’t see anything wrong with my files:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Use</span><span class="w"> </span><span class="err">IntelliSense</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">learn</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">possible</span><span class="w"> </span><span class="err">attributes.</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Hover</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">view</span><span class="w"> </span><span class="err">descriptions</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">attributes.</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">For</span><span class="w"> </span><span class="err">more</span><span class="w"> </span><span class="err">information</span><span class="p">,</span><span class="w"> </span><span class="err">visit:</span><span class="w"> </span><span class="err">https://go.microsoft.com/fwlink/?linkid=</span><span class="mi">830387</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Launch test-runner"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/test-runner"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"--gtest_filter=VisualShaderTest.*"</span><span class="w"> </span><span class="p">],</span><span class="w">
          </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
          </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w">
          </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
              </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
              </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
              </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">],</span><span class="w">
          </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">See</span><span class="w"> </span><span class="err">https://go.microsoft.com/fwlink/?LinkId=</span><span class="mi">733558</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">documentation</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">tasks.json</span><span class="w"> </span><span class="err">format</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"make"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"test-runner"</span><span class="w"> </span><span class="p">],</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="debugging-rgm-238">Debugging RGM: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>Before talking about the UI integration, let’s talk about how to set breakpoints in RGM. The only way I found easy is to use Microsoft Visual Studio Code’s ability with CMake power. All I had to do is adding this commit <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/fc9a84a78f6d43e24a3edf43917bcf8054b90b16">fc9a84a78f6d43e24a3edf43917bcf8054b90b16</a> and <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/ebc4031dbf0ef4b883a6de1a1835d19c0e330ce0">ebc4031dbf0ef4b883a6de1a1835d19c0e330ce0</a>, then using CMake extension from the left panel, set the build variant to <code class="language-plaintext highlighter-rouge">Debug</code> and then <code class="language-plaintext highlighter-rouge">configure</code> and <code class="language-plaintext highlighter-rouge">build</code>. After the build is done, you can then debug the <code class="language-plaintext highlighter-rouge">RadialGM-Debug</code> executable.</p>

<h2 id="emake-not-found-238">EMake Not Found: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>While working on this issue, I decided to refactor the whole CMake build system and improve it. These two commits specifically <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/b01c765404fb91a4d8db3dfe79195b2fc4041af0">b01c765404fb91a4d8db3dfe79195b2fc4041af0</a> and <a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/4774b30cc96ef7f993945fa831990b45630d7461">4774b30cc96ef7f993945fa831990b45630d7461</a>.</p>

<p>It is very studpid that I was trying to <code class="language-plaintext highlighter-rouge">start</code> a directory not an executable haha. The fix to EMake not found is provided here in this commit <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/5ec507b1d8ba82d763ad9e09f9ae9d93f8bff98e">5ec507b1d8ba82d763ad9e09f9ae9d93f8bff98e</a>. I just modified:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">process</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">arguments</span><span class="p">);</span>
</code></pre></div></div>
<p>to</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">process</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="n">emakeFileInfo</span><span class="p">.</span><span class="n">filePath</span><span class="p">(),</span> <span class="n">arguments</span><span class="p">);</span>
</code></pre></div></div>

<p>You can try my playground project <a href="/gsoc24-blog/assets/qprocesstest.zip">qprocesstest.zip</a>.</p>

<p>I made also multiple improvements in this commit related to some memory leaks and some other issues. For example, I fixed the search paths for the emake executable and I added a little bit a hack to the build system to move all built files to ENIGMA’s submodule root, as emake depends on those files. The fix for this is here: <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/3ef991e31893e89bfa868a259142f5502afac6fa">3ef991e31893e89bfa868a259142f5502afac6fa</a> and by the way, i generalized it afterwords.</p>

<p>I tried to run a game now but it failed as expected haha. Robert just told me that he was able to build an empty game with RGM and that’s true. Additionally, he told me that RGM only missing the extensions support that must be passed as a csv data to the server (emake).</p>

<blockquote>
  <p>R0bert — 24/08/2024 20:10</p>
</blockquote>

<blockquote>
  <p>i was able to build an empty game only when i last built the infrastructure
that’s all i can tell ya</p>
</blockquote>

<blockquote>
  <p>R0bert — 25/08/2024 01:23</p>
</blockquote>

<blockquote>
  <p>it should be able to handle real games you just need to add the settings panel for what extensions to enable
i believe i already did the UI for it, just need to convert it to csv string and pass it i think
through plugin api ofc, dont have the server plugin directly read the settings panel, add some signals/slots to the RGMPlugin API class
so it’s decoupled</p>
</blockquote>

<h2 id="nodeeditor-integration-238"><a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> Integration: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>Anyway, the shader editor integration doesn’t require emake to be up and running, it is all about GUI stuff. I will try to add tests to the shader editor as well, just to make sure that it is working as expected.</p>

<p>I managed to integrate the <code class="language-plaintext highlighter-rouge">QtNodes</code> library into RGM without issues. Just to note at the time of writing this there was an issue where the path to the shared library is unknown, so keep in mind that you might need to export the path to the shared library in your <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/RadialGM/build/lib
</code></pre></div></div>

<blockquote>
  <p>Josh — 01/09/2024 at 18:26</p>
</blockquote>

<blockquote>
  <p>wow, that looks quite beautiful</p>
</blockquote>

<p><img src="/gsoc24-blog/assets/qtnodes-finally-integrated.png" alt="QtNodes Finally Integrated" /></p>

<p>The project I used to test the integration is <a href="/gsoc24-blog/assets/qtnodestest.zip">qtnodestest.zip</a>.</p>

<h2 id="rgm-and-enigma">RGM And ENIGMA</h2>

<p>RGM invokes the server (emake) using QProcess technology. This server requires the shared packages that are built by ENIGMA. I have modified the build system to move the built files to the ENIGMA submodule root. Keep this in mind while developing RGM.</p>

<h2 id="draft---dont-bother-reading-this-section-">Draft - Don’t bother reading this section :)</h2>

<blockquote>
  <p>R0bert — 25/08/2024 19:29</p>
</blockquote>

<blockquote>
  <p>there’s one more thing, there’s a layer above your project that could be future project
@Saif generating 3d models from images…
seems complicated but i assure itd just be what youve done plus a few more layers of surfaces and shaders and abstraction</p>
</blockquote>

<blockquote>
  <p>R0bert — 25/08/2024 19:36</p>
</blockquote>

<blockquote>
  <p>you might mean signed distance fonts by valve, which are similar in concept yes
but they are are for making vectorized fonts
but yes, i know what you mean
i was studying that for enigma too that might be useful later on because im curious if we could vectorize sprites
a huge issue i have is that older games which were sprite based dont scale well on our modern 16:9 and hidpi displays and stuff
vectorizing them could fix a lot of problems
but for ENIGMA, i suck at making sprites, so if there were a tool that could take my poor low-resolution handmade sprites and turn them into beautiful 3d vectors, i would USE IT</p>
</blockquote>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 11 and 12: RGM</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 11 and 12: RGM" /><published>2024-08-04T21:00:00+00:00</published><updated>2024-08-04T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: Before trying to build gRPC from scratch, see this: [Local Not Needed](https://k0t0z.github.io/gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-12-and-13-rgm.html#local-not-needed).
</code></pre></div></div>

<p>The Final evaluation work will be inside <a href="https://github.com/enigma-dev/enigma-dev/pull/2399">#2399</a>.</p>

<h2 id="back-to-test-runner-issue-on-arch-linux">Back To <code class="language-plaintext highlighter-rouge">test-runner</code> Issue On Arch Linux</h2>

<p>Remember that I am working on my Ubuntu VM as <code class="language-plaintext highlighter-rouge">test-runner</code> gives a link error on Arch Linux. However, RGM gives a linking error on both Ubuntu and Arch Linux. Because of this, I have decided to make <code class="language-plaintext highlighter-rouge">test-runner</code> work on Arch Linux.</p>

<p>As I explained in <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html">Google Summer of Code 2024 Bonding Period</a> post, the error is about linking <code class="language-plaintext highlighter-rouge">emake</code> failed. <code class="language-plaintext highlighter-rouge">emake</code> is the way to build games without a GUI as explained by Greg.</p>

<p>This error appears only on Arch linux, not Ubuntu. I guess that’s because of the differences between old and new absl. I think the new absl has new targets that we need to link as well. Anyway, I asked Fares to give me the versions of Absl, Protobuf, and gRPC that he is using on Ubuntu. I will try to use the same versions on Arch.</p>

<ul>
  <li>Absl: 20210324.2</li>
  <li>Protobuf: 3.12.4</li>
  <li>gRPC: 1.30.2</li>
</ul>

<p>I cloned these versions using -b option and found out that Absl doesn’t have a CMake system yet. So let’s change plans and try to build a proper versions of Absl, Protobuf, and gRPC from scratch.</p>

<p>I created this solution to do this task for me, <a href="https://github.com/k0T0z/absl-proto-grpc-ci">absl-proto-grpc-ci</a>, you can get the working verions from the README file. Also, you can take the commands from the scripts and run them on your machine.</p>

<p>Before installing them to your local, try to empty these dirs first:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/lib/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/include/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/bin/<span class="k">*</span>
</code></pre></div></div>

<p>This is to get rid of the old versions of the libraries (if any). If you have any locally installed libraries, be careful with the above commands.</p>

<p>Now, building those libraries is very easy, as well as installing them. It took me a couple of days to polish it off however, it is fine now. Maybe the only missing thing for this example is to build <code class="language-plaintext highlighter-rouge">emake</code> with it.</p>

<h2 id="prioritizing-local-over-system">Prioritizing local over system</h2>

<p>After installing all libraries to my local and build <code class="language-plaintext highlighter-rouge">emake</code>, this warning shows up:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: warning: libprotobuf.so.27.3.0, needed by /usr/local/lib/libgrpc++.so, may conflict with libprotobuf.so.27
</code></pre></div></div>

<p>This is because the system has a version of Protobuf already installed. When trying to remove it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-Rns</span> protobuf
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checking dependencies...
error: failed to prepare transaction (could not satisfy dependencies)
:: removing protobuf breaks dependency 'protobuf' required by libphonenumber
:: removing protobuf breaks dependency 'libprotobuf.so=27-64' required by libphonenumber
:: removing protobuf breaks dependency 'protobuf' required by protobuf-c
</code></pre></div></div>

<p>I can’t remove it as it is required by other packages. So I need to prioritize the local version over the system version. I did this by adding these simple lines to <code class="language-plaintext highlighter-rouge">enigma-dev/Config.mk</code> file:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Which search priority to use for libraries (system or local)
</span><span class="nv">CUSTOM_LIB_SEARCH_PRIORITY</span> <span class="o">:=</span> <span class="nb">local</span>

<span class="k">ifeq</span> <span class="nv">($(CUSTOM_LIB_SEARCH_PRIORITY), local)</span>
    <span class="nv">LDFLAGS</span> <span class="o">+=</span> <span class="nt">-L</span>/usr/local/lib
<span class="k">endif</span>
</code></pre></div></div>

<p>Now, you can set the search priority to local by changing the value of <code class="language-plaintext highlighter-rouge">CUSTOM_LIB_SEARCH_PRIORITY</code> to <code class="language-plaintext highlighter-rouge">local</code>.</p>

<h2 id="export-issue">Export Issue</h2>

<p>Other error show up that <code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code> is unable to load some packages.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd <span class="si">$(</span>which grpc_cpp_plugin<span class="si">)</span>
</code></pre></div></div>

<blockquote>
  <p>linux-vdso.so.1 (0x000071154c52f000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000071154c3f5000)
<span style="color: red;">libgrpc_plugin_support.so.1.65 =&gt; not found</span>
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x000071154c30a000)
<span style="color: red;">libprotoc.so.27.3.0 =&gt; not found</span>
<span style="color: red;">libprotobuf.so.27.3.0 =&gt; not found</span>
<span style="color: red;">libabseil_dll.so.2407.0.0 =&gt; not found</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x000071154c000000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x000071154c2db000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x000071154be14000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x000071154c2cf000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000071154c531000)</p>
</blockquote>

<p>There are <code class="language-plaintext highlighter-rouge">not found</code> libraries as you can see. If you used <code class="language-plaintext highlighter-rouge">which</code> with any of the nof founded libs, you will find it inside <code class="language-plaintext highlighter-rouge">/usr/local/lib</code>. The solution is to export the path to the libraries by adding this line to your <code class="language-plaintext highlighter-rouge">.bashrc</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/lib
</code></pre></div></div>

<p>Now, you can run the command again:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd <span class="si">$(</span>which grpc_cpp_plugin<span class="si">)</span>
</code></pre></div></div>

<blockquote>
  <p>linux-vdso.so.1 (0x0000765352968000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000076535282d000)
<span style="color: blue;">libgrpc_plugin_support.so.1.65 =&gt; /usr/local/lib/libgrpc_plugin_support.so.1.65 (0x00007653527a6000)</span>
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007653526bb000)
<span style="color: blue;">libprotoc.so.27.3.0 =&gt; /usr/local/lib/libprotoc.so.27.3.0 (0x0000765352200000)</span>
<span style="color: blue;">libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x0000765351e00000)</span>
<span style="color: blue;">libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x0000765351cc7000)</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x0000765351a00000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007653521d3000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x0000765351814000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x00007653521c7000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000076535296a000)
libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x00007653521a6000)</p>
</blockquote>

<p>All fixes done above didn’t solve the link issue because as I said we need to link according to new absl library.</p>

<p>After clean build, this error showed up:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/Server.o: undefined reference to symbol 'gpr_inf_future'
/usr/bin/ld: /usr/local/lib/libgpr.so.42: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>It is too clear to see that the <code class="language-plaintext highlighter-rouge">-lgpr</code> is missing from <code class="language-plaintext highlighter-rouge">LDFLAGS</code> variable. After adding it, the next error is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/EnigmaPlugin.o: undefined reference to symbol '_ZN4absl12lts_2024072212log_internal15LogMessageFatalC1EPKciSt17basic_string_viewIcSt11char_traitsIcEE'
/usr/bin/ld: /usr/local/lib/libabseil_dll.so.2407.0.0: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>I gave too much time to this error but I realized that may be the new absl has a new target to add it to the linker as well. That new target is <code class="language-plaintext highlighter-rouge">-labseil_dll</code>.</p>

<p>On 9th August 2024, The changes to <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/Makefile</code> fixed the linking issues and now my tests which I wrote on Ubuntu VM are passing on my Arch Linux machine.</p>

<h2 id="grpc_cpp_plugin-path"><code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code> path</h2>

<p>If you take a look at this line here: <a href="https://github.com/enigma-dev/enigma-dev/blob/3590b681f20174ccf24156769d2bbb94b10673e3/shared/protos/CMakeLists.txt#L30">shared/protos/CMakeLists.txt#L30</a>, you will see that the path to <code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code> is hardcoded. As we installed the libraries to <code class="language-plaintext highlighter-rouge">/usr/local</code>, we need to change this path to <code class="language-plaintext highlighter-rouge">/usr/local/bin/grpc_cpp_plugin</code>.</p>

<p>I provided this PR <a href="https://github.com/enigma-dev/enigma-dev/pull/2387">#2387</a> to fix this issue.</p>

<p>Now you can add this line in <code class="language-plaintext highlighter-rouge">RadialGM/CMakeLists.txt</code>:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span><span class="p">(</span>GRPC_EXE <span class="s2">"/usr/local/bin/grpc_cpp_plugin"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="moving-to-rgm">Moving To RGM</h2>

<p>The next step is RGM. RGM uses CMake build system and powered by Qt5. When running CMake, I got this error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ 76%] Linking CXX executable emake
/usr/bin/ld: CMakeFiles/emake.dir/EnigmaPlugin.cpp.o: undefined reference to symbol '_ZN4absl12lts_2024072212log_internal15LogMessageFatalC1EPKciSt17basic_string_viewIcSt11char_traitsIcEE'
/usr/bin/ld: /usr/local/lib/libabseil_dll.so.2407.0.0: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>That’s the absl again. The same change I did to <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/Makefile</code> should be done to <code class="language-plaintext highlighter-rouge">RadialGM/Submodules/enigma-dev/CommandLine/emake/CMakeLists.txt</code>, however, I need to do it CMake style.</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Find absl</span>
<span class="nb">find_package</span><span class="p">(</span>absl CONFIG REQUIRED<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">CLI_TARGET</span><span class="si">}</span> PRIVATE absl::base absl::strings absl::synchronization absl::time absl::status absl::statusor<span class="p">)</span>
</code></pre></div></div>

<h2 id="rgm-build">RGM Build</h2>

<p>Now, build and linking <code class="language-plaintext highlighter-rouge">emake</code> is done. I can now leave my Ubuntu VM and move back to my Arch Linux machine. The next step is to build RGM.</p>

<p>As Robert merged a last PR without checking the CI, there are a lot of cleanup that must be done in order for RGM to build properly. I provided this PR <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a> to fix this issue.</p>

<p>The above PR contains many changes as follows:</p>

<ul>
  <li>Linking <a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> library to RGM.</li>
  <li>Multiple fixes to the Room Editor.</li>
  <li>Fixed and improved the Server Plugin.</li>
  <li>Multiple fixes to the CMake build system.</li>
</ul>

<p>On 13th August 2024, RGM can be built without any issues.</p>

<h2 id="runtime-nightmare">Runtime Nightmare</h2>

<p>Now, RGM can be built without issues. However, life still doesn’t want to surrender. When running RGM, I got this error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./RadialGM: error while loading shared libraries: libEGM.so: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>Let’s see the ldd result:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd RadialGM
</code></pre></div></div>

<blockquote>
  <p>linux-vdso.so.1 (0x0000796337afc000)
libpugixml.so.1 =&gt; /usr/lib/libpugixml.so.1 (0x0000796337a96000)
libyaml-cpp.so.0.8 =&gt; /usr/lib/libyaml-cpp.so.0.8 (0x00007963377b1000)
libgrpc++.so.1.65 =&gt; /usr/local/lib/libgrpc++.so.1.65 (0x00007963376b9000)
libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x0000796337200000)
libssl.so.3 =&gt; /usr/lib/libssl.so.3 (0x00007963375df000)
libcrypto.so.3 =&gt; /usr/lib/libcrypto.so.3 (0x0000796336c00000)
libQt5PrintSupport.so.5 =&gt; /usr/lib/libQt5PrintSupport.so.5 (0x0000796337571000)
libQt5Multimedia.so.5 =&gt; /usr/lib/libQt5Multimedia.so.5 (0x0000796337104000)
<span style="color: red;">libEGM.so =&gt; not found</span>
<span style="color: red;">libENIGMAShared.so =&gt; not found</span>
libfreetype.so.6 =&gt; /usr/lib/libfreetype.so.6 (0x0000796336b37000)
libjpeg.so.8 =&gt; /usr/lib/libjpeg.so.8 (0x0000796336a9b000)
libharfbuzz.so.0 =&gt; /usr/lib/libharfbuzz.so.0 (0x0000796336981000)
libpcre2-16.so.0 =&gt; /usr/lib/libpcre2-16.so.0 (0x00007963368ef000)
libdouble-conversion.so.3 =&gt; /usr/lib/libdouble-conversion.so.3 (0x000079633755a000)
libgrpc.so.42 =&gt; /usr/local/lib/libgrpc.so.42 (0x0000796335e00000)
libgpr.so.42 =&gt; /usr/local/lib/libgpr.so.42 (0x000079633753c000)
libupb_json_lib.so.42 =&gt; /usr/local/lib/libupb_json_lib.so.42 (0x000079633750f000)
libupb_textformat_lib.so.42 =&gt; /usr/local/lib/libupb_textformat_lib.so.42 (0x00007963370df000)
libutf8_range_lib.so.42 =&gt; /usr/local/lib/libutf8_range_lib.so.42 (0x0000796337a8b000)
libupb_message_lib.so.42 =&gt; /usr/local/lib/libupb_message_lib.so.42 (0x0000796337a80000)
libupb_base_lib.so.42 =&gt; /usr/local/lib/libupb_base_lib.so.42 (0x000079633750a000)
libupb_mem_lib.so.42 =&gt; /usr/local/lib/libupb_mem_lib.so.42 (0x0000796337505000)
libre2.so.9 =&gt; /usr/local/lib/libre2.so.9 (0x0000796336862000)
libssl.so =&gt; /usr/local/lib/libssl.so (0x0000796335d90000)
libcrypto.so =&gt; /usr/local/lib/libcrypto.so (0x0000796335a00000)
libaddress_sorting.so.42 =&gt; /usr/local/lib/libaddress_sorting.so.42 (0x00007963370da000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x0000796335c9d000)
libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x00007963358c7000)
libQt5Widgets.so.5 =&gt; /usr/lib/libQt5Widgets.so.5 (0x0000796335200000)
libQt5Gui.so.5 =&gt; /usr/lib/libQt5Gui.so.5 (0x0000796334a00000)
libQt5Network.so.5 =&gt; /usr/lib/libQt5Network.so.5 (0x0000796335094000)
libQt5Core.so.5 =&gt; /usr/lib/libQt5Core.so.5 (0x0000796334400000)
<span style="color: red;">libProtocols.so =&gt; not found</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x0000796334000000)
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x0000796334315000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x0000796335c70000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x0000796333e14000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x0000796337afe000)
libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x0000796336843000)
libpulse.so.0 =&gt; /usr/lib/libpulse.so.0 (0x0000796335c1b000)
libbz2.so.1.0 =&gt; /usr/lib/libbz2.so.1.0 (0x00007963358b4000)
libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x00007963349c6000)
libbrotlidec.so.1 =&gt; /usr/lib/libbrotlidec.so.1 (0x0000796335c0c000)
libglib-2.0.so.0 =&gt; /usr/lib/libglib-2.0.so.0 (0x0000796333cc6000)
libgraphite2.so.3 =&gt; /usr/lib/libgraphite2.so.3 (0x00007963349a4000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x00007963358a8000)
libGL.so.1 =&gt; /usr/lib/libGL.so.1 (0x000079633428f000)
libmd4c.so.0 =&gt; /usr/lib/libmd4c.so.0 (0x000079633498e000)
libgssapi_krb5.so.2 =&gt; /usr/lib/libgssapi_krb5.so.2 (0x000079633493a000)
libproxy.so.1 =&gt; /usr/lib/libproxy.so.1 (0x000079633683e000)
libicui18n.so.75 =&gt; /usr/lib/libicui18n.so.75 (0x0000796333800000)
libicuuc.so.75 =&gt; /usr/lib/libicuuc.so.75 (0x0000796333606000)
libzstd.so.1 =&gt; /usr/lib/libzstd.so.1 (0x0000796333be7000)
libpulsecommon-17.0.so =&gt; /usr/lib/pulseaudio/libpulsecommon-17.0.so (0x000079633357f000)
libdbus-1.so.3 =&gt; /usr/lib/libdbus-1.so.3 (0x0000796333b96000)
libbrotlicommon.so.1 =&gt; /usr/lib/libbrotlicommon.so.1 (0x000079633355c000)
libpcre2-8.so.0 =&gt; /usr/lib/libpcre2-8.so.0 (0x00007963334bd000)
libGLdispatch.so.0 =&gt; /usr/lib/libGLdispatch.so.0 (0x0000796333405000)
libGLX.so.0 =&gt; /usr/lib/libGLX.so.0 (0x00007963333d3000)
libkrb5.so.3 =&gt; /usr/lib/libkrb5.so.3 (0x00007963332fb000)
libk5crypto.so.3 =&gt; /usr/lib/libk5crypto.so.3 (0x00007963332cd000)
libcom_err.so.2 =&gt; /usr/lib/libcom_err.so.2 (0x00007963358a2000)
libkrb5support.so.0 =&gt; /usr/lib/libkrb5support.so.0 (0x0000796335086000)
libkeyutils.so.1 =&gt; /usr/lib/libkeyutils.so.1 (0x0000796334288000)
libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x0000796333b84000)
libpxbackend-1.0.so =&gt; /usr/lib/libproxy/libpxbackend-1.0.so (0x00007963332be000)
libgobject-2.0.so.0 =&gt; /usr/lib/libgobject-2.0.so.0 (0x000079633325f000)
libicudata.so.75 =&gt; /usr/lib/libicudata.so.75 (0x0000796331400000)
libsndfile.so.1 =&gt; /usr/lib/libsndfile.so.1 (0x00007963331d8000)
libxcb.so.1 =&gt; /usr/lib/libxcb.so.1 (0x00007963331ad000)
libasyncns.so.0 =&gt; /usr/lib/libasyncns.so.0 (0x0000796333b7c000)
libX11.so.6 =&gt; /usr/lib/libX11.so.6 (0x00007963312c2000)
libcurl.so.4 =&gt; /usr/lib/libcurl.so.4 (0x00007963311fb000)
libgio-2.0.so.0 =&gt; /usr/lib/libgio-2.0.so.0 (0x000079633102e000)
libduktape.so.207 =&gt; /usr/lib/libduktape.so.207 (0x0000796333160000)
libffi.so.8 =&gt; /usr/lib/libffi.so.8 (0x0000796333155000)
libogg.so.0 =&gt; /usr/lib/libogg.so.0 (0x0000796331024000)
libvorbisenc.so.2 =&gt; /usr/lib/libvorbisenc.so.2 (0x0000796330f79000)
libFLAC.so.12 =&gt; /usr/lib/libFLAC.so.12 (0x0000796330f33000)
libopus.so.0 =&gt; /usr/lib/libopus.so.0 (0x0000796330a00000)
libmpg123.so.0 =&gt; /usr/lib/libmpg123.so.0 (0x00007963309a5000)
libmp3lame.so.0 =&gt; /usr/lib/libmp3lame.so.0 (0x000079633092d000)
libvorbis.so.0 =&gt; /usr/lib/libvorbis.so.0 (0x00007963308ff000)
libXau.so.6 =&gt; /usr/lib/libXau.so.6 (0x0000796335081000)
libXdmcp.so.6 =&gt; /usr/lib/libXdmcp.so.6 (0x0000796330f2b000)
libnghttp3.so.9 =&gt; /usr/lib/libnghttp3.so.9 (0x00007963308dc000)
libnghttp2.so.14 =&gt; /usr/lib/libnghttp2.so.14 (0x00007963308b2000)
libidn2.so.0 =&gt; /usr/lib/libidn2.so.0 (0x0000796330890000)
libssh2.so.1 =&gt; /usr/lib/libssh2.so.1 (0x0000796330847000)
libpsl.so.5 =&gt; /usr/lib/libpsl.so.5 (0x0000796330833000)
libgmodule-2.0.so.0 =&gt; /usr/lib/libgmodule-2.0.so.0 (0x0000796330f24000)
libmount.so.1 =&gt; /usr/lib/libmount.so.1 (0x00007963307e4000)
libunistring.so.5 =&gt; /usr/lib/libunistring.so.5 (0x0000796330634000)
libblkid.so.1 =&gt; /usr/lib/libblkid.so.1 (0x00007963305fb000)</p>
</blockquote>

<p>The not found libraries are all engima-dev libraries. I need to export the path to the libraries by adding this line to my <code class="language-plaintext highlighter-rouge">.bashrc</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/RadialGM/Submodules/enigma-dev
</code></pre></div></div>

<p>Note: Add your own path to the libraries.</p>

<p>Now everything is fine:</p>

<blockquote>
  <p>linux-vdso.so.1 (0x000078394efc5000)
libpugixml.so.1 =&gt; /usr/lib/libpugixml.so.1 (0x000078394ef5f000)
libyaml-cpp.so.0.8 =&gt; /usr/lib/libyaml-cpp.so.0.8 (0x000078394ef10000)
libgrpc++.so.1.65 =&gt; /usr/local/lib/libgrpc++.so.1.65 (0x000078394eb08000)
libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x000078394e800000)
libssl.so.3 =&gt; /usr/lib/libssl.so.3 (0x000078394e726000)
libcrypto.so.3 =&gt; /usr/lib/libcrypto.so.3 (0x000078394e200000)
libQt5PrintSupport.so.5 =&gt; /usr/lib/libQt5PrintSupport.so.5 (0x000078394eea0000)
libQt5Multimedia.so.5 =&gt; /usr/lib/libQt5Multimedia.so.5 (0x000078394e104000)
<span style="color: blue;">libEGM.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/CommandLine/libEGM/libEGM.so (0x000078394de00000)</span>
<span style="color: blue;">libENIGMAShared.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/shared/libENIGMAShared.so (0x000078394dd39000)</span>
libfreetype.so.6 =&gt; /usr/lib/libfreetype.so.6 (0x000078394dc70000)
libjpeg.so.8 =&gt; /usr/lib/libjpeg.so.8 (0x000078394dbd4000)
libharfbuzz.so.0 =&gt; /usr/lib/libharfbuzz.so.0 (0x000078394daba000)
libpcre2-16.so.0 =&gt; /usr/lib/libpcre2-16.so.0 (0x000078394da28000)
libdouble-conversion.so.3 =&gt; /usr/lib/libdouble-conversion.so.3 (0x000078394ee87000)
libgrpc.so.42 =&gt; /usr/local/lib/libgrpc.so.42 (0x000078394ce00000)
libgpr.so.42 =&gt; /usr/local/lib/libgpr.so.42 (0x000078394e708000)
libupb_json_lib.so.42 =&gt; /usr/local/lib/libupb_json_lib.so.42 (0x000078394e6db000)
libupb_textformat_lib.so.42 =&gt; /usr/local/lib/libupb_textformat_lib.so.42 (0x000078394da03000)
libutf8_range_lib.so.42 =&gt; /usr/local/lib/libutf8_range_lib.so.42 (0x000078394ee80000)
libupb_message_lib.so.42 =&gt; /usr/local/lib/libupb_message_lib.so.42 (0x000078394e6d0000)
libupb_base_lib.so.42 =&gt; /usr/local/lib/libupb_base_lib.so.42 (0x000078394e0ff000)
libupb_mem_lib.so.42 =&gt; /usr/local/lib/libupb_mem_lib.so.42 (0x000078394e0fa000)
libre2.so.9 =&gt; /usr/local/lib/libre2.so.9 (0x000078394d976000)
libssl.so =&gt; /usr/local/lib/libssl.so (0x000078394d906000)
libcrypto.so =&gt; /usr/local/lib/libcrypto.so (0x000078394ca00000)
libaddress_sorting.so.42 =&gt; /usr/local/lib/libaddress_sorting.so.42 (0x000078394e0f5000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000078394cd0d000)
libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x000078394c8c7000)
libQt5Widgets.so.5 =&gt; /usr/lib/libQt5Widgets.so.5 (0x000078394c200000)
libQt5Gui.so.5 =&gt; /usr/lib/libQt5Gui.so.5 (0x000078394ba00000)
libQt5Network.so.5 =&gt; /usr/lib/libQt5Network.so.5 (0x000078394c094000)
libQt5Core.so.5 =&gt; /usr/lib/libQt5Core.so.5 (0x000078394b400000)
<span style="color: blue;">libProtocols.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/shared/protos/libProtocols.so (0x000078394b000000)</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x000078394ac00000)
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x000078394cc22000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x000078394d8d9000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x000078394aa14000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000078394efc7000)
libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x000078394d8ba000)
libpulse.so.0 =&gt; /usr/lib/libpulse.so.0 (0x000078394d863000)
libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x000078394b9c6000)
libbz2.so.1.0 =&gt; /usr/lib/libbz2.so.1.0 (0x000078394d850000)
libbrotlidec.so.1 =&gt; /usr/lib/libbrotlidec.so.1 (0x000078394d841000)
libglib-2.0.so.0 =&gt; /usr/lib/libglib-2.0.so.0 (0x000078394b2b2000)
libgraphite2.so.3 =&gt; /usr/lib/libgraphite2.so.3 (0x000078394c8a5000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x000078394cc16000)
libGL.so.1 =&gt; /usr/lib/libGL.so.1 (0x000078394b940000)
libmd4c.so.0 =&gt; /usr/lib/libmd4c.so.0 (0x000078394b29c000)
libgssapi_krb5.so.2 =&gt; /usr/lib/libgssapi_krb5.so.2 (0x000078394b248000)
libproxy.so.1 =&gt; /usr/lib/libproxy.so.1 (0x000078394cc11000)
libicui18n.so.75 =&gt; /usr/lib/libicui18n.so.75 (0x000078394a600000)
libicuuc.so.75 =&gt; /usr/lib/libicuuc.so.75 (0x000078394a406000)
libzstd.so.1 =&gt; /usr/lib/libzstd.so.1 (0x000078394af21000)
libgrpc++_unsecure.so.1.65 =&gt; /usr/local/lib/libgrpc++_unsecure.so.1.65 (0x000078394ae94000)
libpulsecommon-17.0.so =&gt; /usr/lib/pulseaudio/libpulsecommon-17.0.so (0x000078394a98d000)
libdbus-1.so.3 =&gt; /usr/lib/libdbus-1.so.3 (0x000078394a3b5000)
libbrotlicommon.so.1 =&gt; /usr/lib/libbrotlicommon.so.1 (0x000078394b225000)
libpcre2-8.so.0 =&gt; /usr/lib/libpcre2-8.so.0 (0x000078394a316000)
libGLdispatch.so.0 =&gt; /usr/lib/libGLdispatch.so.0 (0x000078394a25e000)
libGLX.so.0 =&gt; /usr/lib/libGLX.so.0 (0x000078394a22c000)
libkrb5.so.3 =&gt; /usr/lib/libkrb5.so.3 (0x000078394a154000)
libk5crypto.so.3 =&gt; /usr/lib/libk5crypto.so.3 (0x000078394a126000)
libcom_err.so.2 =&gt; /usr/lib/libcom_err.so.2 (0x000078394c89f000)
libkrb5support.so.0 =&gt; /usr/lib/libkrb5support.so.0 (0x000078394c086000)
libkeyutils.so.1 =&gt; /usr/lib/libkeyutils.so.1 (0x000078394b939000)
libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x000078394a114000)
libpxbackend-1.0.so =&gt; /usr/lib/libproxy/libpxbackend-1.0.so (0x000078394ae85000)
libgobject-2.0.so.0 =&gt; /usr/lib/libgobject-2.0.so.0 (0x000078394a0b5000)
libicudata.so.75 =&gt; /usr/lib/libicudata.so.75 (0x0000783948200000)
libgrpc_unsecure.so.42 =&gt; /usr/local/lib/libgrpc_unsecure.so.42 (0x0000783947a00000)
libsndfile.so.1 =&gt; /usr/lib/libsndfile.so.1 (0x000078394a02e000)
libxcb.so.1 =&gt; /usr/lib/libxcb.so.1 (0x000078394a003000)
libasyncns.so.0 =&gt; /usr/lib/libasyncns.so.0 (0x000078394a985000)
libX11.so.6 =&gt; /usr/lib/libX11.so.6 (0x00007839480c2000)
libcurl.so.4 =&gt; /usr/lib/libcurl.so.4 (0x0000783947939000)
libgio-2.0.so.0 =&gt; /usr/lib/libgio-2.0.so.0 (0x000078394776c000)
libduktape.so.207 =&gt; /usr/lib/libduktape.so.207 (0x0000783949fb6000)
libffi.so.8 =&gt; /usr/lib/libffi.so.8 (0x0000783949fab000)
libogg.so.0 =&gt; /usr/lib/libogg.so.0 (0x0000783949fa1000)
libvorbisenc.so.2 =&gt; /usr/lib/libvorbisenc.so.2 (0x00007839476c1000)
libFLAC.so.12 =&gt; /usr/lib/libFLAC.so.12 (0x0000783949f5b000)
libopus.so.0 =&gt; /usr/lib/libopus.so.0 (0x0000783947000000)
libmpg123.so.0 =&gt; /usr/lib/libmpg123.so.0 (0x0000783947666000)
libmp3lame.so.0 =&gt; /usr/lib/libmp3lame.so.0 (0x00007839475ee000)
libvorbis.so.0 =&gt; /usr/lib/libvorbis.so.0 (0x00007839475c0000)
libXau.so.6 =&gt; /usr/lib/libXau.so.6 (0x000078394a980000)
libXdmcp.so.6 =&gt; /usr/lib/libXdmcp.so.6 (0x0000783949f53000)
libnghttp3.so.9 =&gt; /usr/lib/libnghttp3.so.9 (0x000078394759d000)
libnghttp2.so.14 =&gt; /usr/lib/libnghttp2.so.14 (0x0000783947573000)
libidn2.so.0 =&gt; /usr/lib/libidn2.so.0 (0x0000783947551000)
libssh2.so.1 =&gt; /usr/lib/libssh2.so.1 (0x0000783946fb7000)
libpsl.so.5 =&gt; /usr/lib/libpsl.so.5 (0x00007839480ae000)
libgmodule-2.0.so.0 =&gt; /usr/lib/libgmodule-2.0.so.0 (0x00007839480a7000)
libmount.so.1 =&gt; /usr/lib/libmount.so.1 (0x0000783946f68000)
libunistring.so.5 =&gt; /usr/lib/libunistring.so.5 (0x0000783946db8000)
libblkid.so.1 =&gt; /usr/lib/libblkid.so.1 (0x0000783946d7f000)</p>
</blockquote>

<p>Now, another issue appeared when trying to run RGM:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1723829087.769865   68641 metrics.cc:49] Metric name grpc.lb.wrr.rr_fallback has already been registered.
Aborted (core dumped)
</code></pre></div></div>

<p>The above error doesn’t help much anyway. Robert suggested that not linking gRPC and proceed to work on the UI part without the engine. Of course, RGM built correctly without gRPC but I need to fix the gRPC issue to be able to send and receive messages between RGM and <code class="language-plaintext highlighter-rouge">emake</code>.</p>

<p><img src="/gsoc24-blog/assets/gsoc24-rgm-without-grpc.png" alt="GSoC 2024 RGM Without gRPC" /></p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 10: Midterm Evaluation</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 10: Midterm Evaluation" /><published>2024-07-28T21:00:00+00:00</published><updated>2024-07-28T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>As I said in my previous blog post, I am running at a low pace due to my master’s preparation as well as the army service. Josh and Greg gave me a pass even though I didn’t do much. Anyway, thanks to them for their understanding. Here is my midterm feedback and the work done so far and why.</p>

<h2 id="midterm-2024-evaluation-feedback">Midterm 2024 Evaluation Feedback</h2>

<p><img src="/gsoc24-blog/assets/midterm-2024-evaluation-feedback.png" alt="Midterm 2024 Evaluation Feedback" /></p>

<h2 id="summary">Summary</h2>

<p>The midterm work exists in PR <a href="https://github.com/enigma-dev/enigma-dev/pull/2397">#2397</a>.</p>

<p>In my proposal, I said that I will make the generator ready by the midterm evaluation. It is in a good shape now. It will be refactored during the Rendering and Machine Learning phases. In these two next phases, I will make the generator more for ENIGMA’s Graphics System and the Genetic Algorithm (Machine Learning) respectively. The work done in the generator can be presented as follows:</p>

<h3 id="constants-operators-and-functions">Constants, Operators, and Functions</h3>

<p>All constants, operators, and functions are supported. Constants include <code class="language-plaintext highlighter-rouge">float</code>, <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">uint</code>, <code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, and <code class="language-plaintext highlighter-rouge">vec4</code>. Operators include arithmetic, logical, and bitwise operations. Functions include trigonometric, exponential, logarithmic, and other functions. Both scalar and vector operations are supported. Both Operations and Functions types depend on the type of the operands.</p>

<p>Operations for <code class="language-plaintext highlighter-rouge">float</code> types: <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">mod</code>, <code class="language-plaintext highlighter-rouge">pow</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">atan</code>, and <code class="language-plaintext highlighter-rouge">step</code>.
Operations for <code class="language-plaintext highlighter-rouge">int</code> types: <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">%</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">&amp;</code>, <code class="language-plaintext highlighter-rouge">|</code>, <code class="language-plaintext highlighter-rouge">^</code>, <code class="language-plaintext highlighter-rouge">&lt;&lt;</code>, and <code class="language-plaintext highlighter-rouge">&gt;&gt;</code>.
Operations for <code class="language-plaintext highlighter-rouge">uint</code> types: Same as <code class="language-plaintext highlighter-rouge">int</code> types.
Operations for <code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, and <code class="language-plaintext highlighter-rouge">vec4</code> types: <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">mod</code>, <code class="language-plaintext highlighter-rouge">pow</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">cross</code>, <code class="language-plaintext highlighter-rouge">atan2</code>, and <code class="language-plaintext highlighter-rouge">reflect</code>. Note that <code class="language-plaintext highlighter-rouge">cross</code> is only for <code class="language-plaintext highlighter-rouge">vec3</code> types.</p>

<p>Functions for <code class="language-plaintext highlighter-rouge">float</code> types: <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">cos</code>, <code class="language-plaintext highlighter-rouge">tan</code>, <code class="language-plaintext highlighter-rouge">asin</code>, <code class="language-plaintext highlighter-rouge">acos</code>, <code class="language-plaintext highlighter-rouge">atan</code>, <code class="language-plaintext highlighter-rouge">sinh</code>, <code class="language-plaintext highlighter-rouge">cosh</code>, <code class="language-plaintext highlighter-rouge">tanh</code>, <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">sqrt</code>, <code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">sign</code>, <code class="language-plaintext highlighter-rouge">floor</code>, <code class="language-plaintext highlighter-rouge">round</code>, <code class="language-plaintext highlighter-rouge">ceil</code>, <code class="language-plaintext highlighter-rouge">fract</code>, <code class="language-plaintext highlighter-rouge">saturate</code>, <code class="language-plaintext highlighter-rouge">negate</code>, <code class="language-plaintext highlighter-rouge">acosh</code>, <code class="language-plaintext highlighter-rouge">asinh</code>, <code class="language-plaintext highlighter-rouge">atanh</code>, <code class="language-plaintext highlighter-rouge">degrees</code>, <code class="language-plaintext highlighter-rouge">exp2</code>, <code class="language-plaintext highlighter-rouge">inverse_sqrt</code>, <code class="language-plaintext highlighter-rouge">log2</code>, <code class="language-plaintext highlighter-rouge">radians</code>, <code class="language-plaintext highlighter-rouge">reciprocal</code>, <code class="language-plaintext highlighter-rouge">roundeven</code>, <code class="language-plaintext highlighter-rouge">trunc</code>, and <code class="language-plaintext highlighter-rouge">oneminus</code>.
Functions for <code class="language-plaintext highlighter-rouge">int</code> types: <code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">-1 *</code>, <code class="language-plaintext highlighter-rouge">sign</code> and <code class="language-plaintext highlighter-rouge">~</code>.
Functions for <code class="language-plaintext highlighter-rouge">uint</code> types: <code class="language-plaintext highlighter-rouge">-1 *</code> and <code class="language-plaintext highlighter-rouge">~</code>.
Functions for <code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, and <code class="language-plaintext highlighter-rouge">vec4</code> types: <code class="language-plaintext highlighter-rouge">normalize</code>, <code class="language-plaintext highlighter-rouge">saturate</code>, <code class="language-plaintext highlighter-rouge">negate</code>, <code class="language-plaintext highlighter-rouge">reciprocal</code>, <code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">acos</code>, <code class="language-plaintext highlighter-rouge">acosh</code>, <code class="language-plaintext highlighter-rouge">asin</code>, <code class="language-plaintext highlighter-rouge">asinh</code>, <code class="language-plaintext highlighter-rouge">atan</code>, <code class="language-plaintext highlighter-rouge">atanh</code>, <code class="language-plaintext highlighter-rouge">ceil</code>, <code class="language-plaintext highlighter-rouge">cos</code>, <code class="language-plaintext highlighter-rouge">cosh</code>, <code class="language-plaintext highlighter-rouge">degrees</code>, <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">exp2</code>, <code class="language-plaintext highlighter-rouge">floor</code>, <code class="language-plaintext highlighter-rouge">fract</code>, <code class="language-plaintext highlighter-rouge">inverse_sqrt</code>, <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">log2</code>, <code class="language-plaintext highlighter-rouge">radians</code>, <code class="language-plaintext highlighter-rouge">round</code>, <code class="language-plaintext highlighter-rouge">roundeven</code>, <code class="language-plaintext highlighter-rouge">sign</code>, <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">sinh</code>, <code class="language-plaintext highlighter-rouge">sqrt</code>, <code class="language-plaintext highlighter-rouge">tan</code>, <code class="language-plaintext highlighter-rouge">tanh</code>, <code class="language-plaintext highlighter-rouge">trunc</code>, and <code class="language-plaintext highlighter-rouge">oneminus</code>.</p>

<h3 id="special-nodes">Special Nodes</h3>

<p>Some important nodes are also implemented for the AI Agent such as:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">dot</code>: The dot product of two vectors.</li>
  <li><code class="language-plaintext highlighter-rouge">length</code>: The length of a vector.</li>
  <li><code class="language-plaintext highlighter-rouge">clamp</code>: Clamps a value between a minimum and maximum value.</li>
  <li><code class="language-plaintext highlighter-rouge">derivative</code>: The derivative of a value.</li>
  <li><code class="language-plaintext highlighter-rouge">step</code>: The step function.</li>
  <li><code class="language-plaintext highlighter-rouge">smoothstep</code>: The smoothstep function.</li>
  <li><code class="language-plaintext highlighter-rouge">distance</code>: The distance between two points.</li>
  <li><code class="language-plaintext highlighter-rouge">mix</code>: Linearly interpolates between two values.</li>
</ul>

<h3 id="logic-nodes">Logic Nodes</h3>

<p>Some logic nodes are also implemented for the AI Agent such as: <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">switch</code>, <code class="language-plaintext highlighter-rouge">is</code>, and <code class="language-plaintext highlighter-rouge">compare</code>.</p>

<h3 id="filters">Filters</h3>

<p>Most importantly, the generator supports filters such as noise filters. The noise filters include <code class="language-plaintext highlighter-rouge">Value</code> Noise for now.</p>

<h2 id="work-to-be-done">Work To Be Done</h2>

<p>As I explained in <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod: Most Important Operations In The Generator</a>, many nodes will be modified during the Rendering and Machine Learning phases.</p>

<p>There are a couple of tasks as well that will be nice if we had. Supporting comments in the shader code is one of them as well as loops.</p>

<p>The integration of a node editor library into RGM is also a must task to be done. This will help in creating large graphs.</p>

<h2 id="working-example">Working Example</h2>

<p>I have created a working example for the Value Noise filter. This is the same example that I have used in my proposal. The graph and the generated code are as follows:</p>

<p><img src="/gsoc24-blog/assets/godot-visual-shader-value-noise-filter-graph-example.png" alt="Godot Visual Shader Value Noise Filter Graph Example" /></p>

<figure class="highlight"><pre><code class="language-glsl" data-lang="glsl"><span class="k">in</span> <span class="kt">vec2</span> <span class="n">TexCoord</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">float</span> <span class="n">uTime</span><span class="p">;</span>
<span class="kt">float</span> <span class="nf">noise_random_value</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">fract</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">12</span><span class="p">.</span><span class="mi">9898</span><span class="p">,</span> <span class="mi">78</span><span class="p">.</span><span class="mi">233</span><span class="p">)))</span><span class="o">*</span><span class="mi">43758</span><span class="p">.</span><span class="mi">5453</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">noise_interpolate</span><span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">,</span> <span class="kt">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">t</span><span class="p">)</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="p">(</span><span class="n">t</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">value_noise</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">vec2</span> <span class="n">i</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
	<span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">*</span> <span class="n">f</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">f</span><span class="p">);</span>
	
	<span class="n">uv</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">)</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c0</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c3</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r0</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c0</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c1</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c2</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r3</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c3</span><span class="p">);</span>
	
	<span class="kt">float</span> <span class="n">bottom_of_grid</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">r0</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">top_of_grid</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">bottom_of_grid</span><span class="p">,</span> <span class="n">top_of_grid</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">generate_value_noise_float</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scale</span><span class="p">,</span> <span class="k">out</span> <span class="kt">float</span> <span class="n">out_buffer</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
	
	<span class="kt">float</span> <span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
	<span class="kt">float</span> <span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">0</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
	<span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
	<span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">2</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">out_buffer</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">out</span> <span class="kt">vec4</span> <span class="n">FragColor</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// Input:1</span>
	<span class="kt">vec2</span> <span class="n">var_from_n1_p0</span> <span class="o">=</span> <span class="n">TexCoord</span><span class="p">;</span>

<span class="c1">// ValueNoise:4</span>
	<span class="c1">// Value Noise</span>
	<span class="kt">float</span> <span class="n">out_buffer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
	<span class="n">generate_value_noise_float</span><span class="p">(</span><span class="n">var_from_n1_p0</span><span class="p">,</span> <span class="mi">100</span><span class="p">.</span><span class="mo">000000</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">);</span>
	<span class="kt">vec4</span> <span class="n">var_from_n4_p0</span> <span class="o">=</span> <span class="kt">vec4</span><span class="p">(</span><span class="n">out_buffer</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	
<span class="c1">// Input:2</span>
	<span class="kt">float</span> <span class="n">var_from_n2_p0</span> <span class="o">=</span> <span class="n">uTime</span><span class="p">;</span>

<span class="c1">// FloatFunc:3</span>
	<span class="kt">float</span> <span class="n">var_from_n3_p0</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">var_from_n2_p0</span><span class="p">);</span>

<span class="c1">// FloatOp:5</span>
	<span class="kt">float</span> <span class="n">var_from_n5_p0</span> <span class="o">=</span> <span class="n">var_from_n4_p0</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">var_from_n3_p0</span><span class="p">;</span>

<span class="c1">// Output:0</span>
	<span class="n">FragColor</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="n">var_from_n5_p0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Of course I can’t show you any GUI work because I am not there yet. The above picture is from Godot Engine’s Visual Shader Editor. Also, note that Godot uses a noise library that is not the same as the one I am using. As requested by Josh, I am creating my noise using shader code. No texture is included as Godot does.</p>

<blockquote>
  <p>Josh — 01/09/2024 19:28</p>
</blockquote>

<blockquote>
  <p>admittedly unity’s is pretty nice, except this: the FIRST TIME I can see perlin noise in that view is in the FloatOp
this is infuriating, because by inspection, it CLEARLY comes from the Texture2D op before it
which, hilariously, is loading perlin noise as a texture.
literally they have taken the simplest possible noise kernel and loaded it from a PNG image instead of just generating it live at a fixed resolution
<em>barf</em>
so my chief technical complaint is the extreme inefficiency resulting from not providing noise kernels as a generator op
and my chief UX complaint is that I can’t even fucking tell where that noise is coming from! because they don’t even preview it!
it’s just so bad.
do they offer a noise source? i.e. did you just decide to load that perlin turbulence texture from a file? or were you forced to?
another point of feedback on the Unity editor: float func “round” is ugly; we should use a layercake method instead
what I mean is, we want a “step function” multiplexer node that takes an input float, and then divides that float into ranges to choose inputs to combine
so round() would be this step function node with black and white as its texture inputs, float value as its mux input
similarly, you could do a “heat map” by instantiating this with blue, yellow, red, and white as texture inputs, the floating value remaining as the mux input, but cutoff values of [0, .25, .5, .75, 1]
for this idea, the interpolation range to also be configurable; for round(), you don’t want interpolation, because anything up to 0.5 should be pure black, and anything above that should be pure white
for the heatmap, you’d use interpolation for every step of the way; only the exact values in that array would return [black, blue, yellow, red, white]
everything else would be an interpolation of the two nearest neighbors</p>
</blockquote>

<blockquote>
  <p>Saif — 02/09/2024 07:48</p>
</blockquote>

<blockquote>
  <p>Black and white = noise?</p>
</blockquote>

<blockquote>
  <p>Josh — 02/09/2024 08:53</p>
</blockquote>

<blockquote>
  <p>no; one full-black RGB channel source “image” (infinite pixels, all sampling black), and another for white; you then pipe those two images into the multiplexer
set a single threshold point at 0.5
otherwise it works just like the heat map</p>
</blockquote>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod" /><published>2024-07-07T21:00:00+00:00</published><updated>2024-07-07T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>I was planning to start testing the <code class="language-plaintext highlighter-rouge">VisualShader</code> class after I reach a stable state with the generator.</p>

<h2 id="weird-dso-linking-error">Weird DSO linking error</h2>

<p>Before anything, I hate Google’s technologies including gRPC, Protobuf, Abseil because Google doesn’t care about you facing issues as long as it is working inside their pipelines. Remember the issue I faced in the bonding period (<a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html">Google Summer of Code 2024 Bonding Period</a>) while trying to build RGM? The one that presists on my Ubuntu installation and 2 Arch installations? Well, I can’t build the <code class="language-plaintext highlighter-rouge">test-runner</code> because of it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/EnigmaPlugin.o: undefined reference to symbol <span class="s1">'_ZN4absl12lts_2024011612log_internal21CheckOpMessageBuilderC1EPKc'</span>
/usr/bin/ld: /usr/lib/libabsl_log_internal_check_op.so.2401.0.0: error adding symbols: DSO missing from <span class="nb">command </span>line
collect2: error: ld returned 1 <span class="nb">exit </span>status
make[1]: <span class="k">***</span> <span class="o">[</span>../../Default.mk:23: ../../emake] Error 1
make[1]: Leaving directory <span class="s1">'/home/k0t0z/Desktop/gsoc24/enigma-dev/CommandLine/emake'</span>
make: <span class="k">***</span> <span class="o">[</span>Makefile:51: emake] Error 2
</code></pre></div></div>

<p>This time, it is not about RGM. I made some simple research and founc out that I am not the only genius trying to work this around, it is everywhere:</p>

<ul>
  <li>https://bbs.archlinux.org/viewtopic.php?id=289986</li>
  <li>https://github.com/protocolbuffers/protobuf/issues/14500#issuecomment-1781292098</li>
  <li>https://github.com/qgis/QGIS/issues/55114</li>
  <li>https://github.com/protocolbuffers/protobuf/issues/15604#issuecomment-1929929148</li>
</ul>

<p>A lot of variations from the above link error showed up on each change, however, none of these changes solve the problem.</p>

<p>Josh and I thought at first that it is because the linking interface between gRPC, Protobuf, and Abseil is not stable. This means in order to solve this problem, I am gonna diverge and build gRPC, Protobuf, and Abseil from scratch. I asked my mate Fares to give me the versions he is using on Ubuntu and actually these versions are too old to have even a CMake build system. This motivated my memory to remember that Ubuntu actually is a stable distro and doesn’t have the latest versions of the libraries.</p>

<p>At this point, I decided to move to Ubuntu for now because my Midterm Evaluation is coming and I need to show some progress.</p>

<h2 id="visualshader-types"><code class="language-plaintext highlighter-rouge">VisualShader</code> Types</h2>

<p>In order to complete the <code class="language-plaintext highlighter-rouge">generate_shader_for_each_node</code> function, I needed some types to use. Some of these types are actually implemented inside the engine, such as <a href="https://github.com/enigma-dev/enigma-dev/blob/3590b681f20174ccf24156769d2bbb94b10673e3/ENIGMAsystem/SHELL/Universal_System/var4.h#L279">variant</a>, however, I don’t know if this possible or not because remember our <code class="language-plaintext highlighter-rouge">VisualShader</code> class is not part of the engine, it is part of the <code class="language-plaintext highlighter-rouge">shared</code> library. In which case, I created a new temporary custom type as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">using</span> <span class="n">TVariant</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">monostate</span><span class="p">,</span> <span class="kt">float</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">TVector2</span><span class="p">,</span> <span class="n">TVector3</span><span class="p">,</span> <span class="n">TVector4</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">T</code> in all types is for <code class="language-plaintext highlighter-rouge">Temporary</code>. Actually, the <code class="language-plaintext highlighter-rouge">VisualShader</code> class is not injected into anything yet, it is a stanalone class that can be built by a simple g++ command. The other types are also temporary and will be replaced by the engine types when they are here if they are not already.</p>

<h2 id="most-important-operations-in-the-generator">Most Important Operations In The Generator</h2>

<blockquote>
  <p>Saif — 19/07/2024 20:37</p>
</blockquote>

<blockquote>
  <p>What type of operation that will be useful for the generated code? for example: - + / * mod … also but what about color effects?
like color blend or darken and lighten and all that?</p>
</blockquote>

<blockquote>
  <p>Josh — 19/07/2024 20:39</p>
</blockquote>

<blockquote>
  <p>matrix and arithmetic operations make a ton of sense
for me, the important operation is range mapping
so, you can check out the SVG specification for a pretty meh implementation of generalized filters
but what I think is missing is the ability to create step functions
basically, the ability to say “for values 0-0.5, use this filter; for values 0.5-1, use this one”
especially if it can automatically interpolate between them
by matrix operations, I just mean multiplying color channels
so basically, you have [r,g,b,a, const…] and the user specifies the matrix to multiply that by</p>
</blockquote>

<p>Let me explain the above conversation. The aim of this project is to generate some meaningful art using noise filters. This means we can’t have normal nodes like other game engines such as <code class="language-plaintext highlighter-rouge">Godot</code> or <code class="language-plaintext highlighter-rouge">Unity</code>, however, we need custom nodes that our AI Agent will be able to use. Of course the most reasonable nodes are the arthmetic operations for scalars and vectors.</p>

<p>Beside custom nodes, we need more parameters for each node to give our AI Agent a lot of choices to pick from. For example, the <code class="language-plaintext highlighter-rouge">ValueNoise</code> node which is the first one I created, currently has <code class="language-plaintext highlighter-rouge">scale</code> parameter. This is not enough, we need more parameters such as inside this amazing application <a href="https://auburn.github.io/FastNoiseLite/">FastNoiseLite</a>.</p>

<blockquote>
  <p>Josh — 21/07/2024 19:38</p>
</blockquote>

<blockquote>
  <p>octaves and frequency (preferably h/v separately) are the most important
the domain warp should be a separate step
distance function for lerp is also good to have, but less important for perlin noise
yeah, perlin noise is 2D, so it often has two frequencies, but I suppose if we’re allowing transformations on domain and range, frequency doesn’t even matter
you can force the perlin noise to have a domain of 0-1 and make the user map it differently</p>
</blockquote>

<p>There will be more detailed explanation about this when I reach the AI part.</p>

<p><img src="/gsoc24-blog/assets/fast-noise-tool.png" alt="Fast Noise Tool" /></p>

<h2 id="the-renderer">The Renderer</h2>

<p>Why we are implementing the <code class="language-plaintext highlighter-rouge">Visual Shader Editor</code> in the first place? Well, because in order to see how good our AI Agent perform. We will need to render the generated shader. Of course we will have an error function that will tell us how good the shader is, but we need to see it with our eyes as Josh recommended.</p>

<p>When it come for rendering and graphics, then you mean Robert. I am not ready yet for the renderer, but I like to know things in advance. I wanted to know how I am gonna apply my shader to a specific resource. For example, if I have a sprite or a background, how I am gonna apply the shader to it. Like if I want to make a disappering effect, how I am gonna apply it to a sprite. There are some built in variables that ENIGMA prepends to the shader code.</p>

<blockquote>
  <p>R0bert — 23/07/2024 19:28</p>
</blockquote>

<blockquote>
  <p>ENIGMA has a little abstraction, the shaders are intended to have built in variables
like gm_Matrix and stuff, but idk if each backend to sets all the variables its supposed to like GM does
but not a language abstraction yet
its just uniform variable declarations that we prepend to the code of every user shader
its just our way of communicating things like the projection to the user’s shaders
yeah i think there’s gm_Texture too
d3d and opengl have 8 texture samplers built in or w/e
the shader gets a sampler object, so gm_Texture is an array i think of 8 or something
we bind the texture to the texture sampler
and then it can read it
opengl calls them texture units, direct3d calls them texture stages
sampler refers to the gpu side, in both cases
https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindTextureUnit.xhtml</p>
</blockquote>

<blockquote>
  <p>Saif — 23/07/2024 19:37</p>
</blockquote>

<blockquote>
  <p>if i have a shader code that changes the color (vec4), it calculates it firstly and then applies it, this way of applying the effect on the texture is done by?</p>
</blockquote>

<blockquote>
  <p>R0bert — 23/07/2024 19:38</p>
</blockquote>

<blockquote>
  <p>it sounds like you’re describing render-to-texture, i’ve never done that in glsl before
in typical case you’d render a flat 2d plane with the texture
you might be able to write to a texture buffer from glsl idk
and yes you need render-to-texture to postprocessing mostly…
so i think all you need to do is render a 2d quad
and create a surface (aka render-to-texture texture)
surface_create(width, height)
surface_set(mysurfid)
shader_set(saifsshaderid)
draw_rectangle(0,0,width,height)
those are the functions you need
put your texture in a background or sprite
you dont need to get at the actual texture
just draw it with draw_background_stretched
albeit i did add special texture_add functions to enigma, but ignore those ENIGMA only
easier if you just use background/make it self contained
anyway yeah then…
you can use surface_save and surface_get_texture if you want to do anything with the surface
@Saif you can dump it out or draw other objects with the effected texturealbeit i did add special texture_add functions to enigma, but ignore those ENIGMA only</p>
</blockquote>

<p>I had all this conversation with Robert because I wanted to know how I am gonna use ENIGMA’s Graphics System to render the shader. So most of these function that Robert mentioned are also part of the engine such as <code class="language-plaintext highlighter-rouge">surface_create</code>, <code class="language-plaintext highlighter-rouge">surface_set</code>, <code class="language-plaintext highlighter-rouge">shader_set</code>, <code class="language-plaintext highlighter-rouge">draw_rectangle</code>, <code class="language-plaintext highlighter-rouge">draw_background_stretched</code>, <code class="language-plaintext highlighter-rouge">surface_save</code>, and <code class="language-plaintext highlighter-rouge">surface_get_texture</code>.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 6: The Rush Summer</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 6: The Rush Summer" /><published>2024-06-30T21:00:00+00:00</published><updated>2024-06-30T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<h2 id="enigma-and-google-protobuf">ENIGMA and Google Protobuf</h2>

<p>ENIGMA depends on Protobuf is many things. RGM is considered to be a MVC application or Model View Controller. Every UI component of RGM is part of a proto message. This is also how ENIGMA serializes/deserializes its project files.</p>

<blockquote>
  <p>Josh — 01/07/2024 at 08:14</p>
</blockquote>

<blockquote>
  <p>you can eliminate a lot of that boilerplate using proto, @Saif
in fact, I recommend it, as you’ll need proto on hand to serialize to EGM etc</p>
</blockquote>

<blockquote>
  <p>add_node is a great example
of boilerplate, I mean; literally that is a function that protobuf would generate
check out the other resource messages
just search RGM for proto files</p>
</blockquote>

<blockquote>
  <p>Josh — 01/07/2024 at 09:25</p>
</blockquote>

<blockquote>
  <p>I suspect some of what I’ve written will still be necessary, but I suggest you try writing these node classes as protobuf messages and see where that gets you</p>
</blockquote>

<blockquote>
  <p>proto should save you a lot of effort here</p>
</blockquote>

<blockquote>
  <p>proto is just what C++ classes should look like</p>
</blockquote>

<blockquote>
  <p>well, sorry; as a storage layer, proto is certainly not what C++ classes should look like
but in terms of the features that a proto message offers….
there is absolutely no reason a modern programming language should not offer these features for its classes
proto just lets you do things like serialize and deserialize, use reflection, etc</p>
</blockquote>

<h2 id="the-ai-agent-phases">The AI Agent Phases</h2>

<p>When reaching the ML part, there are 3 main phases that we need to consider:</p>

<ol>
  <li>Fixed nodes, fixed connections, variable parameters (Fixed-Node layout).</li>
  <li>Fixed nodes, variable connections, variable parameters.</li>
  <li>Variable nodes, variable connections, variable parameters.</li>
</ol>

<p>Each phase should increase the complexity of the AI agent. The first phase is the easiest one.</p>

<blockquote>
  <p>Josh — 01/07/2024 at 09:20</p>
</blockquote>

<blockquote>
  <p>the node graph editor is a good chunk of work, and then the hard part is genetic recombination of node graphs
your first prototype should probably use a fixed node layout</p>
</blockquote>

<blockquote>
  <p>you can absolutely implement one that allows the ML to add or delete nodes, but then you need rules for handling recombination and crossover</p>
</blockquote>

<blockquote>
  <p>changing the counts and connections is simple enough, but leads to problems when cross-breeding two specimens with different graph structures</p>
</blockquote>

<blockquote>
  <p>in the end, the AI should generate the whole graph
but it’s totally okay if you don’t get that far</p>
</blockquote>

<blockquote>
  <p>I am pushing for a genetic algorithm
you have not heard the end of genetic algorithms
they are old school but will once again revolutionize artificial intelligence in the next ten years
in particular they will become important to avoid overfitting in DNN training</p>
</blockquote>

<blockquote>
  <p>their importance is about to skyrocket</p>
</blockquote>

<blockquote>
  <p>genetic algorithms are due for a Renaissance, is what I’m saying</p>
</blockquote>

<h2 id="visualshader-class"><code class="language-plaintext highlighter-rouge">VisualShader</code> Class</h2>

<p>Now enough theory, let’s talk about the important class I was working on during the past weeks.</p>

<p>The VisualShader class contains the graph and its main functionalities. As Josh said, these main functionalities should be part of the proto message, however, I like finishing it out and then refactoring. The <code class="language-plaintext highlighter-rouge">Graph</code> is a simple struct as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">struct</span> <span class="nc">Graph</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">VisualShader</span><span class="o">::</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodes</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">VisualShader</span><span class="o">::</span><span class="n">Connection</span><span class="o">&gt;</span> <span class="n">connections</span><span class="p">;</span>
<span class="p">}</span> <span class="n">graph</span><span class="p">;</span></code></pre></figure>

<p>The main functions are:</p>

<ul>
  <li>generate_shader</li>
  <li>generate_preview_shader</li>
  <li>generate_shader_for_each_node</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">generate_shader</code> function is the main function that will be called by the user. It will contains a recursively algorithm that will go through the graph starting from the output node. The <code class="language-plaintext highlighter-rouge">Output</code> node is the special node in the graph as it can’t be added or deleted. It has the id of 0.</p>

<p>The <code class="language-plaintext highlighter-rouge">generate_preview_shader</code> is a simplified version of the <code class="language-plaintext highlighter-rouge">generate_shader</code> function. It will be used to generate the shader for the preview window. The preview window is expected to use ENIGMA’s Graphics System to render the shader. It is necessary because it can generate the shader starting from any node in the graph.</p>

<p>Both functions will call the <code class="language-plaintext highlighter-rouge">generate_shader_for_each_node</code> function. This function will be called for each node in the graph. It will generate the shader for the node and its children.</p>

<p>Now let’s walk through the <code class="language-plaintext highlighter-rouge">generate_shader</code> function. In order to generate the shader code correctly, first we have to separate the shader code into 3 parts:</p>
<ul>
  <li>global code</li>
  <li>global code for each node</li>
  <li>local code for each node</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">global code</code> must be generated once. So if we have a node that is used multiple times in the graph, we don’t want to generate the code for it multiple times. The <code class="language-plaintext highlighter-rouge">global code for each node</code> is the code that is generated for each node in the graph. The <code class="language-plaintext highlighter-rouge">local code for each node</code> is the code that is generated for each node and its children.</p>

<p>That’s why at the start of the function I created multiple buffers to store the code and send them by reference to the recursive function.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">global_code</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">global_code_per_node</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">shader_code</span><span class="p">;</span></code></pre></figure>

<p>Another important step that I need to mention is that the connections are stored inside <code class="language-plaintext highlighter-rouge">std::vector</code>. This will increase the time complexity of the algorithm. This can be solved by the following snippet:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ConnectionKey</span><span class="p">,</span> <span class="k">const</span> <span class="n">Connection</span><span class="o">*&gt;</span> <span class="n">input_connections</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ConnectionKey</span><span class="p">,</span> <span class="k">const</span> <span class="n">Connection</span><span class="o">*&gt;</span> <span class="n">output_connections</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">func_code</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">processed</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="n">Connection</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">connections</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ConnectionKey</span> <span class="n">from_key</span><span class="p">;</span>
    <span class="n">from_key</span><span class="p">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">from_node</span><span class="p">;</span>
    <span class="n">from_key</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">from_port</span><span class="p">;</span>

    <span class="n">output_connections</span><span class="p">[</span><span class="n">from_key</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>

    <span class="n">ConnectionKey</span> <span class="n">to_key</span><span class="p">;</span>
    <span class="n">to_key</span><span class="p">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">to_node</span><span class="p">;</span>
    <span class="n">to_key</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">to_port</span><span class="p">;</span>

    <span class="n">input_connections</span><span class="p">[</span><span class="n">to_key</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Now, we can call <code class="language-plaintext highlighter-rouge">generate_shader_for_each_node</code> function for the output node. The function will be called recursively for each node in the graph. First we check the inputs of the current node until we reach a node that has no inputs (the input node). Then we generate the code for the node and its children.</p>

<p>The <code class="language-plaintext highlighter-rouge">generate_shader</code> function took <code class="language-plaintext highlighter-rouge">160 μs</code> to generate the shader for the graph in the <code class="language-plaintext highlighter-rouge">VisualShaderTest.Test_generate_shader</code> test. I can improve this time however, as I said, I want to waste ZERO time here.</p>

<p>The <code class="language-plaintext highlighter-rouge">ConnectionKey</code> union is defined as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">union</span> <span class="n">ConnectionKey</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">FragmentedKey</span> <span class="p">{</span>
        <span class="kt">uint64_t</span> <span class="n">node</span> <span class="o">:</span> <span class="mi">32</span><span class="p">;</span>
        <span class="kt">uint64_t</span> <span class="n">port</span> <span class="o">:</span> <span class="mi">32</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">f_key</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">key</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">ConnectionKey</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">key</span><span class="p">.</span><span class="n">key</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p><img src="/gsoc24-blog/assets/connection-key-theory.png" alt="Connection Key Theory" /></p>

<p>This union will be used as a key for each <code class="language-plaintext highlighter-rouge">Connection</code> object in <code class="language-plaintext highlighter-rouge">std::map</code>. The key is a 64-bit integer that contains the node id in the first 32 bits and the port id in the second 32 bits. This will allow us to search for the connection in <code class="language-plaintext highlighter-rouge">O(1)</code> time complexity using only a node id and a port id.</p>

<h2 id="changing-the-structure-of-the-project">Changing The Structure Of The Project</h2>

<p>After talking with Greg, I found out that anything inside <code class="language-plaintext highlighter-rouge">ENIGMAsystem/</code> must provide user functions. The EDL functions that the game developer will use. The <code class="language-plaintext highlighter-rouge">VisualShader</code> class is actually a class that will be used by RGM only. So, I moved the class to <code class="language-plaintext highlighter-rouge">ENIGMAsystem/shared/ResourceTransformations/VisualShader/</code> as Josh recommended.</p>

<p>The tests as well must be part of <code class="language-plaintext highlighter-rouge">test-runner</code> not <code class="language-plaintext highlighter-rouge">emake-tests</code>. I will move them to <code class="language-plaintext highlighter-rouge">CommandLine/testing/Tests/</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
enigma-dev
├── ...
├── CommandLine
│   ├── ...
│   └── testing
│       ├── ...
│       └── Tests
│           ├── ...
│           ├── visual_shader_tests.cpp
│           └── visual_shader_nodes_tests.cpp
│
└── shared
    └── ResourceTransformations
        └── VisualShader
            ├── ...
            ├── visual_shader.h
            ├── visual_shader.cpp
            ├── visual_shader_nodes.h
            └── visual_shader_nodes.cpp

</code></pre></div></div>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 1, 2, 3, 4, and 5: Final Final Exams</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 1, 2, 3, 4, and 5: Final Final Exams" /><published>2024-05-26T21:00:00+00:00</published><updated>2024-05-26T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>I want to note that currently, I am working with a low pace as I am very buzy with my final exams and graduation stuff.</p>

<p>I take my inspiration from Godot Game Engine as I want to reach the Machine Learning part of the project. on 16th of June, I noticed that Godot implements the Visual Shader using the <a href="https://web.archive.org/web/20120507164830/https://web.mit.edu/~emin/www/source_code/red_black_tree/index.html">Red-Black Tree C Code</a> and can be found at <a href="https://github.com/godotengine/godot/blob/705b7a0b0bd535c95e4e8fb439f3d84b3fb4f427/scene/resources/visual_shader.h#L129-L132">Godot Visual Shader H 129-132</a>. As Josh replied, <code class="language-plaintext highlighter-rouge">std::map</code> is a red black tree. I didn’t know it earleir.</p>

<p>An interesting fact that I have learned is why Godot developers have their own implementation of the Red Black Trees. Actually, I made a converstation with one of them once about why they are not using the standard template library or STL.</p>

<blockquote>
  <p>December 29, 2023</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:55 AM</p>
</blockquote>

<blockquote>
  <p>guys, i have a question in mind, i know that godot doesn’t require any installation setup and wondered what the installation setup gives? I mean why just not every program out there use the same approach there must be something</p>
</blockquote>

<blockquote>
  <p>Calinou 1:50 AM</p>
</blockquote>

<blockquote>
  <p>installers allow for better system integration like desktop icons, start menu entries, entries in Add/Remove Programs
that’s why there is still some demand for them. It is possible to do this stuff manually or with external tools like Scoop, but some people (companies in particular) value a built-in solution for large-scale deployments</p>

  <p>it is possible to create installers that work without administrator privileges if the app is installed for a single user only</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:56 AM</p>
</blockquote>

<blockquote>
  <p>Godot is self contained in a single file, many programs aren’t, that’s generally why they require installers, and have libraries they depend on etc.</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:57 AM</p>
</blockquote>

<blockquote>
  <p>wait a minute, Godot doesn’t depend on any library?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:58 AM</p>
</blockquote>

<blockquote>
  <p>Not any other than system ones, it contains all the third party things</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:58 AM</p>
</blockquote>

<blockquote>
  <p>also what do u mean by self-contained in a single file?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:58 AM</p>
</blockquote>

<blockquote>
  <p>It is a single file? It doesn’t have a lot of extra files like many programs have, it embeds all the data of it in the executable</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:59 AM</p>
</blockquote>

<blockquote>
  <p>hmmm, interesting, I guess &lt;std::string&gt; is from system as well, why not use it?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:59 AM</p>
</blockquote>

<blockquote>
  <p>Look at any one software on your computer, in for example Program Files on Windows
See <a href="https://docs.godotengine.org/en/stable/about/faq.html#doc-faq-why-not-stl">here</a> 🙂</p>
</blockquote>

<blockquote>
  <p>AThousandShips 1:00 AM</p>
</blockquote>

<blockquote>
  <p>We use our custom String type, as the one provided by STL is too basic and lacks proper internationalization support.
STL templates create very large symbols, which results in huge debug binaries. We use few templates with very short names instead.</p>
</blockquote>

<blockquote>
  <p>Also the STL library is infamous for standards iffyness
With various, quite serious, inconsistencies between different implementations
Some areas of the STL doesn’t provide any guarantees or details on things like performance, or safety, it leaves it entirely up to the implementation
Came across a case of it some time ago when discussing this very topic but forget what it was now, but it was pretty glaring
Even trivial things like exception handling is weird in some libraries, see <a href="https://github.com/godotengine/godot-cpp/issues/1326">here</a>, where one implementation of the library on Arch Linux is broken with exceptions disabled</p>
</blockquote>

<p>It shouldn’t be a problem for ENIGMA 🤣. Actually, unlike Godot, ENIGMA is meant to be simple to use and developed so I don’t see any problem of using STL in ENIGMA. Also, I don’t want to forget that in order to reach the AI part, I need to finish the whole editor as soon as possible which is a large chunk of work.</p>

<p>Oh by the way, I planned already to extend my project to 22 weeks. That the maximum number of weeks you can ever extend to. I want to implement the Matching Machine Learning algorithm as well.</p>

<blockquote>
  <p>gfundies — 25/06/2024 21:44</p>
</blockquote>

<blockquote>
  <p>@Josh @Saif https://developers.google.com/open-source/gsoc/help/project-dates what date did you want?
need to pick from those</p>
</blockquote>

<p>Now, beside the implementation of the graph, I needed to know more about the use case of this project. How the game developers are going to use it. Then I can decide what can be done. Thanks to Josh he explained it very well.</p>

<blockquote>
  <p>Josh — 29/06/2024 17:34</p>
</blockquote>

<blockquote>
  <p>converting textures to this is just a way to prime it; few people would start with a sprite and convert it to a shader. Instead, they’d obtain a photograph of something—grass, wood, rust—and use your tool to convert that photograph into a seamless (infinite) artistic representation that can be tweaked for stylistic consistency with the rest of their game
the shaders would then be used to color objects, obviously, whether that’s a skybox or background texture that doesn’t end or just a way to color boxes so that no two boxes look the same
the goal is largely to avoid repetition and predictability by taking an example and mathematically generalizing it
clearly the predictability remains high since you’ve literally found a mathematical way of creating it, but artistically your eyes won’t go “wow it’s the same thing over and over again”</p>
</blockquote>

<h2 id="graph-lifecycle">Graph Lifecycle</h2>

<p>I am gonna explain more about this approach just for future contributors who will take on this project and hopefully, I am mentoring them.</p>

<p>First of all, the game developer will load a resource into the Visual Shader Editor. The game developer will have the choice between Backgrounds and Sprites. Currently, let’s keep it simple and focus of Backgrounds. The game developer can now match the loaded resource using a <code class="language-plaintext highlighter-rouge">Match Image</code> button that will be created.</p>

<p>The AI Agent take over and start generating the graph and matching the best parameters according to the resource image loaded until it converge.</p>

<p>At this point, the compiler will take over and writes a resource ID to the generated shader from this graph.</p>

<p>This is how the graph editor and the graph will be used while developing a game. The thing is that if I want to make a volcano surface for example, I will only need a volcano background image and the AI Agent will take care of all other stuff.</p>

<h2 id="godots-role">Godot’s Role</h2>

<p>In order to implement an excellent approach for the Visual Shader, I decided to work in parallel on Godot’s Visual Shader Editor to improve my implementations. See <a href="https://github.com/godotengine/godot/pull/93791">#93791</a>, <a href="https://github.com/godotengine/godot/pull/93988">#93988</a>, and <a href="https://github.com/godotengine/godot/pull/93992">#93992</a>.</p>

<h2 id="debugging-enigma-emake-tests-inside-vscode">Debugging ENIGMA <code class="language-plaintext highlighter-rouge">emake-tests</code> inside VSCode</h2>

<p>I always wanted to run the debug session from vscode instead of doing it manually and here are the task and launch objects:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">//</span><span class="w"> </span><span class="err">task</span><span class="w"> </span><span class="err">object:</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"make emake-tests"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">ENIGMA</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">make</span><span class="w"> </span><span class="err">(not</span><span class="w"> </span><span class="err">CMake)</span><span class="w"> </span><span class="err">at</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">time</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">writing</span><span class="w"> </span><span class="err">this.</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">//</span><span class="w"> </span><span class="err">launch</span><span class="w"> </span><span class="err">configuration</span><span class="w"> </span><span class="err">object:</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Launch emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"--gtest_filter="</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">TODO:</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">filter</span><span class="w"> </span><span class="err">here.</span><span class="w">
    </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w">
    </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build emake-tests"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Bonding Period</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Bonding Period" /><published>2024-05-15T21:00:00+00:00</published><updated>2024-05-15T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>After installing Arch Linux, I can build RGM, just to do something in this period. Of courcse, it won’t run from the first time and I am gonna leave the error here for future reference:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span> 76%] Linking CXX executable emake
    /usr/bin/ld: CMakeFiles/emake.dir/EnigmaPlugin.cpp.o: undefined reference to symbol <span class="s1">'_ZN4absl12lts_2024011612log_internal21CheckOpMessageBuilderC1EPKc'</span>
    /usr/bin/ld: /usr/lib/libabsl_log_internal_check_op.so.2401.0.0: error adding symbols: DSO missing from <span class="nb">command </span>line
    collect2: error: ld returned 1 <span class="nb">exit </span>status
    make[2]: <span class="k">***</span> <span class="o">[</span>Submodules/enigma-dev/CommandLine/emake/CMakeFiles/emake.dir/build.make:203: Submodules/enigma-dev/CommandLine/emake/emake] Error 1
    make[1]: <span class="k">***</span> <span class="o">[</span>CMakeFiles/Makefile2:625: Submodules/enigma-dev/CommandLine/emake/CMakeFiles/emake.dir/all] Error 2
    make: <span class="k">***</span> <span class="o">[</span>Makefile:136: all] Error 2
</code></pre></div></div>

<p>Before installing Arch Linux, I tried to build RGM using my Ubuntu machine but same error. That was before being accepted in GSoC.</p>

<p>In this bonding period, I didn’t do much as I was busy with my final exams.</p>

<p>Late in the bonding period, specifically on May 24th, I want to start writing some code so started wondering where to put it. The whole organization of the project is still unclear.</p>

<p>Anyway, The graph backend is not related to the <code class="language-plaintext highlighter-rouge">Graphics_Systems</code>, although, it will require a system to render the generated shader. I think the most suitable location is inside <code class="language-plaintext highlighter-rouge">Universal_System</code>. Josh was also fine with this location.</p>

<p>The expected structure of my files will be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enigma-dev
├── ...
├── CommandLine
│   ├── ...
│   └── emake-tests
│       ├── ...
│       └── ShaderGraphTests
│           ├── ...
│           ├── GraphTests.cpp
│           └── NodeTests.cpp
└── ENIGMAsystem
    └── SHELL
        ├── ...
        └── Universal_System
            ├── ...
            └── ShaderGraph
                ├── ...
                ├── Graph.cpp
                ├── Graph.h
                ├── Node.cpp
                └── Node.h
</code></pre></div></div>

<p>When the graph is implemented, I will start implementing the generator although I am not sure how I am gonna visualize the output shader. I will talk to my mentor about this however maybe I will have to integrate the node editor with RGM which is something I don’t want to do.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Acceptance Story</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/14/google-summer-of-code-2024-acceptance-story.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Acceptance Story" /><published>2024-05-14T21:00:00+00:00</published><updated>2024-05-14T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/14/google-summer-of-code-2024-acceptance-story</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/14/google-summer-of-code-2024-acceptance-story.html"><![CDATA[<p>My accepted proposal <a href="/gsoc24-blog/assets/procedural-fragment-shader-generation-using-classic-machine-learning-GSoC-2024-proposal.pdf">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<blockquote>
  <p>Josh — 01/05/2024 21:08</p>

  <p>Hey, just wanted to give congrats to this year’s GSoC contributors, @Fares Atef and @Saif; welcome (back), you two!</p>
</blockquote>

<p>Hmmmmm … At the time of writing this, I can’t think of a way to describe my acceptance into Google Summer of Code 2024 program so let’s jump into project idea’s author.</p>

<blockquote>
  <p>my thoughts on the future are cloudy; ENIGMA hasn’t really embraced ML tools, so it’s heading for obsolescence</p>

  <p>Josh — 19/01/2024 17:21</p>
</blockquote>

<blockquote>
  <p>do u have anything in mind?</p>

  <p>Seif — 19/01/2024 17:51</p>
</blockquote>

<blockquote>
  <p>a lot of things
I think we really need procedural generation for placeholder graphics
…
we need a procedural texture editor; there are some open-source ones we could integrate</p>

  <p>Josh — 19/01/2024 17:51</p>
</blockquote>

<p>After these messages, there was a long discussion about the project idea and then I decided to apply for it.</p>

<p>Anyway, I am gonna setup my development environment by installing arch linux as ENIGMA is mainly developed on it.</p>

<p>NOTE: You can find the example game using Godot that showcases the final result of the project here: <a href="/gsoc24-blog/assets/godot_visual_shader_editor_showcase.zip">godot_visual_shader_editor_showcase.zip</a>.</p>

<blockquote style="border-left: 6px solid #ff3e3e;">
    <p>
        وَمَا بِكُم مِّن نِّعْمَةٍۢ فَمِنَ ٱللَّهِ ۖ ثُمَّ إِذَا مَسَّكُمُ ٱلضُّرُّ فَإِلَيْهِ
        تَجْـَٔرُونَ
    </p>
    <p>
        Whatever blessings you have are from Allah. Then whenever hardship touches you, to Him
        ˹alone˺
        you cry ˹for help˺.
    </p>
    <cite>The Noble Qur'an, An-Nahl 53</cite>
</blockquote>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[My accepted proposal Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry></feed>