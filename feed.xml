<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/" rel="alternate" type="text/html" /><updated>2025-02-11T13:37:26+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/feed.xml</id><title type="html">k0T0z</title><subtitle>Just a place for me to dump my thoughts</subtitle><entry><title type="html">AFTER Google Summer of Code 2024: Google Protocol Buffers Technology</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/10/13/after-google-summer-of-code-2024-google-protocol-buffers-technology.html" rel="alternate" type="text/html" title="AFTER Google Summer of Code 2024: Google Protocol Buffers Technology" /><published>2024-10-13T21:00:00+00:00</published><updated>2024-10-13T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/10/13/after-google-summer-of-code-2024-google-protocol-buffers-technology</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/10/13/after-google-summer-of-code-2024-google-protocol-buffers-technology.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>I have learnt so much things including the right way to write code. I can say now that I can write code better because I don’t care about how good it looks. I care about how others can understand it.</p>

<p>You know what was the problem in my work? I didn’t follow ENIGMA’s way of doing things. So in order to explain this, consider the code snippet below:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">struct</span> <span class="nc">Graph</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">VisualShader</span><span class="o">::</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodes</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">VisualShader</span><span class="o">::</span><span class="n">Connection</span><span class="o">&gt;</span> <span class="n">connections</span><span class="p">;</span>
<span class="p">}</span> <span class="n">graph</span><span class="p">;</span></code></pre></figure>

<p>This is where I save my nodes and my connections. This all is being saved dynamically. However, in ENIGMA, we should be able to serialize and deserialize this data in a file called “project file”. Got it? RadialGM is an IDE that is able to load/save full projects. How ENIGMA do it? Well, they use Model-View-Controller (MVC) architecture. But that’s not everything. They also use Google Protocol Buffers as their model. This means everything you do in your project is being sent to Protobuf and then serialize this model to YAML.</p>

<p>By the way, ENIGMA doesn’t use Protobuf’s built-in serialization/deserialization functions. However, ENIGMA has its own module for managing all that called <a href="https://github.com/enigma-dev/enigma-dev/tree/master/CommandLine/libEGM">libEGM</a>. This module takes a mutable message using Reflection and then serialize it to YAML. This is how ENIGMA saves its project files.</p>

<p>So here is what I must do:</p>

<ol>
  <li>I need to make an integration between the Visual Shader Editor and the model.</li>
  <li>I need to change the VisualShader class to become only a Generator.</li>
</ol>

<p>And this what Josh was trying to say to me. I have covered this in <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-19-and-20-wrapping-up-and-final-evaluation.html#protobuf-work">Google Summer of Code 2024 Week 18, 19, and 20: Wrapping Up and Final Evaluation</a>.</p>

<p>Separating my concerns means NO NEED TO STORE GUI RELATED DATA IN MY BACKEND. Anything that is related to the frontend should be stored in the protobuf model. So don’t do this:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_caption</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="s">"FloatConstant"</span><span class="p">;</span> <span class="p">}</span>

<span class="kt">int</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_input_port_count</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>

<span class="n">VisualShaderNode</span><span class="o">::</span><span class="n">PortType</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_input_port_type</span><span class="p">([[</span><span class="n">maybe_unused</span><span class="p">]]</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">port</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">PORT_TYPE_SCALAR</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_input_port_name</span><span class="p">([[</span><span class="n">maybe_unused</span><span class="p">]]</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">port</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_output_port_count</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>

<span class="n">VisualShaderNode</span><span class="o">::</span><span class="n">PortType</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_output_port_type</span><span class="p">([[</span><span class="n">maybe_unused</span><span class="p">]]</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">port</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">PORT_TYPE_SCALAR</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">VisualShaderNodeFloatConstant</span><span class="o">::</span><span class="n">get_output_port_name</span><span class="p">([[</span><span class="n">maybe_unused</span><span class="p">]]</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">port</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="s">""</span><span class="p">;</span> <span class="p">}</span></code></pre></figure>

<p>However, do this:</p>

<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="kd">message</span> <span class="nc">VisualShaderNodeFloatConstant</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_caption</span><span class="p">)</span> <span class="o">=</span> <span class="s">"Float Constant"</span><span class="p">;</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_input_port_count</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_input_port_type</span><span class="p">)</span> <span class="o">=</span> <span class="n">PORT_TYPE_SCALAR</span><span class="p">;</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_input_port_caption</span><span class="p">)</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    
    <span class="k">option</span> <span class="p">(</span><span class="n">node_output_port_count</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_output_port_type</span><span class="p">)</span> <span class="o">=</span> <span class="n">PORT_TYPE_SCALAR</span><span class="p">;</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">node_output_port_caption</span><span class="p">)</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>

    <span class="k">optional</span> <span class="kt">double</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>This means ports, captions, and values should be stored in the protobuf model. This is how ENIGMA does it. This is how I should do it.</p>

<p>This means the VisualShader class should only be a generator. It should not store any data. It should only takes a number of nodes and connections and then generate a shader code.</p>

<p>After working on RGM for so long, I have decided to complete this on a simpler version of RGM because RGM is really big and my CPU is crying on every build. Also, see the pic below? This issue happens too much on RGM’s codebase. It is so difficult to determine the reason. Why? Well, consider the code snippet below:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">const</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">FieldDescriptor</span><span class="o">*</span> <span class="n">field</span> <span class="p">{</span><span class="n">some_descriptor</span><span class="o">-&gt;</span><span class="n">FindFieldByNumber</span><span class="p">(</span><span class="n">some_field_number</span><span class="p">)};</span>
<span class="k">if</span> <span class="p">(</span><span class="n">field</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Field not found: "</span> <span class="o">&lt;&lt;</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">full_name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice the problem? If <code class="language-plaintext highlighter-rouge">field</code> is <code class="language-plaintext highlighter-rouge">nullptr</code>, then <code class="language-plaintext highlighter-rouge">field-&gt;full_name()</code> will cause a segmentation fault. However, the issue in the pic below will show up. I have no reasonable explanation for this and this is just a simple example. RGM’s codebase is considered to be legacy (in my opinion) with enough complexity that makes it difficult to determine the reason for the issue.</p>

<p><img src="/gsoc24-blog/assets/protobuf_runtime_issue.png" alt="Protobuf Runtime Issue" /></p>

<p>After working continuously on my mini-RGM, I can finally guess what RGM’s model needs. I have created a separate model for the <code class="language-plaintext highlighter-rouge">oneof</code>s and this helps with separating the complexiness from the MessageModel class becasue according to Protobuf’s syntax, <code class="language-plaintext highlighter-rouge">oneof</code>s are only allowed to be in the message scope.</p>

<p>Of course, RGM’s model is way complex than mine. RGM’s model employs many - if not all - features of QAbstractItemModel such as role and also not to mention that RGM’s model is made for many editors at once (not only one such as mine heh).</p>

<p>Anyway, I have made it and now my model works fine starting from <a href="https://github.com/k0T0z/shader-gen/commit/b17ce5beff8165a9569b5260c9159e679e2a62d8">b17ce5b</a>.</p>

<h2 id="diagnosing-and-resolving-protobuf-pointer-access-crashes-in-debug-mode">Diagnosing and Resolving Protobuf Pointer Access Crashes in Debug Mode</h2>

<p>One of the reasons I left RGM and started working on the project in a clean codebase is that while debugging RGM, crashes happens when I reach a certain point in the code. Consider the following below code snippet, when I reach step to line 11, crashes happens. I didn’t know why back then because sometimes they happen and sometimes they don’t.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"> <span class="mi">1</span><span class="o">:</span> <span class="kt">void</span> <span class="n">MessageModel</span><span class="o">::</span><span class="n">RebuildSubModels</span><span class="p">()</span> <span class="p">{</span>
 <span class="mi">2</span><span class="o">:</span>   <span class="n">submodels_by_field_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
 <span class="mi">3</span><span class="o">:</span>   <span class="n">submodels_by_row_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
 <span class="mi">4</span><span class="o">:</span>   <span class="n">R_EXPECT_V</span><span class="p">(</span><span class="n">_protobuf</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"Internal protobuf null"</span><span class="p">;</span>
 <span class="mi">5</span><span class="o">:</span> 
 <span class="mi">6</span><span class="o">:</span>   <span class="k">const</span> <span class="n">Descriptor</span> <span class="o">*</span><span class="n">desc</span> <span class="o">=</span> <span class="n">_protobuf</span><span class="o">-&gt;</span><span class="n">GetDescriptor</span><span class="p">();</span>
 <span class="mi">7</span><span class="o">:</span>   <span class="k">const</span> <span class="n">Reflection</span> <span class="o">*</span><span class="n">refl</span> <span class="o">=</span> <span class="n">_protobuf</span><span class="o">-&gt;</span><span class="n">GetReflection</span><span class="p">();</span>
 <span class="mi">8</span><span class="o">:</span>   <span class="n">submodels_by_row_</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">desc</span><span class="o">-&gt;</span><span class="n">field_count</span><span class="p">());</span>
 <span class="mi">9</span><span class="o">:</span> 
<span class="mi">10</span><span class="o">:</span>   <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">desc</span><span class="o">-&gt;</span><span class="n">field_count</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="mi">11</span><span class="o">:</span>     <span class="k">const</span> <span class="n">FieldDescriptor</span> <span class="o">*</span><span class="n">field</span> <span class="o">=</span> <span class="n">desc</span><span class="o">-&gt;</span><span class="n">field</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="mi">12</span><span class="o">:</span> 
<span class="mi">13</span><span class="o">:</span>     <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">is_repeated</span><span class="p">())</span> <span class="p">{</span>
<span class="mi">14</span><span class="o">:</span>       <span class="k">switch</span> <span class="p">(</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">cpp_type</span><span class="p">())</span> <span class="p">{</span>
<span class="mi">15</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_ENUM</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">16</span><span class="o">:</span>           <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"ENUMs not yet handled"</span><span class="p">;</span>
<span class="mi">17</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">18</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">19</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_MESSAGE</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">20</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedMessageModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">21</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">22</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">23</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_BOOL</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">24</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedBoolModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">25</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">26</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">27</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_INT32</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">28</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedInt32Model</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">29</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">30</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">31</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_INT64</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">32</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedInt64Model</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">33</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">34</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">35</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_UINT32</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">36</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedUInt32Model</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">37</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">38</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">39</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_UINT64</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">40</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedUInt64Model</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">41</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">42</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">43</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_FLOAT</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">44</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedFloatModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">45</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">46</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">47</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_DOUBLE</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">48</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedDoubleModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">49</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">50</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">51</span><span class="o">:</span>         <span class="k">case</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_STRING</span><span class="p">:</span> <span class="p">{</span>
<span class="mi">52</span><span class="o">:</span>           <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RepeatedStringModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">53</span><span class="o">:</span>           <span class="k">break</span><span class="p">;</span>
<span class="mi">54</span><span class="o">:</span>         <span class="p">}</span>
<span class="mi">55</span><span class="o">:</span>       <span class="p">}</span>
<span class="mi">56</span><span class="o">:</span>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">cpp_type</span><span class="p">()</span> <span class="o">==</span> <span class="n">CppType</span><span class="o">::</span><span class="n">CPPTYPE_MESSAGE</span><span class="p">)</span> <span class="p">{</span>
<span class="mi">57</span><span class="o">:</span>       <span class="c1">// Ignore all unset oneof fields if any is set</span>
<span class="mi">58</span><span class="o">:</span>       <span class="k">if</span> <span class="p">(</span><span class="n">IsCulledOneof_</span><span class="p">(</span><span class="n">refl</span><span class="p">,</span> <span class="o">*</span><span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
<span class="mi">59</span><span class="o">:</span>       <span class="c1">// Only recursively build fields if they're set</span>
<span class="mi">60</span><span class="o">:</span>       <span class="k">if</span> <span class="p">(</span><span class="n">refl</span><span class="o">-&gt;</span><span class="n">HasField</span><span class="p">(</span><span class="o">*</span><span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">))</span> <span class="p">{</span>
<span class="mi">61</span><span class="o">:</span>         <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span>
<span class="mi">62</span><span class="o">:</span>             <span class="k">new</span> <span class="n">MessageModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">refl</span><span class="o">-&gt;</span><span class="n">MutableMessage</span><span class="p">(</span><span class="n">_protobuf</span><span class="p">,</span> <span class="n">field</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
<span class="mi">63</span><span class="o">:</span>       <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="mi">64</span><span class="o">:</span>         <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">message_type</span><span class="p">(),</span> <span class="n">i</span><span class="p">);</span>
<span class="mi">65</span><span class="o">:</span>       <span class="p">}</span>
<span class="mi">66</span><span class="o">:</span>     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="mi">67</span><span class="o">:</span>       <span class="n">submodels_by_field_</span><span class="p">[</span><span class="n">field</span><span class="o">-&gt;</span><span class="n">number</span><span class="p">()]</span> <span class="o">=</span> <span class="n">submodels_by_row_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrimitiveModel</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">field</span><span class="p">);</span>
<span class="mi">68</span><span class="o">:</span>     <span class="p">}</span>
<span class="mi">69</span><span class="o">:</span>   <span class="p">}</span>
<span class="mi">70</span><span class="o">:</span> <span class="p">}</span></code></pre></figure>

<p>The thing is, I noticed the same problem while working with protobuf and MSVC but this time, an access to a valid pointer crashes the system. The pointer is valid because the same code works fine using GCC. The problem was that mixing debug and release libraries in MSVC causes the crash. More precisely, it depends on setting CMAKE_MSVC_RUNTIME_LIBRARY correctly.</p>

<p>Given that the above information, I think the problem is not with RGM however, it is in how I was building protobuf, I think. Anyway, whoever reads this post, check this shell script for ubuntu <a href="https://github.com/k0T0z/shader-gen/blob/master/CI/build_protobuf_ubuntu.sh">build_protobuf_ubuntu.sh</a>. You can invoke it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ./build_protobuf_ubuntu.sh
<span class="nb">sudo</span> ./build_protobuf_ubuntu.sh Debug Dynamic
</code></pre></div></div>

<p>or whatever parameters you want. This script will build protobuf in Debug mode and Dynamic linking. I hope this helps.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 18, 19, and 20: Wrapping Up and Final Evaluation</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-19-and-20-wrapping-up-and-final-evaluation.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 18, 19, and 20: Wrapping Up and Final Evaluation" /><published>2024-09-22T21:00:00+00:00</published><updated>2024-09-22T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-19-and-20-wrapping-up-and-final-evaluation</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/09/22/google-summer-of-code-2024-week-18-19-and-20-wrapping-up-and-final-evaluation.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>My final evaluation report: <a href="https://docs.google.com/document/d/1ahKWo3m9fgqAfR9a3cqaIA08Sns05O68nhalpMNjDd8/edit?usp=sharing">Procedural Fragment Shader Generation Using Classic Machine Learning Google Summer Of Code 2024 Final Report</a>.</p>

<p>What an incredible journey this project has been with more than 15k newly added lines of code! While I wish I had more time to devote to it, I’m immensely proud of what I’ve accomplished and the knowledge I’ve gained. The challenges I encountered have only fueled my determination to continue developing this project beyond the Google Summer of Code program. Let me share some of the significant hurdles I overcame and what I learned from them.</p>

<h2 id="final-2024-evaluation-feedback">Final 2024 Evaluation Feedback</h2>

<p><img src="/gsoc24-blog/assets/final-2024-evaluation-feedback.png" alt="Final 2024 Evaluation Feedback" /></p>

<h2 id="major-challenges">Major Challenges</h2>

<h3 id="1-test-runner-compatibility-issues">1. Test Runner Compatibility Issues</h3>

<p>One of the first obstacles I faced was that the <code class="language-plaintext highlighter-rouge">test-runner</code> wouldn’t function on my Arch Linux machine, though it worked fine in an Ubuntu VM. Rather than simply working around this by using the VM, I decided to tackle the issue head-on. This problem had actually first surfaced before my acceptance into the program when attempting to build RGM on Ubuntu.</p>

<p>The issue manifested as a linking error involving Abseil, Protobuf, and gRPC packages. My initial approach was to:</p>
<ol>
  <li>Create a solution called <a href="https://github.com/k0T0z/absl-proto-grpc-ci">absl-proto-grpc-ci</a> to identify compatible versions of all three packages</li>
  <li>Manually clone, build, and install these versions locally to <code class="language-plaintext highlighter-rouge">/usr/local/</code></li>
</ol>

<p>Despite these efforts, the problem persisted until I discovered the root cause: missing library references. The solution was to add <code class="language-plaintext highlighter-rouge">-lgpr</code> and <code class="language-plaintext highlighter-rouge">-labseil_dll</code>/<code class="language-plaintext highlighter-rouge">-labsl_log_internal_message -labsl_log_internal_check_op</code> to the <code class="language-plaintext highlighter-rouge">LD</code> variable.</p>

<h3 id="2-rgm-runtime-error-resolution">2. RGM Runtime Error Resolution</h3>

<p>Addressing the RGM runtime error led to a complete refactoring of RGM’s CMake build system. This process resulted in numerous improvements to the overall build architecture. For detailed information about this issue, I’ve documented it thoroughly in my blog post: <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-12-and-13-rgm.html#runtime-nightmare">Google Summer of Code 2024 Week 11, 12, and 13: RGM: Runtime Nightmare</a>.</p>

<h2 id="implementation-highlights">Implementation Highlights</h2>

<h3 id="the-renderer">The Renderer</h3>

<p>As the project wrapped up, I implemented a simplified renderer solution. While ideally, we would have used ENIGMA’s Graphics System, time constraints led to a different approach. The current implementation uses Qt and includes:</p>
<ul>
  <li>A standalone class for shader preview</li>
  <li>Modifications to the <code class="language-plaintext highlighter-rouge">VisualShader</code> class to generate appropriate header code</li>
</ul>

<p>In my proposal, I mentioned that the Renderer will be done after the generator is done. The thing is I need a context to render the shader on, this could be <a href="https://www.glfw.org/">GLFW</a> or Qt. I decided it will be Qt so moved finishing the Renderer AFTER the <code class="language-plaintext highlighter-rouge">Visual Shader Editor</code> is done.</p>

<p>Robert talked to me about that in <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</a> by the way.</p>

<blockquote>
  <p>R0bert — 25/08/2024 18:48</p>
</blockquote>

<blockquote>
  <p>are you saying you want to have  a “Preview” window on your shader editor?
that might be more difficult then if you want to do a live preview of that but we can talk about it</p>
</blockquote>

<p>Here’s a glimpse of how the shader code is set:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">shader_program</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="nf">QOpenGLShaderProgram</span><span class="p">());</span>

<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">vertex_shader_source</span> <span class="o">=</span> <span class="s">R"(
    #version 330 core
    layout(location = 0) in vec2 aPos;
    layout(location = 1) in vec2 aTexCoord;

    out vec2 TexCoord;

    void main() {
    gl_Position = vec4(aPos, 0.0, 1.0);
    TexCoord = aTexCoord;
    }
)"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fragment_shader_source</span> <span class="p">{</span><span class="n">code</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="s">R"(
    #version 330 core
    out vec4 FragColor;
    in vec2 TexCoord;

    uniform float uTime;

    void main() {
    FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
)"</span> <span class="o">:</span> <span class="s">"#version 330 core</span><span class="se">\n\n</span><span class="s">"</span> <span class="o">+</span> <span class="n">code</span><span class="p">};</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">addShaderFromSourceCode</span><span class="p">(</span><span class="n">QOpenGLShader</span><span class="o">::</span><span class="n">Vertex</span><span class="p">,</span> <span class="n">vertex_shader_source</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Vertex shader compilation failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">addShaderFromSourceCode</span><span class="p">(</span><span class="n">QOpenGLShader</span><span class="o">::</span><span class="n">Fragment</span><span class="p">,</span> <span class="n">fragment_shader_source</span><span class="p">.</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Fragment shader compilation failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">qWarning</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"Shader program linking failed:"</span> <span class="o">&lt;&lt;</span> <span class="n">shader_program</span><span class="o">-&gt;</span><span class="n">log</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">shader_needs_update</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span></code></pre></figure>

<p>See the <code class="language-plaintext highlighter-rouge">#version 330 core</code> line in the header, this line is not required by ENIGMA’s Graphics System. This means when it comes to integrate the Renderer with ENIGMA’s Graphics System, some modifications will be made for sure.</p>

<p>if you wanna try the Renderer, you can download this Qt project: <a href="/gsoc24-blog/assets/testshaderrenderer.zip">testshaderrenderer.zip</a>.</p>

<h2 id="protobuf-work">Protobuf Work</h2>

<p>Josh told me to start with this task a while ago <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html#enigma-and-google-protobuf">Google Summer of Code 2024 Week 6: The Rush Summer: ENIGMA and Google Protobuf</a> and I decided to move on and make that change when the editor is done. Now, actually I don’t know how much time it will take to finish this task 🙂. That introduces a very important lesson: DO NOT IGNORE ANY THING THAT JOSH SAYS haha 🤣.</p>

<p>Anyway, I remember talking with Josh and Robert about this task and to handle it.</p>

<blockquote>
  <p>Josh — 31/08/2024 08:10</p>
</blockquote>

<blockquote>
  <p>I think the trouble we’re running into here is that we lack a clear separation of concerns—for a (somewhat outdated) example, model-view-controller
these classes I’m seeing are great for adapting myriad node types to a common UI; as an example, he seems to implement stuff like get_caption so that each node type can just tell the UI what to render for the node
that’s fine; what we want to do is take the stuff inside of those configurable objects and extract those to protos
so we need logic to take a node message and generate the correct node subclass; that’s easy to come up with once the storage format on disk for that info is chosen
basically, all the variables that each box needs to configure with input boxes and sliders and whatever need to be fields in a message; that FloatOpGraphNode message looks more or less fine, modulo some missing tag numbers and optionals</p>
</blockquote>

<blockquote>
  <p>from there, I would store the appropriate message in each GraphNode; personally, I’d probably use a template to accomplish this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Proto</span><span class="p">&gt;</span> <span class="k">class</span> <span class="nc">GraphNode</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">get_caption</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
    <span class="c1">// use Qt translation routines to get the human-readable caption for our message type.</span>
    <span class="c1">// A map would be fine for this, too. Or a custom attribute declared in the proto source.</span>
    <span class="k">return</span> <span class="n">_T</span><span class="p">(</span><span class="n">Proto</span><span class="o">::</span><span class="n">descriptor</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">+</span> <span class="s">"-caption"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<blockquote>
  <p>a custom attribute would look like this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">package</span> <span class="n">whatever_proto_package</span><span class="p">;</span>
<span class="n">extend</span> <span class="n">google</span><span class="p">.</span><span class="n">protobuf</span><span class="p">.</span><span class="n">MessageOptions</span> <span class="p">{</span>
  <span class="n">string</span> <span class="n">editor_caption</span> <span class="o">=</span> <span class="mi">50001</span><span class="p">;</span>  <span class="c1">// Define a custom option with a unique field number</span>
<span class="p">}</span>
<span class="n">message</span> <span class="n">FloatOpGraphNode</span> <span class="p">{</span>
  <span class="n">option</span> <span class="p">(</span><span class="n">editor_caption</span><span class="p">)</span> <span class="o">=</span> <span class="s">"Floating Point Operation"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>then the C++ would do this:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">get_caption</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
  <span class="c1">// Still translate it because we translate all Qt user strings</span>
  <span class="k">return</span> <span class="n">_T</span><span class="p">(</span><span class="n">Proto</span><span class="o">::</span><span class="n">descriptor</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">().</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">whatever_proto_package</span><span class="o">::</span><span class="n">editor_caption</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>I omitted a lot of checking for, e.g, the descriptor being null or the option missing or whatever
I’d also advise putting our message extensions in a single proto source for the entire project
like, anywhere we’re already extending MessageOptions, we should define any editor_caption field there
if we’re already doing that, I apologize for the confusion 
and so we’re clear, use whatever of that is helpful to you; I don’t care how you pull that off, protobuf is meant to be a tool to make your life easier
it can just be serialized and written directly to disk or read directly from disk, so I’d expect your UI code to read the entire graph from one binproto/textproto dump, then generate the UI graph nodes from message pointers as we do with our other Qt models
those Qt models are probably a good reference if they don’t confuse you to tears
if they do, ask me</p>
</blockquote>

<blockquote>
  <p>yeah, and storing that data is where the template comes in, though honestly, you can avoid the entirely using proto reflection if you prefer</p>
</blockquote>

<blockquote>
  <p>R0bert — 31/08/2024 19:34</p>
</blockquote>

<blockquote>
  <p>Josh explained, “separate your concerns”, have a GraphNode message that’s templated to take the rest of the parameters for the node
the only reason the source you linked has 50 classes is because its make a type for each one instead of separating the node from the ui</p>
</blockquote>

<p>Yeah, so now this is the biggest problem in my project now. The thing is that ENIGMA is mainly depends on Protobuf for serialization, deserialization, and many other purposes.</p>

<h3 id="noise-kernels">Noise Kernels</h3>

<p>I successfully implemented two additional noise kernels:</p>
<ul>
  <li>Perlin Noise</li>
  <li>Worley Noise</li>
</ul>

<h2 id="project-structure">Project Structure</h2>

<p>The final implementation is integrated into two main repositories:</p>

<ol>
  <li><a href="https://github.com/enigma-dev/enigma-dev">enigma-dev</a>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> enigma-dev
 ├── ...
 ├── CommandLine
 │   ├── ...
 │   └── testing
 │       ├── ...
 │       └── Tests
 │           ├── ...
 │           ├── visual_shader_tests.cpp
 │           ├── visual_shader_nodes_tests.cpp
 │           └── vs_noise_nodes_tests.cpp  
 |
 └── shared
     ├── ...
     └── ResourceTransformations
         └── VisualShader
             ├── README.md
             ├── visual_shader.h
             ├── visual_shader.cpp
             ├── visual_shader_nodes.h
             ├── visual_shader_nodes.cpp
             ├── vs_noise_nodes.h
             └── vs_noise_nodes.cpp
</code></pre></div>    </div>
  </li>
  <li><a href="https://github.com/enigma-dev/RadialGM">RadialGM</a>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> RadialGM
 ├── ...
 ├── Editors
 │   ├── ...
 │   ├── VisualShaderEditor.h
 │   └── VisualShaderEditor.cpp
 |
 └── Tests
     ├── CMakeLists.txt
     ├── tests_main.cpp
     ├── MainWindowTests.h
     ├── MainWindowTests.cpp
     └── Editors
         ├── VisualShaderEditorTests.h
         └── VisualShaderEditorTests.cpp
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="major-issues-fixed">Major Issues Fixed</h2>

<ol>
  <li>I changed the field numbers inside the Protobuf messages to make it look more organized and readable.</li>
</ol>

<p>This created a compatibility issue with old compileEGMf.dll plugin and old ENIGMA projects. However, due to the fact that no one is using RadialGM yet, it is fine to change it. I have added a note about that in <a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/6af44f37d40017999acfc93e85684083e7db7f21">6af44f37d40017999acfc93e85684083e7db7f21</a>.</p>

<hr />

<h2 id="outputs-with-graphs">Outputs With Graphs</h2>

<p>I’ve recreated several textures from <a href="https://thebookofshaders.com/">The Book of Shaders</a>, including:</p>

<p>A simple Wood texture from The Book Of Shaders:</p>

<p><img src="/gsoc24-blog/assets/wood-texture.png" alt="Wood Texture" /></p>

<p>My project’s output:</p>

<p><img src="/gsoc24-blog/assets/ENIGMA-visual-shader-wood-texture.png" alt="ENIGMA Visual Shader Wood Texture" />
<img src="/gsoc24-blog/assets/ENIGMA-visual-shader-wood-texture2.png" alt="ENIGMA Visual Shader Wood Texture" /></p>

<p>Check out the texture demo at <a href="https://youtu.be/9F7YYRG7MkM?si=mdgc4BBncT7IXNKa">https://youtu.be/9F7YYRG7MkM?si=mdgc4BBncT7IXNKa</a>.</p>

<hr />

<p>A simple Splatter texture from The Book Of Shaders:</p>

<p><img src="/gsoc24-blog/assets/splatter-texture.png" alt="Splatter Texture" /></p>

<p>My project’s output:</p>

<p><img src="/gsoc24-blog/assets/ENIGMA-visual-shader-splatter-texture.png" alt="ENIGMA Visual Shader Splatter Texture" />
<img src="/gsoc24-blog/assets/ENIGMA-visual-shader-splatter-texture2.png" alt="ENIGMA Visual Shader Splatter Texture" /></p>

<p>Check out the texture demo at <a href="https://youtu.be/AgsveEXKu8Y?si=G_VDLM0u-G-0w-wJ">https://youtu.be/AgsveEXKu8Y?si=G_VDLM0u-G-0w-wJ</a>.</p>

<p>The Splatter texture implementation led to several important fixes in the noise kernels, documented in these commits:</p>
<ul>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/4c716895d46130ec2cf7bbd8fd95806124563977">4c716895d46130ec2cf7bbd8fd95806124563977</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/55a050609592a0b2b1cfac8a526c84c133ed6c7d">55a050609592a0b2b1cfac8a526c84c133ed6c7d</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/7a8aa69d1445c6f77895b2f6d2784104c717fbc1">7a8aa69d1445c6f77895b2f6d2784104c717fbc1</a></li>
</ul>

<hr />]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 14, 15, 16, and 17: I Hate Frontend</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 14, 15, 16, and 17: I Hate Frontend" /><published>2024-08-25T21:00:00+00:00</published><updated>2024-08-25T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/25/google-summer-of-code-2024-week-14-15-16-and-17-i-hate-frontend.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>After encountering numerous challenges with the <a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> package, I made the strategic decision to develop a custom implementation. This decision was driven by the need for precision and maintainability, especially considering that this project’s ultimate goal extends beyond a Visual Shader Editor to a machine learning approach for shader generation.</p>

<h2 id="analysis-of-third-party-solution">Analysis of Third-Party Solution</h2>

<h3 id="limitations-of-nodeeditor-package">Limitations of nodeeditor Package</h3>
<ol>
  <li><strong>Scope Mismatch</strong>: The library encompasses backend functionality that I had already implemented prior to the midterm evaluation. It exceeds the requirements of a GUI library, introducing unnecessary complexity.</li>
  <li><strong>Bug Density</strong>: The package contains numerous bugs that would require significant time investment to resolve.</li>
  <li><strong>Integration Challenges</strong>: Attempts to integrate the library with my midterm evaluation code proved problematic, potentially rendering integration unfeasible.</li>
  <li><strong>Architectural Constraints</strong>: As documented in <a href="https://github.com/paceholder/nodeeditor/issues/149">Issue #149</a>, the global theming system prevents the creation of multiple editor instances. While a fix exists in <a href="https://github.com/paceholder/nodeeditor/pull/172">PR #172</a>, it remains unmerged.</li>
</ol>

<h2 id="custom-implementation-benefits">Custom Implementation Benefits</h2>

<h3 id="simplified-port-management">Simplified Port Management</h3>
<p>The nodeeditor library appears to use a complex algorithm for port detection and event handling. My approach simplifies this by treating ports as discrete objects:</p>

<ol>
  <li><strong>Port Objects as Children</strong>: By making ports children of nodes, we achieve clearer object hierarchy and simpler event propagation.</li>
  <li>
    <p><strong>Event Handler Reduction</strong>: This approach requires only three key functions:</p>

    <h4 id="on_port_pressed"><code class="language-plaintext highlighter-rouge">on_port_pressed</code></h4>
    <p>Initializes or resets the “temporary” connection object. A temporary connection exists in a dragging state, remaining uncommitted until finalized.</p>

    <h4 id="on_port_dragged"><code class="language-plaintext highlighter-rouge">on_port_dragged</code></h4>
    <p>Manages the continuous update of temporary connections during mouse movement. The implementation is straightforward, focusing solely on creation and updating of the temporary connection object.</p>

    <h4 id="on_port_dropped"><code class="language-plaintext highlighter-rouge">on_port_dropped</code></h4>
    <p>Handles the connection finalization when the mouse is released. Port detection is simplified as each port is a discrete object.</p>
  </li>
</ol>

<p>While implementing this custom solution was time-intensive and occasionally daunting due to its scope, the resulting system is more maintainable and aligned with our specific needs.</p>

<h3 id="event-system-architecture">Event System Architecture</h3>
<p>The implementation uses a simple but effective upward event propagation model:</p>
<ul>
  <li>Events emit from widgets and traverse up the widget tree until reaching the target</li>
  <li>This ensures encapsulation, as children cannot directly access parents</li>
  <li>Event handling occurs at the appropriate level in the widget hierarchy</li>
</ul>

<h2 id="testing-framework-development">Testing Framework Development</h2>

<h3 id="visual-shader-editor-testing-infrastructure">Visual Shader Editor Testing Infrastructure</h3>
<p>I’ve established a new <code class="language-plaintext highlighter-rouge">Tests</code> subdirectory within RGM, focusing on:</p>
<ul>
  <li>Foundation for testing <code class="language-plaintext highlighter-rouge">MainWindow</code> and <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> classes</li>
  <li>Exploration of various testing methodologies, guided by resources like <a href="http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html">Difference between Mocks, Fakes, Stubs and Dummies</a></li>
</ul>

<h3 id="testing-challenges-and-solutions">Testing Challenges and Solutions</h3>
<ol>
  <li><strong>Protobuf and Model Mocking</strong>: Initial attempts to mock <code class="language-plaintext highlighter-rouge">MessageModel</code> and <code class="language-plaintext highlighter-rouge">ProtoModel</code> classes proved problematic</li>
  <li><strong>Isolation vs. Integration</strong>: Balancing the need to test the <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> in isolation while also testing system integration</li>
  <li><strong>Workaround Implementation</strong>: Created a parameter-less constructor for <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code> to facilitate testing</li>
</ol>

<h3 id="current-testing-status">Current Testing Status</h3>
<p>While UI testing presents significant challenges, we’ve established a solid foundation:</p>
<ul>
  <li>Created the <code class="language-plaintext highlighter-rouge">Tests</code> directory structure</li>
  <li>Implemented tests for the <code class="language-plaintext highlighter-rouge">VisualShader</code> class</li>
  <li>Acknowledged the complexity of comprehensive UI testing and prioritized accordingly</li>
</ul>

<h2 id="project-extension-considerations">Project Extension Considerations</h2>
<p>Despite aspirations to extend the project to include machine learning components, time constraints have necessitated focusing on core functionality. The integration complexity between Qt5, Protobuf, gRPC, <code class="language-plaintext highlighter-rouge">VisualShader</code>, <code class="language-plaintext highlighter-rouge">VisualShaderEditor</code>, JDI, and ENIGMA’s Graphics System requires careful consideration and extensive testing.</p>

<h2 id="notes">Notes</h2>
<p>As confirmed by Robert on August 30, 2024:</p>

<blockquote>
  <p>R0bert — 30/08/2024 17:58</p>
</blockquote>

<blockquote>
  <p>be careful im not sure if we can extend yours again this year, so dont count on it
i saw mentor thread talking about that</p>
</blockquote>

<p>This reinforces our focus on delivering a robust core implementation rather than expanding scope.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 13: RGM, Season 2</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 13: RGM, Season 2" /><published>2024-08-18T21:00:00+00:00</published><updated>2024-08-18T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/18/google-summer-of-code-2024-week-13-rgm-season-2.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<h2 id="local-not-required">Local Not Required</h2>

<p>The error I encountered stemmed from gRPC not loading correctly. Initially, I suspected that this issue was due to the manually built packages, so I decided to clean them up and switch to using <code class="language-plaintext highlighter-rouge">pacman</code>. I knew the steps to take.</p>

<p>Regarding the Abseil linking error, similar to how linking <code class="language-plaintext highlighter-rouge">-labseil_dll</code> resolved a previous issue, I discovered through trial and error that adding <code class="language-plaintext highlighter-rouge">-labsl_log_internal_message</code> and <code class="language-plaintext highlighter-rouge">-labsl_log_internal_check_op</code> also fixed the problem. Consequently, I could run RGM with the packages installed via <code class="language-plaintext highlighter-rouge">pacman</code>, but unfortunately, the same error persisted.</p>

<h2 id="revisiting-the-runtime-issue">Revisiting the Runtime Issue</h2>

<p>When I encounter a problem, it tends to occupy my thoughts until I find a solution. Despite Robert advising me to focus on my work and not dwell on the issue, I continued to investigate. By sheer luck, on August 17, 2024, I managed to resolve the runtime issue (الحمدلله). Let me explain the situation and summarize the entire process.</p>

<p>In CMake, there are two methods for locating a package, represented by two types of files: <code class="language-plaintext highlighter-rouge">Find&lt;package&gt;.cmake</code> and <code class="language-plaintext highlighter-rouge">&lt;package&gt;Config.cmake</code>. While the latter is considered the modern approach, ENIGMA, being 16 years old, still relies on the former method to find packages.</p>

<p>As I worked on RGM, I addressed some issues within its CMake files, particularly regarding how to locate gRPC and protobuf. However, I neglected to check other CMake files, specifically <code class="language-plaintext highlighter-rouge">enigma-dev/shared/CMakeLists.txt</code>, <code class="language-plaintext highlighter-rouge">enigma-dev/shared/protos/CMakeLists.txt</code>, <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/CMakeLists.txt</code>, and <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/libEGM/CMakeLists.txt</code>. All of these files utilized the following method to find gRPC and protobuf:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">include</span><span class="p">(</span>FindProtobuf<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_EGM</span><span class="si">}</span> PRIVATE <span class="si">${</span><span class="nv">Protobuf_LIBRARY</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div>

<p>or</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">Protobuf_INCLUDE_DIRS</span><span class="si">}</span><span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_PROTO</span><span class="si">}</span> PRIVATE <span class="si">${</span><span class="nv">Protobuf_LIBRARIES</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div>

<p>I replaced these lines with:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">find_package</span><span class="p">(</span>Protobuf CONFIG REQUIRED<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">LIB_PROTO</span><span class="si">}</span> PRIVATE protobuf::libprotobuf<span class="p">)</span>
</code></pre></div></div>

<p>These new lines function correctly whether using system packages or local ones.</p>

<p>So, how is this related to the runtime issue? Although I’m unsure about the exact differences between the two file types, I do know that mixing them can lead to runtime errors. This issue is particularly unpredictable because everything appeared to work fine during the linking process, which completed successfully. However, if you look at the error output, you might be able to identify the problem. Even after debugging the code and examining the stack trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[k0t0z@archlinux build]$ gdb ./RadialGM

(gdb) run
Starting program: /home/k0t0z/Desktop/gsoc24/RadialGM/build/RadialGM 
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR                                                                                                                       
E0000 00:00:1723739441.404244    1995 metrics.cc:49] Metric name grpc.lb.pick_first.disconnections has already been registered.

Program received signal SIGABRT, Aborted.
0x00007ffff3ea8e44 in ?? () from /usr/lib/libc.so.6
(gdb) bt
#0  0x00007ffff3ea8e44 in ?? () from /usr/lib/libc.so.6
#1  0x00007ffff3e50a30 in raise () from /usr/lib/libc.so.6
#2  0x00007ffff3e384c3 in abort () from /usr/lib/libc.so.6
#3  0x00007ffff7d123ed in grpc_core::Crash(std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, grpc_core::SourceLocation) () from /usr/local/lib/libgpr.so.42
#4  0x00007ffff6931c1a in grpc_core::GlobalInstrumentsRegistry::RegisterInstrument(grpc_core::GlobalInstrumentsRegistry::ValueType, grpc_core::GlobalInstrumentsRegistry::InstrumentType, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, bool, absl::lts_20240722::Span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&gt;, absl::lts_20240722::Span&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&gt;) () from /usr/local/lib/libgrpc.so.42
#5  0x00007ffff6830452 in grpc_core::GlobalInstrumentsRegistry::RegistrationBuilder&lt;(grpc_core::GlobalInstrumentsRegistry::ValueType)2, (grpc_core::GlobalInstrumentsRegistry::InstrumentType)1, 1ul, 0ul&gt;::Build() () from /usr/local/lib/libgrpc.so.42
#6  0x00007ffff64c25ef in _GLOBAL__sub_I_pick_first.cc () from /usr/local/lib/libgrpc.so.42
#7  0x00007ffff7fce2e7 in ?? () from /lib64/ld-linux-x86-64.so.2
#8  0x00007ffff7fce3dd in ?? () from /lib64/ld-linux-x86-64.so.2
#9  0x00007ffff7fe57a0 in ?? () from /lib64/ld-linux-x86-64.so.2
#10 0x0000000000000001 in ?? ()
#11 0x00007fffffffe85b in ?? ()
#12 0x0000000000000000 in ?? ()
</code></pre></div></div>

<p>Did you spot the issue? It’s challenging, and I managed to resolve it purely by chance. Robert, Kartik, and I explored numerous solutions, but nothing worked until I finally fixed it on August 17, 2024. Robert acknowledged my progress with a thumbs-up for every message I sent that day. The process was challenging yet enjoyable.</p>

<blockquote>
  <p>kartik — 17/08/2024 20:23</p>
</blockquote>

<blockquote>
  <p>nope never seen this before, but glad that you’re able to build the rgm</p>
</blockquote>

<blockquote>
  <p>R0bert — 17/08/2024 20:26</p>
</blockquote>

<blockquote>
  <p>this is beautiful and im not surprised at all
based on the debugging from yesterday i was suspecting something was going wrong with linking
i suspect the old way was linking twice as you said and the static initialization was called twice
so this is great, this is excellent
im giving every comment here a thumbs up because that is some good stuff!
now onward and upward with the project</p>
</blockquote>

<p>Building RGM is now complete, and I am ready to focus on the UI development.</p>

<p>I would like to point out that the recent changes will not work on Ubuntu, as it lags significantly behind Arch Linux by about 1,000 versions. This means that if you are using Ubuntu, you will need to build Abseil, protobuf, and gRPC manually.</p>

<p>Additionally, I have decided to refactor the entire CMake build system. All the changes can be found in the following two pull requests:</p>

<ul>
  <li><a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></li>
  <li><a href="https://github.com/enigma-dev/enigma-dev/pull/2399">#2399</a></li>
</ul>

<p>This brings me to the reason I titled my update <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</a>—I spent nearly 1.5 months tackling this issue.</p>

<h2 id="unexpected-issues">Unexpected Issues</h2>

<p>Even after fixing emake, I encountered an error when trying to build emake using VSCode tasks:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/bin/grpc_cpp_plugin: error while loading shared libraries: libgrpc_plugin_support.so.1.65: cannot open shared object file: No such file or directory
--grpc_out: protoc-gen-grpc: Plugin failed with status code 127.
</code></pre></div></div>

<p>This issue is perplexing because the same command runs without problems when executed directly from the terminal. I do not see anything wrong with my configuration files:</p>

<p><strong>launch.json</strong>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Use</span><span class="w"> </span><span class="err">IntelliSense</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">learn</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">possible</span><span class="w"> </span><span class="err">attributes.</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Hover</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">view</span><span class="w"> </span><span class="err">descriptions</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">attributes.</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">For</span><span class="w"> </span><span class="err">more</span><span class="w"> </span><span class="err">information</span><span class="p">,</span><span class="w"> </span><span class="err">visit:</span><span class="w"> </span><span class="err">https://go.microsoft.com/fwlink/?linkid=</span><span class="mi">830387</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Launch test-runner"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/test-runner"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"--gtest_filter=VisualShaderTest.*"</span><span class="p">],</span><span class="w">
          </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
          </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
              </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
              </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
              </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">],</span><span class="w">
          </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>tasks.json</strong>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">See</span><span class="w"> </span><span class="err">https://go.microsoft.com/fwlink/?LinkId=</span><span class="mi">733558</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">documentation</span><span class="w"> </span><span class="err">about</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">tasks.json</span><span class="w"> </span><span class="err">format</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"make"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"test-runner"</span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="debugging-rgm-238">Debugging RGM: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>Before diving into the UI integration, let’s discuss how to set breakpoints in RGM. I found it easiest to leverage Microsoft Visual Studio Code’s integration with CMake. By adding the following commits—<a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/fc9a84a78f6d43e24a3edf43917bcf8054b90b16">fc9a84a78f6d43e24a3edf43917bcf8054b90b16</a> and <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/ebc4031dbf0ef4b883a6de1a1835d19c0e330ce0">ebc4031dbf0ef4b883a6de1a1835d19c0e330ce0</a>, I was able to set the build variant to <code class="language-plaintext highlighter-rouge">Debug</code> using the CMake extension from the left panel. After configuring and building, you can debug the <code class="language-plaintext highlighter-rouge">RadialGM-Debug</code> executable.</p>

<h2 id="emake-not-found-238">EMake Not Found: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>While addressing this issue, I undertook a comprehensive refactor of the CMake build system to enhance its functionality. Two specific commits are noteworthy: <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/b01c765404fb91a4d8db3dfe79195b2fc4041af0">b01c765404fb91a4d8db3dfe79195b2fc4041af0</a> and <a href="https://github.com/enigma-dev/enigma-dev/pull/2399/commits/4774b30cc96ef7f993945fa831990b45630d7461">4774b30cc96ef7f993945fa831990b45630d7461</a>.</p>

<p>It was rather silly of me to try to <code class="language-plaintext highlighter-rouge">start</code> a directory instead of an executable! The fix for the EMake not found issue is detailed in this commit: <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/5ec507b1d8ba82d763ad9e09f9ae9d93f8bff98e">5ec507b1d8ba82d763ad9e09f9ae9d93f8bff98e</a>, where I modified the code from:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">process</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">arguments</span><span class="p">);</span>
</code></pre></div></div>

<p>to:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">process</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="n">emakeFileInfo</span><span class="p">.</span><span class="n">filePath</span><span class="p">(),</span> <span class="n">arguments</span><span class="p">);</span>
</code></pre></div></div>

<p>You can also explore my playground project <a href="/gsoc24-blog/assets/qprocesstest.zip">qprocesstest.zip</a>.</p>

<p>Additionally, I made multiple improvements in this commit to address memory leaks and other issues. For instance, I fixed the search paths for the emake executable and introduced a workaround in the build system to relocate all built files to the root of ENIGMA’s submodule, as emake relies on those files. The fix for this can be found in this commit: <a href="https://github.com/enigma-dev/RadialGM/pull/238/commits/3ef991e31893e89bfa868a259142f5502afac6fa">3ef991e31893e89bfa868a259142f5502afac6fa</a>, and I generalized it afterward.</p>

<p>I attempted to run a game, but as expected, it failed. Robert mentioned that he successfully built an empty game with RGM, which is true. He also pointed out that RGM is currently lacking support for extensions that must be passed as CSV data to the server (emake).</p>

<blockquote>
  <p>R0bert — 24/08/2024 20:10</p>
</blockquote>

<blockquote>
  <p>i was able to build an empty game only when i last built the infrastructure
that’s all i can tell ya</p>
</blockquote>

<blockquote>
  <p>R0bert — 25/08/2024 01:23</p>
</blockquote>

<blockquote>
  <p>it should be able to handle real games you just need to add the settings panel for what extensions to enable
i believe i already did the UI for it, just need to convert it to csv string and pass it i think
through plugin api ofc, dont have the server plugin directly read the settings panel, add some signals/slots to the RGMPlugin API class
so it’s decoupled</p>
</blockquote>

<h2 id="nodeeditor-integration-238"><a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> Integration: <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a></h2>

<p>The integration of the shader editor does not require emake to be operational, as it primarily involves GUI components. I also plan to add tests for the shader editor to ensure it functions as expected.</p>

<p>I successfully integrated the <strong>QtNodes</strong> library into RGM without any issues. However, please note that at the time of this writing, there is a known issue regarding the path to the shared library being undefined. To resolve this, you may need to export the path to the shared library in your <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> environment variable. You can do this by running the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/RadialGM/build/lib
</code></pre></div></div>

<blockquote>
  <p>Josh — 01/09/2024 at 18:26</p>
</blockquote>

<blockquote>
  <p>wow, that looks quite beautiful</p>
</blockquote>

<p><img src="/gsoc24-blog/assets/qtnodes-finally-integrated.png" alt="QtNodes Finally Integrated" /></p>

<p>I used the project <a href="/gsoc24-blog/assets/qtnodestest.zip">qtnodestest.zip</a> to test the integration.</p>

<h2 id="rgm-and-enigma">RGM and ENIGMA</h2>

<p>RGM utilizes QProcess technology to invoke the server (emake). This server depends on shared packages that are built by ENIGMA. To facilitate this process, I modified the build system to move the built files to the root of the ENIGMA submodule. Please keep this in mind while developing RGM.</p>

<h2 id="draft---dont-bother-reading-this-section-">Draft - Don’t bother reading this section :)</h2>

<blockquote>
  <p>R0bert — 25/08/2024 19:29</p>
</blockquote>

<blockquote>
  <p>there’s one more thing, there’s a layer above your project that could be future project
@Saif generating 3d models from images…
seems complicated but i assure itd just be what youve done plus a few more layers of surfaces and shaders and abstraction</p>
</blockquote>

<blockquote>
  <p>R0bert — 25/08/2024 19:36</p>
</blockquote>

<blockquote>
  <p>you might mean signed distance fonts by valve, which are similar in concept yes
but they are are for making vectorized fonts
but yes, i know what you mean
i was studying that for enigma too that might be useful later on because im curious if we could vectorize sprites
a huge issue i have is that older games which were sprite based dont scale well on our modern 16:9 and hidpi displays and stuff
vectorizing them could fix a lot of problems
but for ENIGMA, i suck at making sprites, so if there were a tool that could take my poor low-resolution handmade sprites and turn them into beautiful 3d vectors, i would USE IT</p>
</blockquote>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 11 and 12: RGM</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 11 and 12: RGM" /><published>2024-08-04T21:00:00+00:00</published><updated>2024-08-04T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-and-12-rgm.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p><strong>Note:</strong> Before attempting to build gRPC from scratch, please refer to this: <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/08/04/google-summer-of-code-2024-week-11-12-and-13-rgm.html#local-not-needed">Local Not Needed</a>.</p>

<p>The final evaluation work will be available in <a href="https://github.com/enigma-dev/enigma-dev/pull/2399">#2399</a>.</p>

<h2 id="addressing-the-test-runner-issue-on-arch-linux">Addressing the <code class="language-plaintext highlighter-rouge">test-runner</code> Issue on Arch Linux</h2>

<p>As a reminder, I am currently working within my Ubuntu VM because the <code class="language-plaintext highlighter-rouge">test-runner</code> is producing a linking error on Arch Linux. However, I have also encountered linking errors with RGM on both Ubuntu and Arch Linux. Consequently, I have decided to focus on making the <code class="language-plaintext highlighter-rouge">test-runner</code> operational on Arch Linux.</p>

<p>As I previously explained in my post during the <a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html">Google Summer of Code 2024 Bonding Period</a>, the linking error is associated with the failure of <code class="language-plaintext highlighter-rouge">emake</code>. <code class="language-plaintext highlighter-rouge">Emake</code> is the tool used to build games without a GUI, as described by Greg.</p>

<p>This error only occurs on Arch Linux and not on Ubuntu. I suspect that the issue arises from the differences between the older and newer versions of Abseil. It seems that the latest Abseil has introduced new targets that we also need to link. To address this, I reached out to Fares for the versions of Abseil, Protobuf, and gRPC that he uses on Ubuntu, with the intention of using the same versions on Arch:</p>

<ul>
  <li><strong>Abseil:</strong> 20210324.2</li>
  <li><strong>Protobuf:</strong> 3.12.4</li>
  <li><strong>gRPC:</strong> 1.30.2</li>
</ul>

<p>I cloned these specific versions using the <code class="language-plaintext highlighter-rouge">-b</code> option and discovered that Abseil does not yet support a CMake system. Therefore, I decided to pivot and build proper versions of Abseil, Protobuf, and gRPC from scratch.</p>

<p>To facilitate this task, I created a repository called <a href="https://github.com/k0T0z/absl-proto-grpc-ci">absl-proto-grpc-ci</a>. You can find the working versions detailed in the README file, along with the commands in the scripts, which you can run on your machine.</p>

<p>Before installing these libraries locally, make sure to empty the following directories:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/lib/<span class="k">*</span>
<span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/include/<span class="k">*</span>
<span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/bin/<span class="k">*</span>
</code></pre></div></div>

<p>This step ensures the removal of any existing versions of the libraries. Please exercise caution with these commands if you have any locally installed libraries.</p>

<p>Building and installing these libraries is straightforward, and although it took me a couple of days to finalize the process, everything is functioning well now. The only remaining task for this setup is to build <code class="language-plaintext highlighter-rouge">emake</code>.</p>

<h2 id="prioritizing-local-over-system-libraries">Prioritizing Local Over System Libraries</h2>

<p>After successfully installing all the libraries locally and building <code class="language-plaintext highlighter-rouge">emake</code>, I encountered the following warning:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: warning: libprotobuf.so.27.3.0, needed by /usr/local/lib/libgrpc++.so, may conflict with libprotobuf.so.27
</code></pre></div></div>

<p>This warning arises because a version of Protobuf is already installed on the system. When I attempted to remove it using the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-Rns</span> protobuf
</code></pre></div></div>

<p>I received the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checking dependencies...
error: failed to prepare transaction (could not satisfy dependencies)
:: removing protobuf breaks dependency 'protobuf' required by libphonenumber
:: removing protobuf breaks dependency 'libprotobuf.so=27-64' required by libphonenumber
:: removing protobuf breaks dependency 'protobuf' required by protobuf-c
</code></pre></div></div>

<p>Since I cannot remove Protobuf without affecting other packages, I needed to prioritize the local version over the system version. To achieve this, I added the following lines to the <code class="language-plaintext highlighter-rouge">enigma-dev/Config.mk</code> file:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Which search priority to use for libraries (system or local)
</span><span class="nv">CUSTOM_LIB_SEARCH_PRIORITY</span> <span class="o">:=</span> <span class="nb">local</span>

<span class="k">ifeq</span> <span class="nv">($(CUSTOM_LIB_SEARCH_PRIORITY), local)</span>
    <span class="nv">LDFLAGS</span> <span class="o">+=</span> <span class="nt">-L</span>/usr/local/lib
<span class="k">endif</span>
</code></pre></div></div>

<p>With this configuration, you can set the search priority to local by changing the value of <code class="language-plaintext highlighter-rouge">CUSTOM_LIB_SEARCH_PRIORITY</code> to <code class="language-plaintext highlighter-rouge">local</code>.</p>

<h2 id="export-issue">Export Issue</h2>

<p>Another error that has emerged is that the <code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code> is unable to load certain packages:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd <span class="si">$(</span>which grpc_cpp_plugin<span class="si">)</span>
</code></pre></div></div>

<p>The output displays the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; linux-vdso.so.1 (0x000071154c52f000)
&gt; libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000071154c3f5000)
&gt; &lt;span style="color: red;"&gt;libgrpc_plugin_support.so.1.65 =&gt; not found&lt;/span&gt;
&gt; libm.so.6 =&gt; /usr/lib/libm.so.6 (0x000071154c30a000)
&gt; &lt;span style="color: red;"&gt;libprotoc.so.27.3.0 =&gt; not found&lt;/span&gt;
&gt; &lt;span style="color: red;"&gt;libprotobuf.so.27.3.0 =&gt; not found&lt;/span&gt;
&gt; &lt;span style="color: red;"&gt;libabseil_dll.so.2407.0.0 =&gt; not found&lt;/span&gt;
&gt; libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x000071154c000000)
&gt; libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x000071154c2db000)
&gt; libc.so.6 =&gt; /usr/lib/libc.so.6 (0x000071154be14000)
&gt; libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x000071154c2cf000)
&gt; /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000071154c531000)
</code></pre></div></div>

<p>As indicated, there are several libraries marked as <strong>not found</strong>. If you check any of these libraries using <code class="language-plaintext highlighter-rouge">which</code>, you will find them in the <code class="language-plaintext highlighter-rouge">/usr/local/lib</code> directory. To resolve this issue, you need to export the path to these libraries by adding the following line to your <code class="language-plaintext highlighter-rouge">.bashrc</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/lib
</code></pre></div></div>

<p>After making this change, rerun the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd <span class="si">$(</span>which grpc_cpp_plugin<span class="si">)</span>
</code></pre></div></div>

<p>You should see an output similar to the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; linux-vdso.so.1 (0x0000765352968000)
&gt; libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000076535282d000)
&gt; &lt;span style="color: blue;"&gt;libgrpc_plugin_support.so.1.65 =&gt; /usr/local/lib/libgrpc_plugin_support.so.1.65 (0x00007653527a6000)&lt;/span&gt;
&gt; libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007653526bb000)
&gt; &lt;span style="color: blue;"&gt;libprotoc.so.27.3.0 =&gt; /usr/local/lib/libprotoc.so.27.3.0 (0x0000765352200000)&lt;/span&gt;
&gt; &lt;span style="color: blue;"&gt;libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x0000765351e00000)&lt;/span&gt;
&gt; &lt;span style="color: blue;"&gt;libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x0000765351cc7000)&lt;/span&gt;
&gt; libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x0000765351a00000)
&gt; libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007653521d3000)
&gt; libc.so.6 =&gt; /usr/lib/libc.so.6 (0x0000765351814000)
&gt; libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x00007653521c7000)
&gt; /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000076535296a000)
&gt; libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x00007653521a6000)
</code></pre></div></div>

<p>Despite these adjustments, the linking issue persists because we need to link to the new Abseil library.</p>

<p>After performing a clean build, the following error appeared:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/Server.o: undefined reference to symbol 'gpr_inf_future'
/usr/bin/ld: /usr/local/lib/libgpr.so.42: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>This error indicates that the <code class="language-plaintext highlighter-rouge">-lgpr</code> flag is missing from the <code class="language-plaintext highlighter-rouge">LDFLAGS</code> variable. After adding this flag, I encountered another error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/EnigmaPlugin.o: undefined reference to symbol '_ZN4absl12lts_2024072212log_internal15LogMessageFatalC1EPKciSt17basic_string_viewIcSt11char_traitsIcEE'
/usr/bin/ld: /usr/local/lib/libabseil_dll.so.2407.0.0: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>I spent considerable time troubleshooting this error and realized that the new Abseil may require an additional target to be linked. This target is <code class="language-plaintext highlighter-rouge">-labseil_dll</code>.</p>

<p>On August 9, 2024, I updated the <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/Makefile</code>, which resolved the linking issues. Consequently, the tests I wrote on my Ubuntu VM are now passing on my Arch Linux machine.</p>

<h2 id="path-for-grpc_cpp_plugin">Path for <code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code></h2>

<p>If you examine this line in the <a href="https://github.com/enigma-dev/enigma-dev/blob/3590b681f20174ccf24156769d2bbb94b10673e3/shared/protos/CMakeLists.txt#L30">shared/protos/CMakeLists.txt</a>, you will notice that the path to <code class="language-plaintext highlighter-rouge">grpc_cpp_plugin</code> is hardcoded. Since we installed the libraries to <code class="language-plaintext highlighter-rouge">/usr/local</code>, we need to modify this path to <code class="language-plaintext highlighter-rouge">/usr/local/bin/grpc_cpp_plugin</code>.</p>

<p>I have submitted a pull request <a href="https://github.com/enigma-dev/enigma-dev/pull/2387">#2387</a> to address this issue.</p>

<p>You can now include the following line in <code class="language-plaintext highlighter-rouge">RadialGM/CMakeLists.txt</code>:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span><span class="p">(</span>GRPC_EXE <span class="s2">"/usr/local/bin/grpc_cpp_plugin"</span><span class="p">)</span>
</code></pre></div></div>

<p>You can add this to your <code class="language-plaintext highlighter-rouge">settings.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"cmake.configureArgs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"-DGRPC_EXE=/usr/local/bin/grpc_cpp_plugin"</span><span class="w">
</span><span class="p">]</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h2 id="transitioning-to-rgm">Transitioning to RGM</h2>

<p>The next phase involves transitioning to RGM, which utilizes the CMake build system and is powered by Qt5. While running CMake, I encountered the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ 76%] Linking CXX executable emake
/usr/bin/ld: CMakeFiles/emake.dir/EnigmaPlugin.cpp.o: undefined reference to symbol '_ZN4absl12lts_2024072212log_internal15LogMessageFatalC1EPKciSt17basic_string_viewIcSt11char_traitsIcEE'
/usr/bin/ld: /usr/local/lib/libabseil_dll.so.2407.0.0: error adding symbols: DSO missing from command line
</code></pre></div></div>

<p>The issue again pertains to Abseil. To resolve this, I need to replicate the change I made in <code class="language-plaintext highlighter-rouge">enigma-dev/CommandLine/emake/Makefile</code> within the <code class="language-plaintext highlighter-rouge">RadialGM/Submodules/enigma-dev/CommandLine/emake/CMakeLists.txt</code> file, but in a CMake-friendly manner:</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Find Abseil</span>
<span class="nb">find_package</span><span class="p">(</span>absl CONFIG REQUIRED<span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">CLI_TARGET</span><span class="si">}</span> PRIVATE absl::base absl::strings absl::synchronization absl::time absl::status absl::statusor<span class="p">)</span>
</code></pre></div></div>

<h2 id="building-rgm">Building RGM</h2>

<p>With the linking of <code class="language-plaintext highlighter-rouge">emake</code> now successfully completed, I can leave my Ubuntu VM and return to my Arch Linux machine to proceed with building RGM.</p>

<p>However, Robert merged a recent pull request without ensuring CI checks, resulting in several clean-up tasks necessary for RGM to build correctly. I submitted pull request <a href="https://github.com/enigma-dev/RadialGM/pull/238">#238</a> to address these issues.</p>

<p>This pull request includes several important changes:</p>

<ul>
  <li>Linking the <a href="https://github.com/k0T0z/nodeeditor">nodeeditor</a> library to RGM.</li>
  <li>Implementing multiple fixes to the Room Editor.</li>
  <li>Enhancing the Server Plugin.</li>
  <li>Making various improvements to the CMake build system.</li>
</ul>

<p>As of August 13, 2024, RGM can now be built without any issues.</p>

<h2 id="runtime-challenges">Runtime Challenges</h2>

<p>While RGM can now be built successfully, additional challenges persist. Upon attempting to run RGM, I encountered the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./RadialGM: error while loading shared libraries: libEGM.so: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>To investigate further, I ran the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd RadialGM
</code></pre></div></div>

<blockquote>
  <p>linux-vdso.so.1 (0x0000796337afc000)
libpugixml.so.1 =&gt; /usr/lib/libpugixml.so.1 (0x0000796337a96000)
libyaml-cpp.so.0.8 =&gt; /usr/lib/libyaml-cpp.so.0.8 (0x00007963377b1000)
libgrpc++.so.1.65 =&gt; /usr/local/lib/libgrpc++.so.1.65 (0x00007963376b9000)
libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x0000796337200000)
libssl.so.3 =&gt; /usr/lib/libssl.so.3 (0x00007963375df000)
libcrypto.so.3 =&gt; /usr/lib/libcrypto.so.3 (0x0000796336c00000)
libQt5PrintSupport.so.5 =&gt; /usr/lib/libQt5PrintSupport.so.5 (0x0000796337571000)
libQt5Multimedia.so.5 =&gt; /usr/lib/libQt5Multimedia.so.5 (0x0000796337104000)
<span style="color: red;">libEGM.so =&gt; not found</span>
<span style="color: red;">libENIGMAShared.so =&gt; not found</span>
libfreetype.so.6 =&gt; /usr/lib/libfreetype.so.6 (0x0000796336b37000)
libjpeg.so.8 =&gt; /usr/lib/libjpeg.so.8 (0x0000796336a9b000)
libharfbuzz.so.0 =&gt; /usr/lib/libharfbuzz.so.0 (0x0000796336981000)
libpcre2-16.so.0 =&gt; /usr/lib/libpcre2-16.so.0 (0x00007963368ef000)
libdouble-conversion.so.3 =&gt; /usr/lib/libdouble-conversion.so.3 (0x000079633755a000)
libgrpc.so.42 =&gt; /usr/local/lib/libgrpc.so.42 (0x0000796335e00000)
libgpr.so.42 =&gt; /usr/local/lib/libgpr.so.42 (0x000079633753c000)
libupb_json_lib.so.42 =&gt; /usr/local/lib/libupb_json_lib.so.42 (0x000079633750f000)
libupb_textformat_lib.so.42 =&gt; /usr/local/lib/libupb_textformat_lib.so.42 (0x00007963370df000)
libutf8_range_lib.so.42 =&gt; /usr/local/lib/libutf8_range_lib.so.42 (0x0000796337a8b000)
libupb_message_lib.so.42 =&gt; /usr/local/lib/libupb_message_lib.so.42 (0x0000796337a80000)
libupb_base_lib.so.42 =&gt; /usr/local/lib/libupb_base_lib.so.42 (0x000079633750a000)
libupb_mem_lib.so.42 =&gt; /usr/local/lib/libupb_mem_lib.so.42 (0x0000796337505000)
libre2.so.9 =&gt; /usr/local/lib/libre2.so.9 (0x0000796336862000)
libssl.so =&gt; /usr/local/lib/libssl.so (0x0000796335d90000)
libcrypto.so =&gt; /usr/local/lib/libcrypto.so (0x0000796335a00000)
libaddress_sorting.so.42 =&gt; /usr/local/lib/libaddress_sorting.so.42 (0x00007963370da000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x0000796335c9d000)
libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x00007963358c7000)
libQt5Widgets.so.5 =&gt; /usr/lib/libQt5Widgets.so.5 (0x0000796335200000)
libQt5Gui.so.5 =&gt; /usr/lib/libQt5Gui.so.5 (0x0000796334a00000)
libQt5Network.so.5 =&gt; /usr/lib/libQt5Network.so.5 (0x0000796335094000)
libQt5Core.so.5 =&gt; /usr/lib/libQt5Core.so.5 (0x0000796334400000)
<span style="color: red;">libProtocols.so =&gt; not found</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x0000796334000000)
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x0000796334315000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x0000796335c70000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x0000796333e14000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x0000796337afe000)
libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x0000796336843000)
libpulse.so.0 =&gt; /usr/lib/libpulse.so.0 (0x0000796335c1b000)
libbz2.so.1.0 =&gt; /usr/lib/libbz2.so.1.0 (0x00007963358b4000)
libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x00007963349c6000)
libbrotlidec.so.1 =&gt; /usr/lib/libbrotlidec.so.1 (0x0000796335c0c000)
libglib-2.0.so.0 =&gt; /usr/lib/libglib-2.0.so.0 (0x0000796333cc6000)
libgraphite2.so.3 =&gt; /usr/lib/libgraphite2.so.3 (0x00007963349a4000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x00007963358a8000)
libGL.so.1 =&gt; /usr/lib/libGL.so.1 (0x000079633428f000)
libmd4c.so.0 =&gt; /usr/lib/libmd4c.so.0 (0x000079633498e000)
libgssapi_krb5.so.2 =&gt; /usr/lib/libgssapi_krb5.so.2 (0x000079633493a000)
libproxy.so.1 =&gt; /usr/lib/libproxy.so.1 (0x000079633683e000)
libicui18n.so.75 =&gt; /usr/lib/libicui18n.so.75 (0x0000796333800000)
libicuuc.so.75 =&gt; /usr/lib/libicuuc.so.75 (0x0000796333606000)
libzstd.so.1 =&gt; /usr/lib/libzstd.so.1 (0x0000796333be7000)
libpulsecommon-17.0.so =&gt; /usr/lib/pulseaudio/libpulsecommon-17.0.so (0x000079633357f000)
libdbus-1.so.3 =&gt; /usr/lib/libdbus-1.so.3 (0x0000796333b96000)
libbrotlicommon.so.1 =&gt; /usr/lib/libbrotlicommon.so.1 (0x000079633355c000)
libpcre2-8.so.0 =&gt; /usr/lib/libpcre2-8.so.0 (0x00007963334bd000)
libGLdispatch.so.0 =&gt; /usr/lib/libGLdispatch.so.0 (0x0000796333405000)
libGLX.so.0 =&gt; /usr/lib/libGLX.so.0 (0x00007963333d3000)
libkrb5.so.3 =&gt; /usr/lib/libkrb5.so.3 (0x00007963332fb000)
libk5crypto.so.3 =&gt; /usr/lib/libk5crypto.so.3 (0x00007963332cd000)
libcom_err.so.2 =&gt; /usr/lib/libcom_err.so.2 (0x00007963358a2000)
libkrb5support.so.0 =&gt; /usr/lib/libkrb5support.so.0 (0x0000796335086000)
libkeyutils.so.1 =&gt; /usr/lib/libkeyutils.so.1 (0x0000796334288000)
libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x0000796333b84000)
libpxbackend-1.0.so =&gt; /usr/lib/libproxy/libpxbackend-1.0.so (0x00007963332be000)
libgobject-2.0.so.0 =&gt; /usr/lib/libgobject-2.0.so.0 (0x000079633325f000)
libicudata.so.75 =&gt; /usr/lib/libicudata.so.75 (0x0000796331400000)
libsndfile.so.1 =&gt; /usr/lib/libsndfile.so.1 (0x00007963331d8000)
libxcb.so.1 =&gt; /usr/lib/libxcb.so.1 (0x00007963331ad000)
libasyncns.so.0 =&gt; /usr/lib/libasyncns.so.0 (0x0000796333b7c000)
libX11.so.6 =&gt; /usr/lib/libX11.so.6 (0x00007963312c2000)
libcurl.so.4 =&gt; /usr/lib/libcurl.so.4 (0x00007963311fb000)
libgio-2.0.so.0 =&gt; /usr/lib/libgio-2.0.so.0 (0x000079633102e000)
libduktape.so.207 =&gt; /usr/lib/libduktape.so.207 (0x0000796333160000)
libffi.so.8 =&gt; /usr/lib/libffi.so.8 (0x0000796333155000)
libogg.so.0 =&gt; /usr/lib/libogg.so.0 (0x0000796331024000)
libvorbisenc.so.2 =&gt; /usr/lib/libvorbisenc.so.2 (0x0000796330f79000)
libFLAC.so.12 =&gt; /usr/lib/libFLAC.so.12 (0x0000796330f33000)
libopus.so.0 =&gt; /usr/lib/libopus.so.0 (0x0000796330a00000)
libmpg123.so.0 =&gt; /usr/lib/libmpg123.so.0 (0x00007963309a5000)
libmp3lame.so.0 =&gt; /usr/lib/libmp3lame.so.0 (0x000079633092d000)
libvorbis.so.0 =&gt; /usr/lib/libvorbis.so.0 (0x00007963308ff000)
libXau.so.6 =&gt; /usr/lib/libXau.so.6 (0x0000796335081000)
libXdmcp.so.6 =&gt; /usr/lib/libXdmcp.so.6 (0x0000796330f2b000)
libnghttp3.so.9 =&gt; /usr/lib/libnghttp3.so.9 (0x00007963308dc000)
libnghttp2.so.14 =&gt; /usr/lib/libnghttp2.so.14 (0x00007963308b2000)
libidn2.so.0 =&gt; /usr/lib/libidn2.so.0 (0x0000796330890000)
libssh2.so.1 =&gt; /usr/lib/libssh2.so.1 (0x0000796330847000)
libpsl.so.5 =&gt; /usr/lib/libpsl.so.5 (0x0000796330833000)
libgmodule-2.0.so.0 =&gt; /usr/lib/libgmodule-2.0.so.0 (0x0000796330f24000)
libmount.so.1 =&gt; /usr/lib/libmount.so.1 (0x00007963307e4000)
libunistring.so.5 =&gt; /usr/lib/libunistring.so.5 (0x0000796330634000)
libblkid.so.1 =&gt; /usr/lib/libblkid.so.1 (0x00007963305fb000)</p>
</blockquote>

<p>The output indicated that the missing libraries are all related to <code class="language-plaintext highlighter-rouge">enigma-dev</code>. To rectify this, I need to export the path to these libraries by adding the following line to my <code class="language-plaintext highlighter-rouge">.bashrc</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/path/to/RadialGM/Submodules/enigma-dev
</code></pre></div></div>

<p><em>Note: Remember to replace <code class="language-plaintext highlighter-rouge">/path/to</code> with the actual path to your libraries.</em></p>

<blockquote>
  <p>linux-vdso.so.1 (0x000078394efc5000)
libpugixml.so.1 =&gt; /usr/lib/libpugixml.so.1 (0x000078394ef5f000)
libyaml-cpp.so.0.8 =&gt; /usr/lib/libyaml-cpp.so.0.8 (0x000078394ef10000)
libgrpc++.so.1.65 =&gt; /usr/local/lib/libgrpc++.so.1.65 (0x000078394eb08000)
libprotobuf.so.27.3.0 =&gt; /usr/local/lib/libprotobuf.so.27.3.0 (0x000078394e800000)
libssl.so.3 =&gt; /usr/lib/libssl.so.3 (0x000078394e726000)
libcrypto.so.3 =&gt; /usr/lib/libcrypto.so.3 (0x000078394e200000)
libQt5PrintSupport.so.5 =&gt; /usr/lib/libQt5PrintSupport.so.5 (0x000078394eea0000)
libQt5Multimedia.so.5 =&gt; /usr/lib/libQt5Multimedia.so.5 (0x000078394e104000)
<span style="color: blue;">libEGM.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/CommandLine/libEGM/libEGM.so (0x000078394de00000)</span>
<span style="color: blue;">libENIGMAShared.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/shared/libENIGMAShared.so (0x000078394dd39000)</span>
libfreetype.so.6 =&gt; /usr/lib/libfreetype.so.6 (0x000078394dc70000)
libjpeg.so.8 =&gt; /usr/lib/libjpeg.so.8 (0x000078394dbd4000)
libharfbuzz.so.0 =&gt; /usr/lib/libharfbuzz.so.0 (0x000078394daba000)
libpcre2-16.so.0 =&gt; /usr/lib/libpcre2-16.so.0 (0x000078394da28000)
libdouble-conversion.so.3 =&gt; /usr/lib/libdouble-conversion.so.3 (0x000078394ee87000)
libgrpc.so.42 =&gt; /usr/local/lib/libgrpc.so.42 (0x000078394ce00000)
libgpr.so.42 =&gt; /usr/local/lib/libgpr.so.42 (0x000078394e708000)
libupb_json_lib.so.42 =&gt; /usr/local/lib/libupb_json_lib.so.42 (0x000078394e6db000)
libupb_textformat_lib.so.42 =&gt; /usr/local/lib/libupb_textformat_lib.so.42 (0x000078394da03000)
libutf8_range_lib.so.42 =&gt; /usr/local/lib/libutf8_range_lib.so.42 (0x000078394ee80000)
libupb_message_lib.so.42 =&gt; /usr/local/lib/libupb_message_lib.so.42 (0x000078394e6d0000)
libupb_base_lib.so.42 =&gt; /usr/local/lib/libupb_base_lib.so.42 (0x000078394e0ff000)
libupb_mem_lib.so.42 =&gt; /usr/local/lib/libupb_mem_lib.so.42 (0x000078394e0fa000)
libre2.so.9 =&gt; /usr/local/lib/libre2.so.9 (0x000078394d976000)
libssl.so =&gt; /usr/local/lib/libssl.so (0x000078394d906000)
libcrypto.so =&gt; /usr/local/lib/libcrypto.so (0x000078394ca00000)
libaddress_sorting.so.42 =&gt; /usr/local/lib/libaddress_sorting.so.42 (0x000078394e0f5000)
libsystemd.so.0 =&gt; /usr/lib/libsystemd.so.0 (0x000078394cd0d000)
libabseil_dll.so.2407.0.0 =&gt; /usr/local/lib/libabseil_dll.so.2407.0.0 (0x000078394c8c7000)
libQt5Widgets.so.5 =&gt; /usr/lib/libQt5Widgets.so.5 (0x000078394c200000)
libQt5Gui.so.5 =&gt; /usr/lib/libQt5Gui.so.5 (0x000078394ba00000)
libQt5Network.so.5 =&gt; /usr/lib/libQt5Network.so.5 (0x000078394c094000)
libQt5Core.so.5 =&gt; /usr/lib/libQt5Core.so.5 (0x000078394b400000)
<span style="color: blue;">libProtocols.so =&gt; /home/k0t0z/Desktop/gsoc24/RadialGM/build/Submodules/enigma-dev/shared/protos/libProtocols.so (0x000078394b000000)</span>
libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x000078394ac00000)
libm.so.6 =&gt; /usr/lib/libm.so.6 (0x000078394cc22000)
libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x000078394d8d9000)
libc.so.6 =&gt; /usr/lib/libc.so.6 (0x000078394aa14000)
/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x000078394efc7000)
libz.so.1 =&gt; /usr/local/lib/libz.so.1 (0x000078394d8ba000)
libpulse.so.0 =&gt; /usr/lib/libpulse.so.0 (0x000078394d863000)
libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x000078394b9c6000)
libbz2.so.1.0 =&gt; /usr/lib/libbz2.so.1.0 (0x000078394d850000)
libbrotlidec.so.1 =&gt; /usr/lib/libbrotlidec.so.1 (0x000078394d841000)
libglib-2.0.so.0 =&gt; /usr/lib/libglib-2.0.so.0 (0x000078394b2b2000)
libgraphite2.so.3 =&gt; /usr/lib/libgraphite2.so.3 (0x000078394c8a5000)
libcap.so.2 =&gt; /usr/lib/libcap.so.2 (0x000078394cc16000)
libGL.so.1 =&gt; /usr/lib/libGL.so.1 (0x000078394b940000)
libmd4c.so.0 =&gt; /usr/lib/libmd4c.so.0 (0x000078394b29c000)
libgssapi_krb5.so.2 =&gt; /usr/lib/libgssapi_krb5.so.2 (0x000078394b248000)
libproxy.so.1 =&gt; /usr/lib/libproxy.so.1 (0x000078394cc11000)
libicui18n.so.75 =&gt; /usr/lib/libicui18n.so.75 (0x000078394a600000)
libicuuc.so.75 =&gt; /usr/lib/libicuuc.so.75 (0x000078394a406000)
libzstd.so.1 =&gt; /usr/lib/libzstd.so.1 (0x000078394af21000)
libgrpc++_unsecure.so.1.65 =&gt; /usr/local/lib/libgrpc++_unsecure.so.1.65 (0x000078394ae94000)
libpulsecommon-17.0.so =&gt; /usr/lib/pulseaudio/libpulsecommon-17.0.so (0x000078394a98d000)
libdbus-1.so.3 =&gt; /usr/lib/libdbus-1.so.3 (0x000078394a3b5000)
libbrotlicommon.so.1 =&gt; /usr/lib/libbrotlicommon.so.1 (0x000078394b225000)
libpcre2-8.so.0 =&gt; /usr/lib/libpcre2-8.so.0 (0x000078394a316000)
libGLdispatch.so.0 =&gt; /usr/lib/libGLdispatch.so.0 (0x000078394a25e000)
libGLX.so.0 =&gt; /usr/lib/libGLX.so.0 (0x000078394a22c000)
libkrb5.so.3 =&gt; /usr/lib/libkrb5.so.3 (0x000078394a154000)
libk5crypto.so.3 =&gt; /usr/lib/libk5crypto.so.3 (0x000078394a126000)
libcom_err.so.2 =&gt; /usr/lib/libcom_err.so.2 (0x000078394c89f000)
libkrb5support.so.0 =&gt; /usr/lib/libkrb5support.so.0 (0x000078394c086000)
libkeyutils.so.1 =&gt; /usr/lib/libkeyutils.so.1 (0x000078394b939000)
libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x000078394a114000)
libpxbackend-1.0.so =&gt; /usr/lib/libproxy/libpxbackend-1.0.so (0x000078394ae85000)
libgobject-2.0.so.0 =&gt; /usr/lib/libgobject-2.0.so.0 (0x000078394a0b5000)
libicudata.so.75 =&gt; /usr/lib/libicudata.so.75 (0x0000783948200000)
libgrpc_unsecure.so.42 =&gt; /usr/local/lib/libgrpc_unsecure.so.42 (0x0000783947a00000)
libsndfile.so.1 =&gt; /usr/lib/libsndfile.so.1 (0x000078394a02e000)
libxcb.so.1 =&gt; /usr/lib/libxcb.so.1 (0x000078394a003000)
libasyncns.so.0 =&gt; /usr/lib/libasyncns.so.0 (0x000078394a985000)
libX11.so.6 =&gt; /usr/lib/libX11.so.6 (0x00007839480c2000)
libcurl.so.4 =&gt; /usr/lib/libcurl.so.4 (0x0000783947939000)
libgio-2.0.so.0 =&gt; /usr/lib/libgio-2.0.so.0 (0x000078394776c000)
libduktape.so.207 =&gt; /usr/lib/libduktape.so.207 (0x0000783949fb6000)
libffi.so.8 =&gt; /usr/lib/libffi.so.8 (0x0000783949fab000)
libogg.so.0 =&gt; /usr/lib/libogg.so.0 (0x0000783949fa1000)
libvorbisenc.so.2 =&gt; /usr/lib/libvorbisenc.so.2 (0x00007839476c1000)
libFLAC.so.12 =&gt; /usr/lib/libFLAC.so.12 (0x0000783949f5b000)
libopus.so.0 =&gt; /usr/lib/libopus.so.0 (0x0000783947000000)
libmpg123.so.0 =&gt; /usr/lib/libmpg123.so.0 (0x0000783947666000)
libmp3lame.so.0 =&gt; /usr/lib/libmp3lame.so.0 (0x00007839475ee000)
libvorbis.so.0 =&gt; /usr/lib/libvorbis.so.0 (0x00007839475c0000)
libXau.so.6 =&gt; /usr/lib/libXau.so.6 (0x000078394a980000)
libXdmcp.so.6 =&gt; /usr/lib/libXdmcp.so.6 (0x0000783949f53000)
libnghttp3.so.9 =&gt; /usr/lib/libnghttp3.so.9 (0x000078394759d000)
libnghttp2.so.14 =&gt; /usr/lib/libnghttp2.so.14 (0x0000783947573000)
libidn2.so.0 =&gt; /usr/lib/libidn2.so.0 (0x0000783947551000)
libssh2.so.1 =&gt; /usr/lib/libssh2.so.1 (0x0000783946fb7000)
libpsl.so.5 =&gt; /usr/lib/libpsl.so.5 (0x00007839480ae000)
libgmodule-2.0.so.0 =&gt; /usr/lib/libgmodule-2.0.so.0 (0x00007839480a7000)
libmount.so.1 =&gt; /usr/lib/libmount.so.1 (0x0000783946f68000)
libunistring.so.5 =&gt; /usr/lib/libunistring.so.5 (0x0000783946db8000)
libblkid.so.1 =&gt; /usr/lib/libblkid.so.1 (0x0000783946d7f000)</p>
</blockquote>

<p>With this adjustment, everything appeared to be in order. However, another issue arose when attempting to run RGM:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1723829087.769865   68641 metrics.cc:49] Metric name grpc.lb.wrr.rr_fallback has already been registered.
Aborted (core dumped)
</code></pre></div></div>

<p>This error message, while not particularly helpful, indicated a deeper issue. Robert suggested that I proceed without linking gRPC and focus on developing the UI portion independently of the engine. Although RGM built successfully without gRPC, resolving this gRPC issue remains crucial for enabling communication between RGM and <code class="language-plaintext highlighter-rouge">emake</code>.</p>

<p><img src="/gsoc24-blog/assets/gsoc24-rgm-without-grpc.png" alt="GSoC 2024 RGM Without gRPC" /></p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 10: Midterm Evaluation</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 10: Midterm Evaluation" /><published>2024-07-28T21:00:00+00:00</published><updated>2024-07-28T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/28/google-summer-of-code-2024-week-10-midterm-evaluation.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>As mentioned in my previous blog post, I am currently working at a slower pace due to my preparations for my master’s program and military service. Josh and Greg have kindly given me some leeway, despite my limited progress. I would like to extend my gratitude to them for their understanding. Below is my midterm feedback, an overview of the work completed so far, and the rationale behind it.</p>

<h2 id="midterm-2024-evaluation-feedback">Midterm 2024 Evaluation Feedback</h2>

<p><img src="/gsoc24-blog/assets/midterm-2024-evaluation-feedback.png" alt="Midterm 2024 Evaluation Feedback" /></p>

<h2 id="summary">Summary</h2>

<p>The midterm work can be found in PR #2397.</p>

<p>In my proposal, I stated that I would have the generator ready by the midterm evaluation, and I’m pleased to report that it is in good shape now. The generator will undergo further refactoring during the Rendering and Machine Learning phases. In these next two phases, I plan to enhance the generator’s compatibility with ENIGMA’s Graphics System and integrate the Genetic Algorithm for machine learning. The work accomplished on the generator can be summarized as follows:</p>

<h3 id="constants-operators-and-functions">Constants, Operators, and Functions</h3>

<p>The implementation supports all essential constants, operators, and functions. <strong>Constants</strong> include data types such as <code class="language-plaintext highlighter-rouge">float</code>, <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">uint</code>, <code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, and <code class="language-plaintext highlighter-rouge">vec4</code>. <strong>Operators</strong> encompass arithmetic, logical, and bitwise operations. <strong>Functions</strong> cover a range of mathematical operations, including trigonometric, exponential, logarithmic, and other relevant functions. Both scalar and vector operations are supported, with the types of operations and functions depending on the operands involved.</p>

<h4 id="operations-by-type">Operations by Type:</h4>

<ul>
  <li><strong>Float Operations</strong>: <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">mod</code>, <code class="language-plaintext highlighter-rouge">pow</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">atan</code>, and <code class="language-plaintext highlighter-rouge">step</code>.</li>
  <li><strong>Integer Operations</strong>: <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">%</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">&amp;</code>, <code class="language-plaintext highlighter-rouge">|</code>, <code class="language-plaintext highlighter-rouge">^</code>, <code class="language-plaintext highlighter-rouge">&lt;&lt;</code>, and <code class="language-plaintext highlighter-rouge">&gt;&gt;</code>.</li>
  <li><strong>Unsigned Integer Operations</strong>: Identical to integer operations.</li>
  <li><strong>Vector Operations</strong> (<code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, <code class="language-plaintext highlighter-rouge">vec4</code>): <code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">mod</code>, <code class="language-plaintext highlighter-rouge">pow</code>, <code class="language-plaintext highlighter-rouge">max</code>, <code class="language-plaintext highlighter-rouge">min</code>, <code class="language-plaintext highlighter-rouge">cross</code>, <code class="language-plaintext highlighter-rouge">atan2</code>, and <code class="language-plaintext highlighter-rouge">reflect</code>. Note that <code class="language-plaintext highlighter-rouge">cross</code> is applicable only for <code class="language-plaintext highlighter-rouge">vec3</code> types.</li>
</ul>

<h4 id="functions-by-type">Functions by Type:</h4>

<ul>
  <li><strong>Float Functions</strong>:
    <ul>
      <li>Trigonometric: <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">cos</code>, <code class="language-plaintext highlighter-rouge">tan</code>, <code class="language-plaintext highlighter-rouge">asin</code>, <code class="language-plaintext highlighter-rouge">acos</code>, <code class="language-plaintext highlighter-rouge">atan</code></li>
      <li>Hyperbolic: <code class="language-plaintext highlighter-rouge">sinh</code>, <code class="language-plaintext highlighter-rouge">cosh</code>, <code class="language-plaintext highlighter-rouge">tanh</code></li>
      <li>Logarithmic: <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">sqrt</code></li>
      <li>Miscellaneous: <code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">sign</code>, <code class="language-plaintext highlighter-rouge">floor</code>, <code class="language-plaintext highlighter-rouge">round</code>, <code class="language-plaintext highlighter-rouge">ceil</code>, <code class="language-plaintext highlighter-rouge">fract</code>, <code class="language-plaintext highlighter-rouge">saturate</code>, <code class="language-plaintext highlighter-rouge">negate</code>, <code class="language-plaintext highlighter-rouge">acosh</code>, <code class="language-plaintext highlighter-rouge">asinh</code>, <code class="language-plaintext highlighter-rouge">atanh</code>, <code class="language-plaintext highlighter-rouge">degrees</code>, <code class="language-plaintext highlighter-rouge">exp2</code>, <code class="language-plaintext highlighter-rouge">inverse_sqrt</code>, <code class="language-plaintext highlighter-rouge">log2</code>, <code class="language-plaintext highlighter-rouge">radians</code>, <code class="language-plaintext highlighter-rouge">reciprocal</code>, <code class="language-plaintext highlighter-rouge">roundeven</code>, <code class="language-plaintext highlighter-rouge">trunc</code>, and <code class="language-plaintext highlighter-rouge">oneminus</code>.</li>
    </ul>
  </li>
  <li>
    <p><strong>Integer Functions</strong>: <code class="language-plaintext highlighter-rouge">abs</code>, <code class="language-plaintext highlighter-rouge">-1 *</code>, <code class="language-plaintext highlighter-rouge">sign</code>, and <code class="language-plaintext highlighter-rouge">~</code>.</p>
  </li>
  <li>
    <p><strong>Unsigned Integer Functions</strong>: <code class="language-plaintext highlighter-rouge">-1 *</code> and <code class="language-plaintext highlighter-rouge">~</code>.</p>
  </li>
  <li><strong>Vector Functions</strong> (<code class="language-plaintext highlighter-rouge">vec2</code>, <code class="language-plaintext highlighter-rouge">vec3</code>, <code class="language-plaintext highlighter-rouge">vec4</code>):
    <ul>
      <li>Common: <code class="language-plaintext highlighter-rouge">normalize</code>, <code class="language-plaintext highlighter-rouge">saturate</code>, <code class="language-plaintext highlighter-rouge">negate</code>, <code class="language-plaintext highlighter-rouge">reciprocal</code>, <code class="language-plaintext highlighter-rouge">abs</code></li>
      <li>Trigonometric: <code class="language-plaintext highlighter-rouge">acos</code>, <code class="language-plaintext highlighter-rouge">acosh</code>, <code class="language-plaintext highlighter-rouge">asin</code>, <code class="language-plaintext highlighter-rouge">asinh</code>, <code class="language-plaintext highlighter-rouge">atan</code>, <code class="language-plaintext highlighter-rouge">atanh</code></li>
      <li>Rounding: <code class="language-plaintext highlighter-rouge">ceil</code>, <code class="language-plaintext highlighter-rouge">cos</code>, <code class="language-plaintext highlighter-rouge">cosh</code>, <code class="language-plaintext highlighter-rouge">degrees</code>, <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">exp2</code>, <code class="language-plaintext highlighter-rouge">floor</code>, <code class="language-plaintext highlighter-rouge">fract</code>, <code class="language-plaintext highlighter-rouge">inverse_sqrt</code>, <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">log2</code>, <code class="language-plaintext highlighter-rouge">radians</code>, <code class="language-plaintext highlighter-rouge">round</code>, <code class="language-plaintext highlighter-rouge">roundeven</code>, <code class="language-plaintext highlighter-rouge">sign</code>, <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">sinh</code>, <code class="language-plaintext highlighter-rouge">sqrt</code>, <code class="language-plaintext highlighter-rouge">tan</code>, <code class="language-plaintext highlighter-rouge">tanh</code>, <code class="language-plaintext highlighter-rouge">trunc</code>, and <code class="language-plaintext highlighter-rouge">oneminus</code>.</li>
    </ul>
  </li>
</ul>

<h3 id="special-nodes">Special Nodes</h3>

<p>Several important nodes have been implemented for the AI Agent, including:</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">dot</code></strong>: Computes the dot product of two vectors.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">length</code></strong>: Calculates the length of a vector.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">clamp</code></strong>: Restricts a value within a specified minimum and maximum range.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">derivative</code></strong>: Computes the derivative of a value.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">step</code></strong>: Implements the step function.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smoothstep</code></strong>: Implements the smoothstep function.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">distance</code></strong>: Calculates the distance between two points.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">mix</code></strong>: Linearly interpolates between two values.</li>
</ul>

<h3 id="logic-nodes">Logic Nodes</h3>

<p>The implementation includes several logic nodes for the AI Agent, such as <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">switch</code>, <code class="language-plaintext highlighter-rouge">is</code>, and <code class="language-plaintext highlighter-rouge">compare</code>.</p>

<h3 id="filters">Filters</h3>

<p>Most notably, the generator supports various filters, including noise filters. Currently, it includes <strong>Value Noise</strong> as its primary option.</p>

<h2 id="work-to-be-done">Work To Be Done</h2>

<p>As I outlined in my previous post, “<a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod: Most Important Operations in the Generator</a>,” many nodes will undergo modifications during the Rendering and Machine Learning phases.</p>

<p>Additionally, there are several enhancements that would be beneficial for the project. One such enhancement is the support for comments within the shader code, as well as the implementation of loops.</p>

<p>Furthermore, integrating a node editor library into RGM is an essential task. This integration will facilitate the creation of larger and more complex graphs, improving overall functionality and usability.</p>

<h2 id="working-example">Working Example</h2>

<p>I have developed a working example for the Value Noise filter, which is the same example I referenced in my proposal. Below are the graph representation and the generated code for this implementation:</p>

<p><img src="/gsoc24-blog/assets/godot-visual-shader-value-noise-filter-graph-example.png" alt="Godot Visual Shader Value Noise Filter Graph Example" /></p>

<figure class="highlight"><pre><code class="language-glsl" data-lang="glsl"><span class="k">in</span> <span class="kt">vec2</span> <span class="n">TexCoord</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">float</span> <span class="n">uTime</span><span class="p">;</span>
<span class="kt">float</span> <span class="nf">noise_random_value</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">fract</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">12</span><span class="p">.</span><span class="mi">9898</span><span class="p">,</span> <span class="mi">78</span><span class="p">.</span><span class="mi">233</span><span class="p">)))</span><span class="o">*</span><span class="mi">43758</span><span class="p">.</span><span class="mi">5453</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">noise_interpolate</span><span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">,</span> <span class="kt">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">t</span><span class="p">)</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="p">(</span><span class="n">t</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="nf">value_noise</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">vec2</span> <span class="n">i</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
	<span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">*</span> <span class="n">f</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">f</span><span class="p">);</span>
	
	<span class="n">uv</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">)</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c0</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">vec2</span> <span class="n">c3</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r0</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c0</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c1</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c2</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">r3</span> <span class="o">=</span> <span class="n">noise_random_value</span><span class="p">(</span><span class="n">c3</span><span class="p">);</span>
	
	<span class="kt">float</span> <span class="n">bottom_of_grid</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">r0</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">top_of_grid</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="n">noise_interpolate</span><span class="p">(</span><span class="n">bottom_of_grid</span><span class="p">,</span> <span class="n">top_of_grid</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">generate_value_noise_float</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scale</span><span class="p">,</span> <span class="k">out</span> <span class="kt">float</span> <span class="n">out_buffer</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
	
	<span class="kt">float</span> <span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
	<span class="kt">float</span> <span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">0</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
	<span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">freq</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
	<span class="n">amp</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">2</span><span class="p">));</span>
	<span class="n">t</span> <span class="o">+=</span> <span class="n">value_noise</span><span class="p">(</span><span class="kt">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="n">scale</span><span class="o">/</span><span class="n">freq</span><span class="p">))</span><span class="o">*</span><span class="n">amp</span><span class="p">;</span>
	
	<span class="n">out_buffer</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">out</span> <span class="kt">vec4</span> <span class="n">FragColor</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// Input:1</span>
	<span class="kt">vec2</span> <span class="n">var_from_n1_p0</span> <span class="o">=</span> <span class="n">TexCoord</span><span class="p">;</span>

<span class="c1">// ValueNoise:4</span>
	<span class="c1">// Value Noise</span>
	<span class="kt">float</span> <span class="n">out_buffer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
	<span class="n">generate_value_noise_float</span><span class="p">(</span><span class="n">var_from_n1_p0</span><span class="p">,</span> <span class="mi">100</span><span class="p">.</span><span class="mo">000000</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">);</span>
	<span class="kt">vec4</span> <span class="n">var_from_n4_p0</span> <span class="o">=</span> <span class="kt">vec4</span><span class="p">(</span><span class="n">out_buffer</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">,</span> <span class="n">out_buffer</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
	
<span class="c1">// Input:2</span>
	<span class="kt">float</span> <span class="n">var_from_n2_p0</span> <span class="o">=</span> <span class="n">uTime</span><span class="p">;</span>

<span class="c1">// FloatFunc:3</span>
	<span class="kt">float</span> <span class="n">var_from_n3_p0</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">var_from_n2_p0</span><span class="p">);</span>

<span class="c1">// FloatOp:5</span>
	<span class="kt">float</span> <span class="n">var_from_n5_p0</span> <span class="o">=</span> <span class="n">var_from_n4_p0</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">var_from_n3_p0</span><span class="p">;</span>

<span class="c1">// Output:0</span>
	<span class="n">FragColor</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="n">var_from_n5_p0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Of course I can’t show you any GUI work because I am not there yet. The above picture is from Godot Engine’s Visual Shader Editor. Also, note that Godot uses a noise library that is not the same as the one I am using. As requested by Josh, I am creating my noise using shader code. No texture is included as Godot does.</p>

<blockquote>
  <p>Josh — 01/09/2024 19:28</p>
</blockquote>

<blockquote>
  <p>admittedly unity’s is pretty nice, except this: the FIRST TIME I can see perlin noise in that view is in the FloatOp
this is infuriating, because by inspection, it CLEARLY comes from the Texture2D op before it
which, hilariously, is loading perlin noise as a texture.
literally they have taken the simplest possible noise kernel and loaded it from a PNG image instead of just generating it live at a fixed resolution
<em>barf</em>
so my chief technical complaint is the extreme inefficiency resulting from not providing noise kernels as a generator op
and my chief UX complaint is that I can’t even fucking tell where that noise is coming from! because they don’t even preview it!
it’s just so bad.
do they offer a noise source? i.e. did you just decide to load that perlin turbulence texture from a file? or were you forced to?
another point of feedback on the Unity editor: float func “round” is ugly; we should use a layercake method instead
what I mean is, we want a “step function” multiplexer node that takes an input float, and then divides that float into ranges to choose inputs to combine
so round() would be this step function node with black and white as its texture inputs, float value as its mux input
similarly, you could do a “heat map” by instantiating this with blue, yellow, red, and white as texture inputs, the floating value remaining as the mux input, but cutoff values of [0, .25, .5, .75, 1]
for this idea, the interpolation range to also be configurable; for round(), you don’t want interpolation, because anything up to 0.5 should be pure black, and anything above that should be pure white
for the heatmap, you’d use interpolation for every step of the way; only the exact values in that array would return [black, blue, yellow, red, white]
everything else would be an interpolation of the two nearest neighbors</p>
</blockquote>

<blockquote>
  <p>Saif — 02/09/2024 07:48</p>
</blockquote>

<blockquote>
  <p>Black and white = noise?</p>
</blockquote>

<blockquote>
  <p>Josh — 02/09/2024 08:53</p>
</blockquote>

<blockquote>
  <p>no; one full-black RGB channel source “image” (infinite pixels, all sampling black), and another for white; you then pipe those two images into the multiplexer
set a single threshold point at 0.5
otherwise it works just like the heat map</p>
</blockquote>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 7, 8, and 9: My Boogeyperiod" /><published>2024-07-07T21:00:00+00:00</published><updated>2024-07-07T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/07/07/google-summer-of-code-2024-week-7-8-and-9-my-boogeyperiod.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>I planned to begin testing the <strong>VisualShader</strong> class once the generator reached a stable state.</p>

<h2 id="weird-dso-linking-error">Weird DSO linking error</h2>

<p>Before anything else, I want to express my frustration with Google’s technologies like gRPC, Protobuf, and Abseil. Google doesn’t seem to prioritize user experience when issues arise, as long as everything works within their own pipelines. You may recall the issue I encountered during the bonding period (<a href="https://k0t0z.github.io/gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html">Google Summer of Code 2024 Bonding Period</a>) when trying to build RGM. That same issue persists across my Ubuntu installation and two Arch installations. Now, I can’t even build the <strong>test-runner</strong> because of it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ld: .eobjs/EnigmaPlugin.o: undefined reference to symbol <span class="s1">'_ZN4absl12lts_2024011612log_internal21CheckOpMessageBuilderC1EPKc'</span>
/usr/bin/ld: /usr/lib/libabsl_log_internal_check_op.so.2401.0.0: error adding symbols: DSO missing from <span class="nb">command </span>line
collect2: error: ld returned 1 <span class="nb">exit </span>status
make[1]: <span class="k">***</span> <span class="o">[</span>../../Default.mk:23: ../../emake] Error 1
make[1]: Leaving directory <span class="s1">'/home/k0t0z/Desktop/gsoc24/enigma-dev/CommandLine/emake'</span>
make: <span class="k">***</span> <span class="o">[</span>Makefile:51: emake] Error 2
</code></pre></div></div>

<p>This time, it’s not about RGM. After some quick research, I found that I’m not the only one struggling with this. The issue is widespread:</p>

<ul>
  <li>https://bbs.archlinux.org/viewtopic.php?id=289986</li>
  <li>https://github.com/protocolbuffers/protobuf/issues/14500#issuecomment-1781292098</li>
  <li>https://github.com/qgis/QGIS/issues/55114</li>
  <li>https://github.com/protocolbuffers/protobuf/issues/15604#issuecomment-1929929148</li>
</ul>

<p>Variations of this error appeared with each attempted fix, but none of the solutions worked.</p>

<p>At first, Josh and I suspected that the linking interface between gRPC, Protobuf, and Abseil was unstable. To fix this, I would have to diverge and build gRPC, Protobuf, and Abseil from scratch. I reached out to my colleague Fares, who provided the older versions he’s using on Ubuntu. These versions were so outdated they didn’t even use CMake. This reminded me that Ubuntu, being a stable distro, often doesn’t have the latest library versions.</p>

<p>Given that my midterm evaluation is approaching and I need to show tangible progress, I’ve decided to switch to Ubuntu for now to ensure stability and meet my deadlines.</p>

<h2 id="visualshader-types"><code class="language-plaintext highlighter-rouge">VisualShader</code> Types</h2>

<p>To complete the <code class="language-plaintext highlighter-rouge">generate_shader_for_each_node</code> function, I needed certain types. Some of these types are already implemented within the engine, such as <a href="https://github.com/enigma-dev/enigma-dev/blob/3590b681f20174ccf24156769d2bbb94b10673e3/ENIGMAsystem/SHELL/Universal_System/var4.h#L279">variant</a>. However, I’m unsure if I can use them, given that the <code class="language-plaintext highlighter-rouge">VisualShader</code> class is not part of the engine but rather part of the <code class="language-plaintext highlighter-rouge">shared</code> library.</p>

<p>To work around this uncertainty, I created a new temporary custom type, defined as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">using</span> <span class="n">TVariant</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">monostate</span><span class="p">,</span> <span class="kt">float</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">TVector2</span><span class="p">,</span> <span class="n">TVector3</span><span class="p">,</span> <span class="n">TVector4</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span></code></pre></figure>

<p>The “T” in all the types stands for “Temporary.” Currently, the <strong>VisualShader</strong> class is not integrated into any larger system; it’s a standalone class that can be built with a simple <code class="language-plaintext highlighter-rouge">g++</code> command. These temporary types will eventually be replaced with engine types once they are available or confirmed. For now, they serve as placeholders to facilitate development until the proper engine integration is complete.</p>

<h2 id="most-important-operations-in-the-generator">Most Important Operations In The Generator</h2>

<blockquote>
  <p>Saif — 19/07/2024 20:37</p>
</blockquote>

<blockquote>
  <p>What type of operation that will be useful for the generated code? for example: - + / * mod … also but what about color effects?
like color blend or darken and lighten and all that?</p>
</blockquote>

<blockquote>
  <p>Josh — 19/07/2024 20:39</p>
</blockquote>

<blockquote>
  <p>matrix and arithmetic operations make a ton of sense
for me, the important operation is range mapping
so, you can check out the SVG specification for a pretty meh implementation of generalized filters
but what I think is missing is the ability to create step functions
basically, the ability to say “for values 0-0.5, use this filter; for values 0.5-1, use this one”
especially if it can automatically interpolate between them
by matrix operations, I just mean multiplying color channels
so basically, you have [r,g,b,a, const…] and the user specifies the matrix to multiply that by</p>
</blockquote>

<p>Let me clarify the conversation above. The goal of this project is to generate meaningful art using noise filters. Unlike traditional game engines such as <strong>Godot</strong> or <strong>Unity</strong>, we cannot rely on standard nodes. Instead, we need to create custom nodes that our AI agent can utilize. The most logical choice for these nodes are arithmetic operations for scalars and vectors.</p>

<p>In addition to custom nodes, we must provide more parameters for each node to give our AI agent a broader range of options to select from. For instance, the <strong>ValueNoise</strong> node, which was the first one I created, currently has a <strong>scale</strong> parameter. However, this is insufficient; we need to include additional parameters, similar to those found in the impressive application <a href="https://auburn.github.io/FastNoiseLite/">FastNoiseLite</a>.</p>

<blockquote>
  <p>Josh — 21/07/2024 19:38</p>
</blockquote>

<blockquote>
  <p>octaves and frequency (preferably h/v separately) are the most important
the domain warp should be a separate step
distance function for lerp is also good to have, but less important for perlin noise
yeah, perlin noise is 2D, so it often has two frequencies, but I suppose if we’re allowing transformations on domain and range, frequency doesn’t even matter
you can force the perlin noise to have a domain of 0-1 and make the user map it differently</p>
</blockquote>

<p>I will provide a more detailed explanation of this when I reach the AI component of the project.</p>

<p><img src="/gsoc24-blog/assets/fast-noise-tool.png" alt="Fast Noise Tool" /></p>

<h2 id="the-renderer">The Renderer</h2>

<p>Why are we implementing the <strong>Visual Shader Editor</strong> in the first place? The primary reason is to evaluate the performance of our AI agent. While we will have an error function to quantify the quality of the generated shader, visual inspection is essential, as Josh recommended.</p>

<p>When it comes to rendering and graphics, we turn to Robert. Although I’m not ready to tackle the renderer just yet, I like to familiarize myself with the necessary concepts in advance. Specifically, I want to understand how to apply my shader to a specific resource. For instance, if I have a sprite or a background, how do I apply the shader to it? If I wanted to create a disappearing effect, what would be the method to apply it to a sprite? ENIGMA has some built-in variables that it prepends to the shader code, and I aim to learn how these work.</p>

<blockquote>
  <p>R0bert — 23/07/2024 19:28</p>
</blockquote>

<blockquote>
  <p>ENIGMA has a little abstraction, the shaders are intended to have built in variables
like gm_Matrix and stuff, but idk if each backend to sets all the variables its supposed to like GM does
but not a language abstraction yet
its just uniform variable declarations that we prepend to the code of every user shader
its just our way of communicating things like the projection to the user’s shaders
yeah i think there’s gm_Texture too
d3d and opengl have 8 texture samplers built in or w/e
the shader gets a sampler object, so gm_Texture is an array i think of 8 or something
we bind the texture to the texture sampler
and then it can read it
opengl calls them texture units, direct3d calls them texture stages
sampler refers to the gpu side, in both cases
https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindTextureUnit.xhtml</p>
</blockquote>

<blockquote>
  <p>Saif — 23/07/2024 19:37</p>
</blockquote>

<blockquote>
  <p>if i have a shader code that changes the color (vec4), it calculates it firstly and then applies it, this way of applying the effect on the texture is done by?</p>
</blockquote>

<blockquote>
  <p>R0bert — 23/07/2024 19:38</p>
</blockquote>

<blockquote>
  <p>it sounds like you’re describing render-to-texture, i’ve never done that in glsl before
in typical case you’d render a flat 2d plane with the texture
you might be able to write to a texture buffer from glsl idk
and yes you need render-to-texture to postprocessing mostly…
so i think all you need to do is render a 2d quad
and create a surface (aka render-to-texture texture)
surface_create(width, height)
surface_set(mysurfid)
shader_set(saifsshaderid)
draw_rectangle(0,0,width,height)
those are the functions you need
put your texture in a background or sprite
you dont need to get at the actual texture
just draw it with draw_background_stretched
albeit i did add special texture_add functions to enigma, but ignore those ENIGMA only
easier if you just use background/make it self contained
anyway yeah then…
you can use surface_save and surface_get_texture if you want to do anything with the surface
@Saif you can dump it out or draw other objects with the effected texturealbeit i did add special texture_add functions to enigma, but ignore those ENIGMA only</p>
</blockquote>

<p>I had this conversation with Robert to understand how to utilize ENIGMA’s Graphics System for rendering the shader. Most of the functions he mentioned are integral to the engine, including <strong>surface_create</strong>, <strong>surface_set</strong>, <strong>shader_set</strong>, <strong>draw_rectangle</strong>, <strong>draw_background_stretched</strong>, <strong>surface_save</strong>, and <strong>surface_get_texture</strong>.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 6: The Rush Summer</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 6: The Rush Summer" /><published>2024-06-30T21:00:00+00:00</published><updated>2024-06-30T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/06/30/google-summer-of-code-2024-week-6-the-rush-summer.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<h2 id="enigma-and-google-protobuf">ENIGMA and Google Protobuf</h2>

<p>ENIGMA relies on Protobuf for various functionalities. RGM is structured as a Model-View-Controller (MVC) application, where each UI component of RGM is represented as part of a Protobuf message. This approach is also how ENIGMA handles the serialization and deserialization of its project files.</p>

<blockquote>
  <p>Josh — 01/07/2024 at 08:14</p>
</blockquote>

<blockquote>
  <p>you can eliminate a lot of that boilerplate using proto, @Saif
in fact, I recommend it, as you’ll need proto on hand to serialize to EGM etc</p>
</blockquote>

<blockquote>
  <p>add_node is a great example
of boilerplate, I mean; literally that is a function that protobuf would generate
check out the other resource messages
just search RGM for proto files</p>
</blockquote>

<blockquote>
  <p>Josh — 01/07/2024 at 09:25</p>
</blockquote>

<blockquote>
  <p>I suspect some of what I’ve written will still be necessary, but I suggest you try writing these node classes as protobuf messages and see where that gets you</p>
</blockquote>

<blockquote>
  <p>proto should save you a lot of effort here</p>
</blockquote>

<blockquote>
  <p>proto is just what C++ classes should look like</p>
</blockquote>

<blockquote>
  <p>well, sorry; as a storage layer, proto is certainly not what C++ classes should look like
but in terms of the features that a proto message offers….
there is absolutely no reason a modern programming language should not offer these features for its classes
proto just lets you do things like serialize and deserialize, use reflection, etc</p>
</blockquote>

<h2 id="the-ai-agent-phases">The AI Agent Phases</h2>

<p>When we reach the machine learning component, there are three main phases to consider:</p>

<ol>
  <li><strong>Fixed nodes, fixed connections, variable parameters</strong> (Fixed-Node layout).</li>
  <li><strong>Fixed nodes, variable connections, variable parameters</strong>.</li>
  <li><strong>Variable nodes, variable connections, variable parameters</strong>.</li>
</ol>

<p>Each phase progressively increases the complexity of the AI agent, with the first phase being the simplest.</p>

<blockquote>
  <p>Josh — 01/07/2024 at 09:20</p>
</blockquote>

<blockquote>
  <p>the node graph editor is a good chunk of work, and then the hard part is genetic recombination of node graphs
your first prototype should probably use a fixed node layout</p>
</blockquote>

<blockquote>
  <p>you can absolutely implement one that allows the ML to add or delete nodes, but then you need rules for handling recombination and crossover</p>
</blockquote>

<blockquote>
  <p>changing the counts and connections is simple enough, but leads to problems when cross-breeding two specimens with different graph structures</p>
</blockquote>

<blockquote>
  <p>in the end, the AI should generate the whole graph
but it’s totally okay if you don’t get that far</p>
</blockquote>

<blockquote>
  <p>I am pushing for a genetic algorithm
you have not heard the end of genetic algorithms
they are old school but will once again revolutionize artificial intelligence in the next ten years
in particular they will become important to avoid overfitting in DNN training</p>
</blockquote>

<blockquote>
  <p>their importance is about to skyrocket</p>
</blockquote>

<blockquote>
  <p>genetic algorithms are due for a Renaissance, is what I’m saying</p>
</blockquote>

<h2 id="visualshader-class"><code class="language-plaintext highlighter-rouge">VisualShader</code> Class</h2>

<p>Now that we’ve covered the theory, let’s discuss the important class I have been working on over the past few weeks.</p>

<p>The <strong>VisualShader</strong> class encompasses the graph and its core functionalities. As Josh mentioned, these primary functionalities should ideally be included in the Protobuf message; however, I prefer to complete the implementation first and then refactor as needed. The <strong>Graph</strong> is structured simply, as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">struct</span> <span class="nc">Graph</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">VisualShader</span><span class="o">::</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodes</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">VisualShader</span><span class="o">::</span><span class="n">Connection</span><span class="o">&gt;</span> <span class="n">connections</span><span class="p">;</span>
<span class="p">}</span> <span class="n">graph</span><span class="p">;</span></code></pre></figure>

<p>The main functions within the <strong>VisualShader</strong> class are as follows:</p>

<ul>
  <li><strong>generate_shader</strong></li>
  <li><strong>generate_preview_shader</strong></li>
  <li><strong>generate_shader_for_each_node</strong></li>
</ul>

<p>The <strong>generate_shader</strong> function serves as the primary entry point for users. It contains a recursive algorithm that traverses the graph, starting from the output node. The <strong>Output</strong> node is a special node in the graph; it cannot be added or deleted and has an ID of 0.</p>

<p>The <strong>generate_preview_shader</strong> function is a simplified version of <strong>generate_shader</strong>. It is designed to generate the shader for the preview window, which will utilize ENIGMA’s Graphics System for rendering. This function is essential because it can generate the shader starting from any node in the graph.</p>

<p>Both <strong>generate_shader</strong> and <strong>generate_preview_shader</strong> will call the <strong>generate_shader_for_each_node</strong> function. This function is invoked for each node in the graph, generating the shader for that node and its children.</p>

<p>Now, let’s delve into the <strong>generate_shader</strong> function. To generate the shader code accurately, we first need to separate the code into three distinct parts:</p>

<ul>
  <li><strong>Global code</strong></li>
  <li><strong>Global code for each node</strong></li>
  <li><strong>Local code for each node</strong></li>
</ul>

<p>The <strong>global code</strong> must be generated only once. Therefore, if a node is used multiple times in the graph, we want to avoid generating the code for it repeatedly. The <strong>global code for each node</strong> pertains to the code generated for each node in the graph, while the <strong>local code for each node</strong> is specific to each node and its children.</p>

<p>To facilitate this, I created multiple buffers at the start of the function to store the code and pass them by reference to the recursive function.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">global_code</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">global_code_per_node</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">shader_code</span><span class="p">;</span></code></pre></figure>

<p>Another important aspect to mention is that the connections are stored within a <code class="language-plaintext highlighter-rouge">std::vector</code>. While this approach provides flexibility, it can increase the time complexity of the algorithm. However, this issue can be addressed using the following snippet:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ConnectionKey</span><span class="p">,</span> <span class="k">const</span> <span class="n">Connection</span><span class="o">*&gt;</span> <span class="n">input_connections</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ConnectionKey</span><span class="p">,</span> <span class="k">const</span> <span class="n">Connection</span><span class="o">*&gt;</span> <span class="n">output_connections</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">func_code</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">processed</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="n">Connection</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">connections</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ConnectionKey</span> <span class="n">from_key</span><span class="p">;</span>
    <span class="n">from_key</span><span class="p">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">from_node</span><span class="p">;</span>
    <span class="n">from_key</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">from_port</span><span class="p">;</span>

    <span class="n">output_connections</span><span class="p">[</span><span class="n">from_key</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>

    <span class="n">ConnectionKey</span> <span class="n">to_key</span><span class="p">;</span>
    <span class="n">to_key</span><span class="p">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">to_node</span><span class="p">;</span>
    <span class="n">to_key</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">to_port</span><span class="p">;</span>

    <span class="n">input_connections</span><span class="p">[</span><span class="n">to_key</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Now, we can call the <strong>generate_shader_for_each_node</strong> function for the output node. This function will be executed recursively for each node in the graph. We begin by checking the inputs of the current node until we reach a node that has no inputs (the input node). Once we identify such a node, we proceed to generate the code for that node and its children.</p>

<p>In the <strong>VisualShaderTest.Test_generate_shader</strong> test, the <strong>generate_shader</strong> function took <strong>160 μs</strong> to generate the shader for the graph. While I believe there is room for improvement in this time, my priority is to ensure that no time is wasted during this process.</p>

<p>The <strong>ConnectionKey</strong> union is defined as follows:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">union</span> <span class="n">ConnectionKey</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">FragmentedKey</span> <span class="p">{</span>
        <span class="kt">uint64_t</span> <span class="n">node</span> <span class="o">:</span> <span class="mi">32</span><span class="p">;</span>
        <span class="kt">uint64_t</span> <span class="n">port</span> <span class="o">:</span> <span class="mi">32</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">f_key</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">key</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">ConnectionKey</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">key</span><span class="p">.</span><span class="n">key</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p><img src="/gsoc24-blog/assets/connection-key-theory.png" alt="Connection Key Theory" /></p>

<p>This union will serve as the key for each <strong>Connection</strong> object in a <code class="language-plaintext highlighter-rouge">std::map</code>. The key is a 64-bit integer, with the first 32 bits representing the node ID and the second 32 bits representing the port ID. This structure allows us to efficiently search for connections in constant time, <strong>O(1)</strong>, using just the node ID and port ID.</p>

<h2 id="changing-the-structure-of-the-project">Changing The Structure Of The Project</h2>

<p>After discussing with Greg, I learned that anything within the <code class="language-plaintext highlighter-rouge">ENIGMAsystem/</code> directory must provide user-facing functions, specifically the EDL functions that game developers will use. Since the <strong>VisualShader</strong> class is intended for use by RGM only, I followed Josh’s recommendation and moved the class to <code class="language-plaintext highlighter-rouge">ENIGMAsystem/shared/ResourceTransformations/VisualShader/</code>.</p>

<p>Additionally, the tests for this class should be part of the <code class="language-plaintext highlighter-rouge">test-runner</code> instead of <code class="language-plaintext highlighter-rouge">emake-tests</code>, so I will relocate them to <code class="language-plaintext highlighter-rouge">CommandLine/testing/Tests/</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
enigma-dev
├── ...
├── CommandLine
│   ├── ...
│   └── testing
│       ├── ...
│       └── Tests
│           ├── ...
│           ├── visual_shader_tests.cpp
│           └── visual_shader_nodes_tests.cpp
│
└── shared
    └── ResourceTransformations
        └── VisualShader
            ├── ...
            ├── visual_shader.h
            ├── visual_shader.cpp
            ├── visual_shader_nodes.h
            └── visual_shader_nodes.cpp

</code></pre></div></div>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Week 1, 2, 3, 4, and 5: Final Final Exams</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Week 1, 2, 3, 4, and 5: Final Final Exams" /><published>2024-05-26T21:00:00+00:00</published><updated>2024-05-26T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/26/google-summer-of-code-2024-week-1-2-3-4-and-5-final-final-exams.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>I should note that I am currently working at a slower pace due to being occupied with my final exams and graduation preparations.</p>

<p>I draw inspiration from the Godot Game Engine, particularly as I aim to reach the machine learning phase of the project. On June 16th, I discovered that Godot implements its Visual Shader system using a <a href="https://web.archive.org/web/20120507164830/https://web.mit.edu/~emin/www/source_code/red_black_tree/index.html">Red-Black Tree in C</a>, which can be found in the <a href="https://github.com/godotengine/godot/blob/705b7a0b0bd535c95e4e8fb439f3d84b3fb4f427/scene/resources/visual_shader.h#L129-L132">Godot Visual Shader code (lines 129-132)</a>. As Josh pointed out, <code class="language-plaintext highlighter-rouge">std::map</code> in C++ is also based on a red-black tree, which I hadn’t realized before.</p>

<p>One interesting insight I’ve gained is why Godot developers created their own implementation of red-black trees. I once had a conversation with one of them about their decision not to rely on the Standard Template Library (STL).</p>

<blockquote>
  <p>December 29, 2023</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:55 AM</p>
</blockquote>

<blockquote>
  <p>guys, i have a question in mind, i know that godot doesn’t require any installation setup and wondered what the installation setup gives? I mean why just not every program out there use the same approach there must be something</p>
</blockquote>

<blockquote>
  <p>Calinou 1:50 AM</p>
</blockquote>

<blockquote>
  <p>installers allow for better system integration like desktop icons, start menu entries, entries in Add/Remove Programs
that’s why there is still some demand for them. It is possible to do this stuff manually or with external tools like Scoop, but some people (companies in particular) value a built-in solution for large-scale deployments</p>

  <p>it is possible to create installers that work without administrator privileges if the app is installed for a single user only</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:56 AM</p>
</blockquote>

<blockquote>
  <p>Godot is self contained in a single file, many programs aren’t, that’s generally why they require installers, and have libraries they depend on etc.</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:57 AM</p>
</blockquote>

<blockquote>
  <p>wait a minute, Godot doesn’t depend on any library?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:58 AM</p>
</blockquote>

<blockquote>
  <p>Not any other than system ones, it contains all the third party things</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:58 AM</p>
</blockquote>

<blockquote>
  <p>also what do u mean by self-contained in a single file?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:58 AM</p>
</blockquote>

<blockquote>
  <p>It is a single file? It doesn’t have a lot of extra files like many programs have, it embeds all the data of it in the executable</p>
</blockquote>

<blockquote>
  <p>k0T0z 12:59 AM</p>
</blockquote>

<blockquote>
  <p>hmmm, interesting, I guess &lt;std::string&gt; is from system as well, why not use it?</p>
</blockquote>

<blockquote>
  <p>AThousandShips 12:59 AM</p>
</blockquote>

<blockquote>
  <p>Look at any one software on your computer, in for example Program Files on Windows
See <a href="https://docs.godotengine.org/en/stable/about/faq.html#doc-faq-why-not-stl">here</a> 🙂</p>
</blockquote>

<blockquote>
  <p>AThousandShips 1:00 AM</p>
</blockquote>

<blockquote>
  <p>We use our custom String type, as the one provided by STL is too basic and lacks proper internationalization support.
STL templates create very large symbols, which results in huge debug binaries. We use few templates with very short names instead.</p>
</blockquote>

<blockquote>
  <p>Also the STL library is infamous for standards iffyness
With various, quite serious, inconsistencies between different implementations
Some areas of the STL doesn’t provide any guarantees or details on things like performance, or safety, it leaves it entirely up to the implementation
Came across a case of it some time ago when discussing this very topic but forget what it was now, but it was pretty glaring
Even trivial things like exception handling is weird in some libraries, see <a href="https://github.com/godotengine/godot-cpp/issues/1326">here</a>, where one implementation of the library on Arch Linux is broken with exceptions disabled</p>
</blockquote>

<p>This shouldn’t pose a problem for ENIGMA! 🤣 Unlike Godot, ENIGMA is designed to be simple to use and develop, so I don’t foresee any issues with incorporating the Standard Template Library (STL). However, I must remember that to progress to the AI component, I need to complete the entire editor as quickly as possible, which is a significant undertaking.</p>

<p>By the way, I have already planned to extend my project to a maximum of 22 weeks, which is the longest extension allowed. I also aim to implement the Matching Machine Learning algorithm during this time.</p>

<blockquote>
  <p>gfundies — 25/06/2024 21:44</p>
</blockquote>

<blockquote>
  <p>@Josh @Saif https://developers.google.com/open-source/gsoc/help/project-dates what date did you want?
need to pick from those</p>
</blockquote>

<p>In addition to implementing the graph, I needed to gain a better understanding of the project’s use case—specifically, how game developers will utilize it. This knowledge will help me determine the next steps in the project. Fortunately, Josh provided a clear explanation that greatly assisted my understanding.</p>

<blockquote>
  <p>Josh — 29/06/2024 17:34</p>
</blockquote>

<blockquote>
  <p>converting textures to this is just a way to prime it; few people would start with a sprite and convert it to a shader. Instead, they’d obtain a photograph of something—grass, wood, rust—and use your tool to convert that photograph into a seamless (infinite) artistic representation that can be tweaked for stylistic consistency with the rest of their game
the shaders would then be used to color objects, obviously, whether that’s a skybox or background texture that doesn’t end or just a way to color boxes so that no two boxes look the same
the goal is largely to avoid repetition and predictability by taking an example and mathematically generalizing it
clearly the predictability remains high since you’ve literally found a mathematical way of creating it, but artistically your eyes won’t go “wow it’s the same thing over and over again”</p>
</blockquote>

<h2 id="graph-lifecycle">Graph Lifecycle</h2>

<p>I’d like to elaborate on this approach for the benefit of future contributors who may take on this project—hopefully, I will have the opportunity to mentor them.</p>

<p>First, the game developer will load a resource into the Visual Shader Editor, choosing between backgrounds and sprites. For now, let’s keep it simple and focus on backgrounds. Once the resource is loaded, the game developer can click a “Match Image” button that will be created.</p>

<p>At this point, the AI agent takes over, generating the graph and optimizing the parameters based on the loaded resource image until it converges.</p>

<p>After the AI agent completes its work, the compiler will write a resource ID to the generated shader based on this graph.</p>

<p>This is how the graph editor and the graph will be utilized during game development. For instance, if I want to create a volcano surface, I simply need to provide a volcano background image, and the AI agent will handle the rest.</p>

<h2 id="godots-role">Godot’s Role</h2>

<p>To develop an effective approach for the Visual Shader, I decided to work in parallel with Godot’s Visual Shader Editor to enhance my implementations. You can refer to the following pull requests for more details: <a href="https://github.com/godotengine/godot/pull/93791">#93791</a>, <a href="https://github.com/godotengine/godot/pull/93988">#93988</a>, and <a href="https://github.com/godotengine/godot/pull/93992">#93992</a>.</p>

<h2 id="debugging-enigma-emake-tests-inside-vscode">Debugging ENIGMA <code class="language-plaintext highlighter-rouge">emake-tests</code> inside VSCode</h2>

<p>I have always wanted to run the debug session directly from Visual Studio Code instead of doing it manually. Below are the task and launch configuration objects I created for this purpose:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">//</span><span class="w"> </span><span class="err">task</span><span class="w"> </span><span class="err">object:</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"make emake-tests"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">ENIGMA</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">make</span><span class="w"> </span><span class="err">(not</span><span class="w"> </span><span class="err">CMake)</span><span class="w"> </span><span class="err">at</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">time</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">writing</span><span class="w"> </span><span class="err">this.</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">//</span><span class="w"> </span><span class="err">launch</span><span class="w"> </span><span class="err">configuration</span><span class="w"> </span><span class="err">object:</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Launch emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/emake-tests"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"--gtest_filter="</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">TODO:</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">filter</span><span class="w"> </span><span class="err">here.</span><span class="w">
    </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w">
    </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build emake-tests"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry><entry><title type="html">Google Summer of Code 2024 Bonding Period</title><link href="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html" rel="alternate" type="text/html" title="Google Summer of Code 2024 Bonding Period" /><published>2024-05-15T21:00:00+00:00</published><updated>2024-05-15T21:00:00+00:00</updated><id>https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period</id><content type="html" xml:base="https://k0t0z.github.io/gsoc24-blog//gsoc24-blog/blog/2024/05/15/google-summer-of-code-2024-bonding-period.html"><![CDATA[<p>This blog post is related to my Google Summer of Code 2024 project: <a href="https://summerofcode.withgoogle.com/programs/2024/projects/wYTZuQbA">Procedural Fragment Shader Generation Using Classic Machine Learning</a>.</p>

<p>After installing Arch Linux, I plan to build RGM as a productive task during this period. Naturally, it won’t run successfully on the first attempt, so I’ll document the error here for future reference:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span> 76%] Linking CXX executable emake
    /usr/bin/ld: CMakeFiles/emake.dir/EnigmaPlugin.cpp.o: undefined reference to symbol <span class="s1">'_ZN4absl12lts_2024011612log_internal21CheckOpMessageBuilderC1EPKc'</span>
    /usr/bin/ld: /usr/lib/libabsl_log_internal_check_op.so.2401.0.0: error adding symbols: DSO missing from <span class="nb">command </span>line
    collect2: error: ld returned 1 <span class="nb">exit </span>status
    make[2]: <span class="k">***</span> <span class="o">[</span>Submodules/enigma-dev/CommandLine/emake/CMakeFiles/emake.dir/build.make:203: Submodules/enigma-dev/CommandLine/emake/emake] Error 1
    make[1]: <span class="k">***</span> <span class="o">[</span>CMakeFiles/Makefile2:625: Submodules/enigma-dev/CommandLine/emake/CMakeFiles/emake.dir/all] Error 2
    make: <span class="k">***</span> <span class="o">[</span>Makefile:136: all] Error 2
</code></pre></div></div>

<p>Before installing Arch Linux, I attempted to build RGM on my Ubuntu machine, but encountered the same error. This was before I was accepted into GSoC.</p>

<p>During the bonding period, I wasn’t able to contribute much, as I was occupied with my final exams.</p>

<p>Later in the bonding period, specifically on May 24th, I wanted to begin writing some code but was unsure where to place it, as the overall project structure was still unclear.</p>

<p>In any case, the graph backend isn’t directly related to the <code class="language-plaintext highlighter-rouge">Graphics_Systems</code>, although it will require a system for rendering the generated shaders. After some thought, I concluded that the most suitable location for it would be within the <code class="language-plaintext highlighter-rouge">Universal_System</code>, and Josh agreed with this placement.</p>

<p>Here’s the expected structure of my files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enigma-dev
├── ...
├── CommandLine
│   ├── ...
│   └── emake-tests
│       ├── ...
│       └── ShaderGraphTests
│           ├── ...
│           ├── GraphTests.cpp
│           └── NodeTests.cpp
└── ENIGMAsystem
    └── SHELL
        ├── ...
        └── Universal_System
            ├── ...
            └── ShaderGraph
                ├── ...
                ├── Graph.cpp
                ├── Graph.h
                ├── Node.cpp
                └── Node.h
</code></pre></div></div>

<p>Once the graph is implemented, I will move on to developing the generator. However, I’m unsure how I will visualize the output shader. I’ll discuss this with my mentor, but there’s a possibility that I might need to integrate the node editor with RGM, which I would prefer to avoid.</p>

<h2 id="machine-learning-role">Machine Learning Role</h2>

<p>Machine Learning can seed the texture octaves based on keywords like <strong>grass</strong> or <strong>clouds</strong>. Check: <a href="https://filterforge.com/">https://filterforge.com/</a>. NeoTextureEdit is another example of a tool that uses machine learning to generate textures, however it is Java. Those doesn’t use machine learning to generate the shaders, but they can be used as a reference. These are toolboxes for converting noise into textures. For example:</p>

<ol>
  <li>
    <p>They can assign functions to bands of values from the noise (e.g. 0 - 0.5 are this color/texture/function, values above 0.5 are this other one)</p>
  </li>
  <li>
    <p>They can use your noise as, e.g, bump maps, height maps, normal maps, spec maps, etc.</p>
  </li>
</ol>

<p><img src="/gsoc24-blog/assets/project-output-preview1.png" alt="Project Output Preview 1" /></p>

<p>Also, an LLM can be used on top of this to choose noise kernels and parameters. See <a href="https://upload.wikimedia.org/wikipedia/commons/c/ca/Examples_Of_Filter_Forge_Textures.png">https://upload.wikimedia.org/wikipedia/commons/c/ca/Examples_Of_Filter_Forge_Textures.png</a>.</p>

<p>This is related to RGM and ENIGMA as well, because we want the compositor functions to be available in the engine so users can ship those instead of the image data.</p>

<p>Imagine a black and white cell right next to each other (0 and 1); you interpolate those with some smoothing kernel, so with lerp(), the pixels along the way would be a linear gradient (0.5 at the halfway point, 0.75 at the 3/4 point, 0.875 at the 7/8 point). You can also use a slerp() to get rounder “beads” of black and white.</p>

<p>The Machine Learning can be be an error function over the entire image; we’d seed the thing with a hue extraction over some fixed region of the image (one approach is that we could use K-means and vary K, then use the clusters as worley points). I would model this as a genetic  algorithm that encodes for the kernels and the points, and we’d seed species of these with fixed functions like the one I just proposed. Perlin seed could just be a centroid over the entire image.</p>

<p>An interesting art project that Josh implemented:</p>

<p><img src="/gsoc24-blog/assets/josh-art-project1.png" alt="Josh Art Project - 1" /></p>

<p>the blue/red is perlin noise
with quadratic interpolation, it looks like this up close:</p>

<p><img src="/gsoc24-blog/assets/josh-art-project2.png" alt="Josh Art Project - 2" /></p>

<p><strong>Why we can’t use an LLM to generate the shader code?</strong></p>

<p>I wouldn’t rely on a large language model (LLM) to generate shader code directly. Instead, I would opt for a structured approach using a library of routines designed to composite noise kernel outputs. These kernels could include Perlin, Worley, Simplex, or others. You could even start with a base texture and apply interpolation functions like linear, bilinear, spherical, sincos, or Lanczos. These functions provide a value between 0 and 1 at any fractional pixel position, and they can also work in 3D, which is especially useful for animated textures.</p>

<p>Once you have this value, you can map it to a color by passing it through a function that, for example, thresholds the output: values between 0 and 0.45 could correspond to blue, 0.45 to 0.55 to white, and 0.55 to 1 to red. However, these colors don’t have to be static; they can themselves be outputs from other noise functions, or simply raw textures or static colors, depending on the need. The final output can take various forms, such as a texture, U/V map, bump map, or normal map.</p>

<p>Essentially, this approach allows us to generate images with infinite detail by compositing noise kernels, textures, and colors. These generated images can then be used for various mapping purposes, like bump maps, normal maps, specular maps, or ambient textures. Tools like NeoTextureEdit already allow you to do much of this, though NeoTextureEdit is Java-based and generates only images, not shaders.</p>

<p>Once the procedural generation is fully developed, machine learning techniques could be applied to optimize the process, such as finding the best-fit procedural texture for a given target image. For example, if you wanted to generate something that resembles grass, you could use a genetic algorithm to find the noise kernel parameters that most closely approximate the texture of grass. The process could be initialized with several noise kernels selected via clustering methods like centroid or K-means. Applying K-means clustering over a tuple of DFT (Discrete Fourier Transform) values and color information could greatly improve the approximation of real-world textures. While these approaches involve machine learning, they don’t necessarily require deep neural networks (DNNs), but they would reduce the parameter space enough to make the application of DNNs feasible later on.</p>

<p>This Houdini page is interesting: <a href="https://www.sidefx.com/docs/houdini/nodes/sop/volumenoisesdf.html">https://www.sidefx.com/docs/houdini/nodes/sop/volumenoisesdf.html</a>.</p>

<p>One of the great aspects of this project is that, by using shaders, you can instantly preview the same logic within a Qt GL context. This allows for rapid iterations and visual feedback.</p>

<p>Josh recommended incorporating the ability to modify the x, y, and z coordinates, as well as the final noise kernel value, using custom functions. For example, to create animations, you could introduce a time-based factor that shifts one or more of these values. This approach would enable dynamic changes and smooth transitions, making it easier to implement animated effects.</p>

<p>The most basic element is the ambient color map, or the primary texture that defines the surface appearance of an object. This map provides color information but doesn’t account for lighting or depth effects, so it can look flat, especially when viewed from different angles—similar to the visuals in games like <em>Mario 64</em>.</p>

<p>To enhance realism, additional techniques like specular mapping, offset mapping, and bump maps are applied. These techniques add depth, texture, and reflectivity to the surface, making it react more naturally to lighting and movement. See <a href="https://i.imgur.com/TgzU54D.jpeg">https://i.imgur.com/TgzU54D.jpeg</a>.</p>

<p>By allowing users to define their texture as a normal map (or as a channel within a normal map), specular map, offset map, or even a bump map from which the others can be derived, we can unlock a range of visually impressive effects. This flexibility in handling texture mapping allows for more dynamic and realistic surfaces.</p>

<table>
  <tbody>
    <tr>
      <td>Another interesting aspect is the use of Worley noise, which is distance-based. You can think of it as randomly-placed points, with each pixel representing the distance to the nearest point. One key variable is the distance function itself—it doesn’t have to be Cartesian (i.e., Euclidean distance, such as (\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2})). You can use alternatives like Manhattan distance ((</td>
      <td>x_2 - x_1</td>
      <td>+</td>
      <td>y_2 - y_1</td>
      <td>)) or others, depending on the effect you want. Here’s a reference to various distance metrics: <a href="https://numerics.mathdotnet.com/Distance">Numerics Mathdotnet Distance</a>.</td>
    </tr>
  </tbody>
</table>

<p>Another variable you can manipulate is the clamping function. The distance values you generate won’t naturally fall between 0 and 1; they could range up to the texture size. You can adjust how these values are clamped or even repeat the pattern. For instance, if you apply Worley noise with a Manhattan distance function and repeat every 20 units, you can achieve a pattern similar to the one in the image you referenced.</p>

<p>It’s worth noting that the example you shared probably has additional constraints, as some regions have distinct blackness around them. The exact distance function wasn’t shared, but the diagonal lines clearly indicate a Manhattan-based pattern. Chebyshev distance is another metric you might consider, though it wasn’t listed in the link.</p>

<p>Ultimately, my advice is to experiment—exploring how different mathematical operations on pixel data affect the visual outcome is not only educational but also a lot of fun. You can use this exploration to create stunning fractals, patterns, and shaders. Essentially, what I’m suggesting is a tool or wizard that sits on top of ShaderToy, providing users with an accessible interface for these kinds of shader manipulations.</p>

<p><a href="https://www.shadertoy.com/">ShaderToy</a></p>

<p>Imagine a 4x4 random texture and scaling it up; something like this:</p>

<p><img src="/gsoc24-blog/assets/cubic-interpolation-example.png" alt="Cubic Interpolation Example" /></p>

<p>that’s just cubic interpolation</p>

<p>here’s linear:</p>

<p><img src="/gsoc24-blog/assets/linear-interpolation-example.png" alt="Linear Interpolation Example" /></p>

<p>and here’s none:</p>

<p><img src="/gsoc24-blog/assets/no-interpolation-example.png" alt="No Interpolation Example" /></p>

<p>watch what happens if I tile it to 8×8, 16×16, 32×32, upscale all to 400×400:</p>

<p><img src="/gsoc24-blog/assets/1x1-scale-example.png" alt="1x1 Scale Example" />
<img src="/gsoc24-blog/assets/4x4-scale-example.png" alt="4x4 Scale Example" />
<img src="/gsoc24-blog/assets/8x8-scale-example.png" alt="8x8 Scale Example" />
<img src="/gsoc24-blog/assets/16x16-scale-example.png" alt="16x16 Scale Example" />
<img src="/gsoc24-blog/assets/32x32-scale-example.png" alt="32x32 Scale Example" /></p>

<p>when I composite those (via addition), I get this:</p>

<p><img src="/gsoc24-blog/assets/400x400-scale-example.png" alt="400x400 Scale Example" /></p>

<p>mind you, that’s very regular-looking because I made it entirely by hand
there’s nothing random about it, really
but you can see how I started with a 4x4 grid of “random” pixels, upsampled to 400×400 with a lanczos interpolation function (“LoHalo”), then composited
so in that routine, the final output is .5 (octave 1) + .25 (octave 2) + .125 (octave 3) + .0625 (octave 4)</p>

<p>Josh used <a href="https://www.gimp.org/downloads/">Gimp</a> to create the images.</p>

<blockquote>
  <p>Seif — 22/02/2024 19:58</p>
</blockquote>

<blockquote>
  <p>magnificent … u can create a cold mountain view using just the right noise function … I really loved that art
this is my first time dealing with something that describes “perfection” as “not needed” else we need something random not perfect, this is so cool</p>
</blockquote>

<blockquote>
  <p>Josh — 22/02/2024 20:34</p>
</blockquote>

<blockquote>
  <p>now you’re getting it 🙂
our goal here is to put this power in users’ hands
we want it to be easy for them to discover how useful this is
perlin noise is used in things like enemy layout, too (edited)
it controls resource deposits in games like Terraria and Factorio</p>
</blockquote>

<p>For example:</p>

<p><img src="/gsoc24-blog/assets/perlin-noise-texture.png" alt="Perlin Noise Texture" /></p>

<p><img src="/gsoc24-blog/assets/perlin-noise-texture-use-case.png" alt="Perlin Noise Texture Use Case" /></p>

<p>enemy camps where the red is, boss camp where the blue is, walls around it in blue
just as an example</p>

<p>Josh showed me another example:</p>

<p>oh, and I think you’ve probably figured this out by now, but look what happens if you take that same image I pasted above and make only a small band in the middle white:</p>

<p><img src="/gsoc24-blog/assets/perlin-noise-texture-derivative.png" alt="Perlin Noise Texture Derivative" /></p>

<p>so a really cool way to animate this is by sliding that pass band around (changing the accepted/white values from 0-0.1 gradually up to 0.1-0.2 and continuing to 0.2-0.3 …  0.5-0.6 … 0.9-1)
the other way to animate it is to use a 3D grid and move slowly along the Z axis (which you can do with or without that pass band)</p>

<p>This is a great example of reflections at the bottom of a pool or perhaps a visualization of an electrical field.</p>

<p>A great example of this project’s output would be: https://acegikmo.com/shaderforge/</p>

<p>The last technical issue I want to address is the problem of generating infinite textures using Worley noise. Josh suggested solving this by applying the modulo operator, which I’ve also detailed in my proposal.</p>

<p>Worley noise works by choosing random point locations in advance, but the challenge is that this inherently limits the texture to a finite area. My initial suggestion was to place these points in a random grid, but there’s a catch: not every grid cell should necessarily contain a point, and the point’s position within the cell should be randomized. The issue arises when you have only a limited number of points (N). Without tiling those points, you can’t generate pixels beyond their containing area, which prevents the texture from being infinite.</p>

<p>To overcome this limitation, we can use a pseudo-random function based on the coordinates (x, y) to determine whether a grid cell contains a point, and if so, where that point is positioned within the cell. While this method ensures infinite generation, it eliminates the possibility of multiple points being clustered together in close proximity, which is a trade-off.</p>

<p>“Tiling” refers to a technique where, for example, in a 128×128 texture, the point at (130,130) would correspond to the same point at (2,2) by using the modulus operation to wrap the coordinates. The challenge here is that points will appear constrained to their respective grid cells, which may produce a visually artificial pattern. However, this can be mitigated with more complex mathematical techniques.</p>

<p>One effective solution to improve tileability is to introduce multiple octaves of noise. By doing this, you progressively increase the freedom of point movement. For instance, 50% of the points could be restricted to their grid cell, 75% could move freely within the surrounding 8x8 cells, 87.5% within 64x64 cells, and so on. By the time you’re looking at a 512x512 region, 93.75% of the points are still bound, but the human eye would likely be unable to detect these constraints. This multi-octave approach creates a more natural and seamless texture across infinite space.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[This blog post is related to my Google Summer of Code 2024 project: Procedural Fragment Shader Generation Using Classic Machine Learning.]]></summary></entry></feed>